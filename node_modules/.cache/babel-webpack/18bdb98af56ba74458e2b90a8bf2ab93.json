{"ast":null,"code":"import { CreatePermitJSONModel, DesignationsModel, PermitDrawMapDetails, UsrnListMOdel } from './create-permit-draw-map.model';\nimport { ELGIN_MAP_GEOMETRY_TYPE, MASTER_DATA_DOMAIN, ONE_NETWORK_GEOMETRY_TYPE } from 'src/app/constants/app-repo.constants';\nimport { FormModeConstant, WidgetConstants } from 'src/app/constants/widget-constants';\nimport { GLOBAL_PARAM_KEY } from 'src/app/app-constants';\nimport { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/services/elgin-start-up.service\";\nimport * as i3 from \"src/app/services/session-storage.service\";\nimport * as i4 from \"src/app/services/app-repo-helper.service\";\nimport * as i5 from \"src/app/services/notification.service\";\nimport * as i6 from \"src/app/services/validation.service\";\nimport * as i7 from \"src/app/services/server-api-interface-service.service\";\nimport * as i8 from \"@angular/flex-layout/flex\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/radio\";\nimport * as i11 from \"@angular/material/button\";\nimport * as i12 from \"@angular/material/tooltip\";\nimport * as i13 from \"@angular/material/icon\";\nimport * as i14 from \"@angular/material/form-field\";\nimport * as i15 from \"@angular/material/select\";\nimport * as i16 from \"@angular/forms\";\nimport * as i17 from \"@angular/material/core\";\nimport * as i18 from \"@angular/material/card\";\nimport * as i19 from \"../../../directive/helper-text-popover/helper-text-popover.directive\";\nimport * as i20 from \"@angular/material/checkbox\";\n\nfunction CreatePermitDrawMapComponent_div_10_mat_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r15.usrn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r15.usrnwithstreetname, \"\");\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_10_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 25);\n    i0.ɵɵtext(1, \"Please Select USRN\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 20);\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Select USRN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 21);\n    i0.ɵɵlistener(\"ngModelChange\", function CreatePermitDrawMapComponent_div_10_Template_mat_select_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.selectedUSRN = $event;\n    })(\"selectionChange\", function CreatePermitDrawMapComponent_div_10_Template_mat_select_selectionChange_4_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.changeUSRN();\n    });\n    i0.ɵɵtemplate(5, CreatePermitDrawMapComponent_div_10_mat_option_5_Template, 2, 2, \"mat-option\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-error\");\n    i0.ɵɵtext(7, \"Field must be valid\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, CreatePermitDrawMapComponent_div_10_span_8_Template, 2, 0, \"span\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedUSRN);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.usrnArray);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.ismulitusrnselect);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"label\", 26);\n    i0.ɵɵtext(2, \"Works Location Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.dataModel.data.worksLocationDescription);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"label\", 26);\n    i0.ɵɵtext(2, \"Works Location Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.dataModel.data.worksLocationDescription);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵelementStart(2, \"label\", 26);\n    i0.ɵɵtext(3, \"Location details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r3.dataModel.data.location_details);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵelementStart(2, \"label\", 26);\n    i0.ɵɵtext(3, \"Location details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r4.dataModel.data.location_details);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"label\", 26);\n    i0.ɵɵtext(2, \"Post Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r5.dataModel.data.postcode);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"label\", 26);\n    i0.ɵɵtext(2, \"Post Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r6.dataModel.data.postcode);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"label\", 26);\n    i0.ɵɵtext(2, \"USRN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r7.selectedUSRN);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"label\", 26);\n    i0.ɵɵtext(2, \"USRN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r8.dataModel.data.usrn);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"div\", 27);\n    i0.ɵɵelementStart(2, \"label\", 26);\n    i0.ɵɵtext(3, \"Road Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 27);\n    i0.ɵɵelementStart(7, \"label\", 26);\n    i0.ɵɵtext(8, \"Highway Authority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r9.dataModel.data.roadType);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r9.dataModel.data.highway_authority_name);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1, \" Please note that the road you have chosen is a private road. Please contact the owner of the road as the Highway Authority may not be responsible for road works on this road. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"div\", 27);\n    i0.ɵɵelementStart(2, \"label\", 26);\n    i0.ɵɵtext(3, \"Road Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 27);\n    i0.ɵɵelementStart(7, \"label\", 26);\n    i0.ɵɵtext(8, \"Highway Authority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r11.dataModel.data.roadType);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r11.dataModel.data.highway_authority_name);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_24_div_1_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 32);\n    i0.ɵɵelementStart(1, \"mat-card\", 33);\n    i0.ɵɵelementStart(2, \"mat-checkbox\", 34);\n    i0.ɵɵlistener(\"change\", function CreatePermitDrawMapComponent_div_24_div_1_li_5_Template_mat_checkbox_change_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r25);\n      const i_r23 = restoredCtx.index;\n      const ctx_r24 = i0.ɵɵnextContext(3);\n      return ctx_r24.onDesignationCheckBoxChange(i_r23, $event.checked);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵelementStart(4, \"div\", 35);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 36);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 37);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const d_r22 = ctx.$implicit;\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"helperTextData\", ctx_r21.getHelpTextData(d_r22));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", d_r22.isChecked);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(d_r22.code);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(d_r22.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(d_r22.periodicityCode);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_24_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"label\", 26);\n    i0.ɵɵtext(2, \"Designations\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 29);\n    i0.ɵɵelementStart(4, \"ul\", 30);\n    i0.ɵɵtemplate(5, CreatePermitDrawMapComponent_div_24_div_1_li_5_Template, 10, 5, \"li\", 31);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r20.dataModel.data.special_designations);\n  }\n}\n\nfunction CreatePermitDrawMapComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, CreatePermitDrawMapComponent_div_24_div_1_Template, 6, 1, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.dataModel.showSpecialDesignations);\n  }\n}\n\nconst _c0 = [[[\"\", 8, \"elgin-map-slot\"]]];\nconst _c1 = [\".elgin-map-slot\"];\nexport let CreatePermitDrawMapComponent = /*#__PURE__*/(() => {\n  class CreatePermitDrawMapComponent extends WidgetComponentBase {\n    constructor(dialog, _elginService, _sessionStorageService, ngZone, _appRepoHelperService, _notificationService, _validationService, _serverApi) {\n      super(_serverApi, _validationService);\n      this.dialog = dialog;\n      this._elginService = _elginService;\n      this._sessionStorageService = _sessionStorageService;\n      this.ngZone = ngZone;\n      this._appRepoHelperService = _appRepoHelperService;\n      this._notificationService = _notificationService;\n      this._validationService = _validationService;\n      this._serverApi = _serverApi;\n      this.arrSpecialDesignationType = [];\n      this.arrSpecialDesignationPeriodicity = [];\n      this.ismultipleusrn = false;\n      this.usrnArray = [];\n      this.worksLocationDescriptionArray = [];\n      this.highwayAuthorityArray = [];\n      this.locationDetailsArray = [];\n      this.isChangeUSRN = false;\n      this.pos = {};\n      this.isgetgeocodecalled = 0;\n      this.ismulitusrnselect = true;\n    }\n\n    ngOnInit() {\n      this.configModel.CallerToComp.removeAllListeners();\n      this.configModel.CallerToComp.addListener(WidgetConstants.LOAD_DATA, event => {\n        this.onOverlayComplete(event.dataContext);\n      });\n      this.configModel.CallerToComp.addListener(WidgetConstants.RESET_TO_DEFAULT, event => {\n        this.reset();\n      });\n      this.wgOnInit();\n    }\n\n    setFieldData() {\n      this.arrSpecialDesignationType = this._appRepoHelperService.getMDataByDomain(MASTER_DATA_DOMAIN.SPECIAL_DESIGNATION_TYPE.toString());\n      this.arrSpecialDesignationPeriodicity = this._appRepoHelperService.getMDataByDomain(MASTER_DATA_DOMAIN.SPECIAL_DESIGNATION_PERIODICITY.toString());\n    }\n\n    getControlData() {}\n\n    setMode(responseDataModel) {}\n\n    onDrawingModeChanged(event) {\n      this.reset();\n    }\n\n    reset() {\n      this.dataModel.createPermitJSON = new CreatePermitJSONModel();\n      this.dataModel.data = new PermitDrawMapDetails();\n      this.isgetgeocodecalled = 0;\n      this.ismultipleusrn = false;\n      this.usrnArray.length = 0;\n      this.selectedUSRN = \"\";\n      this.isChangeUSRN = false;\n    }\n\n    onOverlayComplete(event) {\n      this.isgetgeocodecalled = 0;\n      let requestData = null;\n\n      switch (event.geometry.type) {\n        case ELGIN_MAP_GEOMETRY_TYPE.POLYGON:\n          this.dataModel.data = new PermitDrawMapDetails();\n          let coordinatesLatLng = event.geometry.coordinatesLatLng;\n          let display_point_lon = coordinatesLatLng[0].lng;\n          let display_point_lat = coordinatesLatLng[0].lat;\n          let start_point_lon = coordinatesLatLng[0].lng;\n          let start_point_lat = coordinatesLatLng[0].lat;\n          let line_coords;\n          let lineCoordsList = [];\n          coordinatesLatLng.forEach(element => {\n            lineCoordsList.push(element.lng);\n            lineCoordsList.push(element.lat);\n          });\n\n          if (lineCoordsList && lineCoordsList.length > 0) {\n            line_coords = lineCoordsList.toString();\n          }\n\n          requestData = {\n            \"display_point_lon\": display_point_lon,\n            \"display_point_lat\": display_point_lat,\n            \"start_point_lon\": start_point_lon,\n            \"start_point_lat\": start_point_lat,\n            \"geom_type\": ONE_NETWORK_GEOMETRY_TYPE.POLYGON,\n            \"line_coords\": line_coords\n          };\n          break;\n\n        case ELGIN_MAP_GEOMETRY_TYPE.MARKER:\n          this.dataModel.data = new PermitDrawMapDetails();\n          let coordinatesLatLngMarker = event.geometry.coordinatesLatLng;\n          let display_point_lonMarker = coordinatesLatLngMarker[1];\n          let display_point_latMarker = coordinatesLatLngMarker[0];\n          let start_point_lonMarker = coordinatesLatLngMarker[1];\n          let start_point_latMarker = coordinatesLatLngMarker[0];\n          let line_coordsMarker;\n          let lineCoordsListMarker = [];\n          coordinatesLatLngMarker.forEach(element => {\n            lineCoordsListMarker.push(element.lat);\n            lineCoordsListMarker.push(element.lng);\n          });\n\n          if (coordinatesLatLngMarker && coordinatesLatLngMarker.length > 0) {\n            line_coordsMarker = coordinatesLatLngMarker.join(',');\n          }\n\n          requestData = {\n            \"display_point_lon\": display_point_lonMarker,\n            \"display_point_lat\": display_point_latMarker,\n            \"start_point_lon\": start_point_lonMarker,\n            \"start_point_lat\": start_point_latMarker,\n            \"geom_type\": ONE_NETWORK_GEOMETRY_TYPE.MARKER,\n            \"line_coords\": line_coordsMarker\n          };\n          break;\n\n        case ELGIN_MAP_GEOMETRY_TYPE.POLYLINE:\n          this.dataModel.data = new PermitDrawMapDetails();\n          let pl_coordinatesLatLng = event.geometry.coordinatesLatLng;\n          let display_polyline_lon = pl_coordinatesLatLng[0].lng;\n          let display_polyline_lat = pl_coordinatesLatLng[0].lat;\n          let start_polyline_lon = pl_coordinatesLatLng[0].lng;\n          let start_polyline_lat = pl_coordinatesLatLng[0].lat;\n          let polyline_coords;\n          let polyline_lineCoordsList = [];\n          pl_coordinatesLatLng.forEach(element => {\n            polyline_lineCoordsList.push(element.lng);\n            polyline_lineCoordsList.push(element.lat);\n          });\n\n          if (polyline_lineCoordsList && polyline_lineCoordsList.length > 0) {\n            polyline_coords = polyline_lineCoordsList.toString();\n          }\n\n          requestData = {\n            \"display_point_lon\": display_polyline_lon,\n            \"display_point_lat\": display_polyline_lat,\n            \"start_point_lon\": start_polyline_lon,\n            \"start_point_lat\": start_polyline_lat,\n            \"geom_type\": ONE_NETWORK_GEOMETRY_TYPE.LINESTRING,\n            \"line_coords\": polyline_coords\n          };\n          break;\n      }\n\n      if (requestData) {\n        this.getReverseGeoCode(requestData, event.geometry.coordinatesLatLng);\n      } else {\n        console.log(\"empty requestData\");\n      }\n    }\n\n    getReverseGeoCode(requestData, cordinatesLatLong) {\n      this.isgetgeocodecalled++;\n\n      this._elginService.getElginToken().then(response => {\n        this._elginService.reverseGEOCode(requestData).then(response => {\n          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n\n          if (requestData.geom_type === ONE_NETWORK_GEOMETRY_TYPE.POLYGON) {\n            let arrUsrns;\n\n            if ((_a = response === null || response === void 0 ? void 0 : response.affected) === null || _a === void 0 ? void 0 : _a.usrns) {\n              arrUsrns = (_c = (_b = response === null || response === void 0 ? void 0 : response.affected) === null || _b === void 0 ? void 0 : _b.usrns) === null || _c === void 0 ? void 0 : _c.split(',');\n              let responseModel = this.convertData(response);\n              this.setValue(responseModel);\n            } else {\n              this.getNearestRoadbyPositionbyPolygon(cordinatesLatLong);\n            } // if (arrUsrns && arrUsrns.length == 1) {\n            //   this.getNSGDetailsByUsrn(response.affected.usrns);\n            // }\n            // let i=new UsrnListMOdel();\n\n\n            let street;\n\n            if ((_d = response === null || response === void 0 ? void 0 : response.affected) === null || _d === void 0 ? void 0 : _d.street_names) {\n              street = (_f = (_e = response === null || response === void 0 ? void 0 : response.affected) === null || _e === void 0 ? void 0 : _e.street_names) === null || _f === void 0 ? void 0 : _f.split(',');\n            }\n\n            if (arrUsrns) {\n              this.usrnArray = [];\n\n              if (arrUsrns.length > 1) {\n                arrUsrns.forEach((element, index) => {\n                  const seriesData = new UsrnListMOdel();\n                  seriesData.usrn = element;\n                  seriesData.usrnwithstreetname = element + \" - \" + street[index];\n                  this.usrnArray.push(seriesData);\n                }); // console.log(\"ussrn array\", this.usrnArray)\n\n                this.ismultipleusrn = true; // console.log(\"i\",i)\n                //data.data usrn check\n\n                let tempusrn;\n\n                if ((_g = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM)) === null || _g === void 0 ? void 0 : _g.usrn) {\n                  tempusrn = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).usrn;\n                }\n\n                this.usrnArray.forEach((element, index) => {\n                  if (element.usrn == tempusrn) {\n                    this.selectedUSRN = element.usrn;\n                    this.changeUSRN();\n                  }\n                }); // if yes checck usrnArray\n                //if yes then set this value to dropdown\n                //on change function call here\n                // this.configModel.CallerToComp.emit(WidgetConstants.RESET_TO_DEFAULT, null);\n                // this.dataModel.globalParameters.set(GLOBAL_PARAM_KEY.ELGIN_MAP, this.globalParameters.get(GLOBAL_PARAM_KEY.ELGIN_MAP));\n              } else if (arrUsrns.length == 1) {\n                this.ismultipleusrn = false;\n                this.dataModel.data.street_name = (_h = response === null || response === void 0 ? void 0 : response.affected) === null || _h === void 0 ? void 0 : _h.street_names;\n                this.dataModel.data.town = (_j = response === null || response === void 0 ? void 0 : response.affected) === null || _j === void 0 ? void 0 : _j.towns;\n                this.getNSGDetailsByUsrn(response.affected.usrns);\n              }\n            } else {\n              this.getNearestRoadbyPositionbyPolygon(cordinatesLatLong);\n            }\n          } else if (requestData.geom_type === ONE_NETWORK_GEOMETRY_TYPE.MARKER) {\n            let arrUsrns = (_l = (_k = response === null || response === void 0 ? void 0 : response.point) === null || _k === void 0 ? void 0 : _k.usrns) === null || _l === void 0 ? void 0 : _l.split(',');\n            let responseModel = this.convertDataForMarker(response);\n            this.setValue(responseModel);\n\n            if (arrUsrns) {\n              this.usrnArray = [];\n\n              if (arrUsrns.length > 1) {\n                arrUsrns.forEach(element => {\n                  this.usrnArray.push(element);\n                });\n                this.ismultipleusrn = true;\n              } else if (arrUsrns.length == 1) {\n                this.ismultipleusrn = false;\n                this.dataModel.data.street_name = (_m = response === null || response === void 0 ? void 0 : response.point) === null || _m === void 0 ? void 0 : _m.street_names;\n                this.dataModel.data.town = (_o = response === null || response === void 0 ? void 0 : response.point) === null || _o === void 0 ? void 0 : _o.towns;\n                this.getNSGDetailsByUsrn(response.point.usrns);\n              }\n            } else {\n              this.getNearestRoadbyPositionbyMarker(cordinatesLatLong);\n            } // if (arrUsrns && arrUsrns.length == 1) {\n            //   this.getNSGDetailsByUsrn(response.point.usrns);\n            // }\n\n          } else if (requestData.geom_type === ONE_NETWORK_GEOMETRY_TYPE.LINESTRING) {\n            let arrUsrns = (_q = (_p = response === null || response === void 0 ? void 0 : response.point) === null || _p === void 0 ? void 0 : _p.usrns) === null || _q === void 0 ? void 0 : _q.split(',');\n            let responseModel = this.convertData(response);\n            this.setValue(responseModel); // if (arrUsrns && arrUsrns.length == 1) {\n            //   this.dataModel.data.street_name = response?.affected?.street_names;\n            //   this.dataModel.data.town = response?.affected?.towns;\n            //   this.getNSGDetailsByUsrn(response.affected.usrns);\n            // }\n\n            if (arrUsrns) {\n              this.usrnArray = [];\n\n              if (arrUsrns.length > 1) {\n                arrUsrns.forEach(element => {\n                  this.usrnArray.push(element);\n                });\n                this.ismultipleusrn = true;\n              } else if (arrUsrns.length == 1) {\n                this.ismultipleusrn = false;\n                this.dataModel.data.street_name = (_r = response === null || response === void 0 ? void 0 : response.point) === null || _r === void 0 ? void 0 : _r.street_names;\n                this.dataModel.data.town = (_s = response === null || response === void 0 ? void 0 : response.point) === null || _s === void 0 ? void 0 : _s.towns;\n                this.getNSGDetailsByUsrn(response.point.usrns);\n              }\n            } else {\n              console.log(\"cordinatesLatLong for line\", cordinatesLatLong);\n              this.getNearestRoadbyPositionbyPolygon(cordinatesLatLong);\n            }\n          }\n        });\n      });\n    }\n\n    getNearestRoadbyPositionbyPolygon(reqdata) {\n      let requestData = null; //  reqdata=reqdata[0].lat+','+reqdata[0].lng;\n\n      let reqstring = \"\";\n      let tempstring = \"\";\n      reqdata.forEach(value => {\n        tempstring = value.lat + ',' + value.lng;\n        reqstring = reqstring + tempstring + '|';\n      });\n      reqstring = reqstring.slice(0, -1); // reqstring=\"51.6345707432773801,-0.4670303010506944\"\n\n      this._elginService.getNearestRoadbyPosition(reqstring).then(response => {\n        console.log('---------NSG Details By Postion Polygon-----------');\n        console.log(response);\n\n        if (typeof response.snappedPoints == 'undefined') {\n          this._notificationService.error(\"USRN Not Found.\");\n        } // let temparray=[\n        //   {lat:'',lng:''},\n        //   {lat:'',lng:''}\n        // ];\n\n\n        let coordinatesLatLngMarker = [];\n\n        if (response.snappedPoints) {\n          response.snappedPoints.forEach((value, index) => {\n            this.pos.lat = value.location.latitude;\n            this.pos.lng = value.location.longitude; // temparray[index].lat = value.location.latitude;\n            // temparray[index].lng = value.location.longitude;\n\n            coordinatesLatLngMarker.push(this.pos);\n          });\n          this.dataModel.data = new PermitDrawMapDetails(); // let display_point_lonMarker: any = coordinatesLatLngMarker[1];\n          // let display_point_latMarker: any = coordinatesLatLngMarker[0];\n          // let start_point_lonMarker: any = coordinatesLatLngMarker[1];\n          // let start_point_latMarker: any = coordinatesLatLngMarker[0];\n\n          let display_point_lon = coordinatesLatLngMarker[0].lng.toFixed(15);\n          let display_point_lat = coordinatesLatLngMarker[0].lat.toFixed(15);\n          let start_point_lon = coordinatesLatLngMarker[0].lng.toFixed(15);\n          let start_point_lat = coordinatesLatLngMarker[0].lat.toFixed(15);\n          let line_coords;\n          let lineCoordsList = [];\n          coordinatesLatLngMarker.forEach(element => {\n            lineCoordsList.push(element.lng.toFixed(15));\n            lineCoordsList.push(element.lat.toFixed(15));\n          });\n\n          if (lineCoordsList && lineCoordsList.length > 0) {\n            // line_coords = lineCoordsList.toString();\n            line_coords = coordinatesLatLngMarker[0].lat.toFixed(15) + ',' + coordinatesLatLngMarker[0].lng.toFixed(15);\n          }\n\n          requestData = {\n            \"display_point_lon\": display_point_lon,\n            \"display_point_lat\": display_point_lat,\n            \"start_point_lon\": start_point_lon,\n            \"start_point_lat\": start_point_lat,\n            \"geom_type\": ONE_NETWORK_GEOMETRY_TYPE.MARKER,\n            \"line_coords\": line_coords\n          };\n\n          if (requestData) {\n            if (this.isgetgeocodecalled < 3) this.getReverseGeoCode(requestData, coordinatesLatLngMarker);else this._notificationService.error(\"USRN Not Found.\");\n          }\n        }\n      });\n    }\n\n    getNearestRoadbyPositionbyMarker(reqdata) {\n      let requestData = null;\n      reqdata = reqdata.join();\n      console.log(\"reqdata in nearted road\", reqdata);\n\n      this._elginService.getNearestRoadbyPosition(reqdata).then(response => {\n        console.log('---------NSG Details By Postion-----------');\n        console.log(response);\n\n        if (typeof response.snappedPoints == 'undefined') {\n          this._notificationService.error(\"USRN Not Found.\");\n        }\n\n        let temparray = [];\n\n        if (response.snappedPoints) {\n          temparray[0] = response.snappedPoints[0].location.latitude;\n          temparray[1] = response.snappedPoints[0].location.longitude;\n          this.dataModel.data = new PermitDrawMapDetails();\n          let coordinatesLatLngMarker = temparray;\n          let display_point_lonMarker = coordinatesLatLngMarker[1];\n          let display_point_latMarker = coordinatesLatLngMarker[0];\n          let start_point_lonMarker = coordinatesLatLngMarker[1];\n          let start_point_latMarker = coordinatesLatLngMarker[0];\n          let line_coordsMarker;\n          let lineCoordsListMarker = [];\n          coordinatesLatLngMarker.forEach(element => {\n            lineCoordsListMarker.push(element.lng);\n            lineCoordsListMarker.push(element.lat);\n          });\n\n          if (coordinatesLatLngMarker && coordinatesLatLngMarker.length > 0) {\n            line_coordsMarker = coordinatesLatLngMarker.join(',');\n          }\n\n          requestData = {\n            \"display_point_lon\": display_point_lonMarker,\n            \"display_point_lat\": display_point_latMarker,\n            \"start_point_lon\": start_point_lonMarker,\n            \"start_point_lat\": start_point_latMarker,\n            \"geom_type\": ONE_NETWORK_GEOMETRY_TYPE.MARKER,\n            \"line_coords\": line_coordsMarker\n          };\n\n          if (requestData) {\n            if (this.isgetgeocodecalled < 4) this.getReverseGeoCode(requestData, temparray);else this._notificationService.error(\"USRN Not Found.\");\n          }\n        }\n      });\n    }\n\n    getNSGDetailsByUsrn(usrns) {\n      this.dataModel.data.road_category = null;\n\n      this._elginService.getNSGDetailsByUsrn(usrns).then(response => {\n        console.log('---------NSG Details By USRNS-----------');\n        console.log(response); // console.log(\"data model in ngg details\", this.dataModel.data)\n\n        if (response.road_category == 9) {\n          this.isprivaateroad = true;\n        } else {\n          this.isprivaateroad = false;\n        }\n\n        this.dataModel.data.usrn = usrns;\n        this.dataModel.data.traffic_sensitive = response.traffic_sensitive;\n        this.dataModel.data.special_designations = [];\n        response.special_designation_details.forEach(element => {\n          let designation = new DesignationsModel();\n          let existingDesignation = this.dataModel.data.special_designations.find(a => a.special_desig_description === element.special_desig_description); // if (!existingDesignation) {\n\n          if (element.special_desig_description != null) {\n            designation.description = element.special_desig_description;\n            this.arrSpecialDesignationType.forEach(designationType => {\n              if (designationType.key == element.street_special_desig_code) {\n                designation.code = designationType.displayText;\n              }\n            });\n\n            if (element.special_desig_start_time != null && element.special_desig_end_time != null && (element.special_desig_start_time != 0 || element.special_desig_end_time != 0)) {\n              // designation.startTime = this.converNumberToHHMM(element.special_desig_start_time.toString());\n              // designation.endTime = this.converNumberToHHMM(element.special_desig_end_time.toString());\n              designation.startTime = element.special_desig_start_time;\n              designation.endTime = element.special_desig_end_time;\n            }\n\n            this.arrSpecialDesignationPeriodicity.forEach(periodicity => {\n              // if (periodicity.key == element.special_desig_periodicity_code_string) {\n              //   designation.periodicityCode = periodicity.displayText;\n              // }\n              if (periodicity.key == element.special_desig_periodicity_code) {\n                designation.periodicityCode = periodicity.displayText;\n              }\n            });\n\n            if (designation.startTime != null && designation.endTime != null) {\n              designation.startTime = designation.startTime;\n              designation.endTime = designation.endTime;\n              designation.periodicityCode = `${designation.periodicityCode} (${designation.startTime} - ${designation.endTime})`;\n            }\n\n            element.isChecked = false;\n            let specialDesignation = Object.assign(Object.assign({}, designation), element);\n            this.dataModel.data.special_designations.push(specialDesignation);\n          } // }\n\n        });\n        this.markDesignationsChecked();\n        this.dataModel.createPermitJSON.nsgDetails = response;\n        this.dataModel.data.road_category = response.road_category;\n        this.dataModel.data.authority_swa_code = response.authority_swa_code;\n        this.dataModel.data.roadType = this._appRepoHelperService.getMDataDisplayTextByValue(response.road_category.toString()); // console.log(\"in by usrn data\", this.dataModel.data)\n\n        this.setValue(this.dataModel.data);\n      });\n    }\n\n    markDesignationsChecked() {\n      var _a, _b;\n\n      try {\n        if (((_a = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.ELGIN_MAP)) === null || _a === void 0 ? void 0 : _a.nsgDetails.special_designations) !== null) {\n          let specialDesignations = (_b = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.ELGIN_MAP)) === null || _b === void 0 ? void 0 : _b.nsgDetails.special_designations;\n\n          if (specialDesignations && specialDesignations.length > 0) {\n            this.dataModel.data.special_designations.forEach(pSpecialDesig => {\n              specialDesignations.forEach(cSpecialDesig => {\n                let pSpecialDesigForCompare = pSpecialDesig.description + ',' + pSpecialDesig.street_special_desig_code + ',' + pSpecialDesig.special_desig_location_text + ',' + pSpecialDesig.special_desig_start_time + pSpecialDesig.special_desig_end_time;\n                let cSpecialDesigForCompare = cSpecialDesig.special_desig_description + ',' + cSpecialDesig.street_special_desig_code + ',' + cSpecialDesig.special_desig_location_text + ',' + this.converNumberToHHMM(cSpecialDesig.special_desig_start_time + '') + this.converNumberToHHMM(cSpecialDesig.special_desig_end_time + '');\n\n                if (pSpecialDesigForCompare === cSpecialDesigForCompare) {\n                  pSpecialDesig.isChecked = cSpecialDesig.isChecked;\n                }\n              });\n            });\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    convertData(response) {\n      var _a, _b, _c;\n\n      console.log(\"convertdata response\", response);\n      let permitDrawMapDetails = new PermitDrawMapDetails();\n      this.dataModel.createPermitJSON.reverseGEOCode = response;\n      let details = response === null || response === void 0 ? void 0 : response.affected;\n\n      if (details) {\n        permitDrawMapDetails.postcode = details.postcodes;\n        permitDrawMapDetails.usrn = details.usrns;\n        console.log(\"details response\", details); // TODO: need to confirm\n\n        let streetarray = [];\n        let townsarray = [];\n        let arrstreet = (_a = details === null || details === void 0 ? void 0 : details.street_names) === null || _a === void 0 ? void 0 : _a.split(',');\n        let arrtowns = (_b = details === null || details === void 0 ? void 0 : details.towns) === null || _b === void 0 ? void 0 : _b.split(',');\n\n        if ((arrstreet === null || arrstreet === void 0 ? void 0 : arrstreet.length) == 1 && (arrtowns === null || arrtowns === void 0 ? void 0 : arrtowns.length) == 1) {\n          let workLocDetails = `${details.street_names ? details.street_names : ''} ${details.towns ? details.towns : ''}`;\n          permitDrawMapDetails.worksLocationDescription = this.dataModel.mode == FormModeConstant.EDIT ? this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription ? this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription : '' : workLocDetails; // let locationDetails = `${details.localities ? details.localities : ''} ${details.districts ? details.districts : ''}`\n          // permitDrawMapDetails.location_details = locationDetails;\n        } else if ((arrstreet === null || arrstreet === void 0 ? void 0 : arrstreet.length) > 1 || (arrtowns === null || arrtowns === void 0 ? void 0 : arrtowns.length) > 1) {\n          arrstreet.forEach((value, index) => {\n            streetarray.push(value);\n          });\n          arrtowns.forEach((value, index) => {\n            townsarray.push(value);\n          }); // console.log(\"arrstreet\", streetarray)\n          // console.log(\"arrtowns\", townsarray)\n\n          let temparry = [];\n          arrstreet.forEach((value, index) => {\n            console.log(\"value\", value);\n            console.log(\"townsarray[i]\", townsarray[index]);\n            let workLocDetails = `${value ? value : ''} ${townsarray[index] ? townsarray[index] : ''}`; // let temp = this.dataModel.mode == FormModeConstant.EDIT ? (this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription ? this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription : '') : workLocDetails;\n\n            this.worksLocationDescriptionArray.push(workLocDetails);\n          }); // let workLocDetails = `${details.street_names ? details.street_names : ''} ${details.towns ? details.towns : ''}`\n          // permitDrawMapDetails.worksLocationDescription = this.dataModel.mode == FormModeConstant.EDIT ? (this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription ? this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription : '') : workLocDetails;\n          // let locationDetails = `${details.localities ? details.localities : ''} ${details.districts ? details.districts : ''}`\n          // permitDrawMapDetails.location_details = locationDetails;\n        } // TODO: will map\n        //    this.dataModel.data.highway_authority_name=permitDrawMapDetails.highway_authority_name;\n        // this.dataModel.data.postcode=permitDrawMapDetails.postcode;\n        // this.dataModel.data.location_details=permitDrawMapDetails.location_details;\n\n\n        permitDrawMapDetails.roadType;\n        let locationDetails = `${details.localities ? details.localities : ''} ${details.districts ? details.districts : ''}`;\n        let locationdetails = locationDetails === null || locationDetails === void 0 ? void 0 : locationDetails.split(',');\n        if (locationdetails.length == 1) permitDrawMapDetails.location_details = locationDetails;else {\n          locationdetails.forEach((value, index) => {\n            // console.log(\"value of highway authority\",value)\n            this.locationDetailsArray.push(value);\n          });\n        }\n        let highwayAuthority = (_c = details === null || details === void 0 ? void 0 : details.lhas) === null || _c === void 0 ? void 0 : _c.split(',');\n        if (highwayAuthority.length == 1) permitDrawMapDetails.highway_authority_name = details === null || details === void 0 ? void 0 : details.lhas;else {\n          highwayAuthority.forEach((value, index) => {\n            this.highwayAuthorityArray.push(value);\n          });\n        }\n      }\n\n      this.dataModel.createPermitJSON.permitDrawMapDetails = permitDrawMapDetails;\n      return permitDrawMapDetails;\n    }\n\n    convertDataForMarker(response) {\n      let permitDrawMapDetails = new PermitDrawMapDetails();\n      this.dataModel.createPermitJSON.reverseGEOCode = response;\n      let details = response === null || response === void 0 ? void 0 : response.point;\n\n      if (details) {\n        permitDrawMapDetails.postcode = details.postcodes;\n        permitDrawMapDetails.usrn = details.usrns; // TODO: need to confirm\n\n        let workLocDetails = `${details.street_names ? details.street_names : ''} ${details.towns ? details.towns : ''}`;\n        permitDrawMapDetails.worksLocationDescription = this.dataModel.mode == FormModeConstant.EDIT ? this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription ? this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM).locationDescription : '' : workLocDetails;\n        let locationDetails = `${details.localities ? details.localities : ''} ${details.districts ? details.districts : ''}`;\n        permitDrawMapDetails.location_details = locationDetails; // TODO: will map\n\n        permitDrawMapDetails.roadType;\n        permitDrawMapDetails.highway_authority_name = details === null || details === void 0 ? void 0 : details.lhas;\n      }\n\n      this.dataModel.createPermitJSON.permitDrawMapDetails = permitDrawMapDetails;\n      return permitDrawMapDetails;\n    }\n\n    setValue(response) {\n      this.dataModel.data = new PermitDrawMapDetails();\n\n      if (response) {\n        this.dataModel.data = response;\n      }\n    }\n\n    validate() {\n      var _a, _b, _c;\n\n      if ((_a = this.dataModel.data) === null || _a === void 0 ? void 0 : _a.usrn) {\n        let arrUsrns = (_b = this.dataModel.data) === null || _b === void 0 ? void 0 : _b.usrn.split(',');\n\n        if (arrUsrns) {\n          if (arrUsrns.length == 1 || this.selectedUSRN) return true;else if (!this.selectedUSRN) {\n            this._notificationService.error(\"Please select single USRN.\");\n          }\n        }\n      } else if (!((_c = this.dataModel.data) === null || _c === void 0 ? void 0 : _c.usrn)) {\n        this._notificationService.error(\"Your selection does not contain USRN. Please select USRN.\");\n      } else {\n        this._notificationService.error(\"Your selection does not contain Road Category.\");\n      }\n\n      return false;\n    }\n\n    changeUSRN() {\n      this.getNSGDetailsByUsrn(this.selectedUSRN);\n      this.usrnArray.forEach((value, index) => {\n        if (value.usrn == this.selectedUSRN) {\n          this.worksLocationDescriptionbyUSRN = this.worksLocationDescriptionArray[index];\n          this.dataModel.data.worksLocationDescription = this.worksLocationDescriptionbyUSRN;\n\n          if (this.locationDetailsArray.length) {\n            this.locationDetailsbyUSRN = this.locationDetailsArray[index];\n            this.dataModel.data.location_details = this.locationDetailsbyUSRN;\n          }\n\n          if (this.highwayAuthorityArray.length) {\n            this.highywayAuthoritybyUSRN = this.highwayAuthorityArray[index];\n            this.dataModel.data.highway_authority_name = this.highywayAuthoritybyUSRN;\n          }\n        }\n      });\n      this.isChangeUSRN = true;\n      this.ismulitusrnselect = false;\n    }\n\n    showHideDetialsSection() {\n      if (this.ismultipleusrn || this.dataModel.data.usrn) return false;else return true;\n    }\n\n    converNumberToHHMM(time) {\n      let convertedTime = '';\n\n      if (time != '0') {\n        switch (time.toString().length) {\n          case 1:\n            convertedTime = \"00:0\" + time;\n            break;\n\n          case 2:\n            convertedTime = \"00:\" + time;\n            break;\n\n          case 3:\n            convertedTime = \"0\" + time.substring(0, 1) + \":\" + time.substring(1, 3);\n            break;\n\n          case 4:\n            convertedTime = time.substring(0, 2) + \":\" + time.substring(2, 4);\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        convertedTime = time;\n      }\n\n      return convertedTime;\n    }\n\n    getValue() {\n      const data = this.dataModel.data;\n      return data;\n    }\n\n    onDesignationCheckBoxChange(i, isChecked) {\n      this.dataModel.data.special_designations[i].isChecked = isChecked;\n    }\n\n    getHelpTextData(specialDesig) {\n      let helperInfo = specialDesig.helper_info;\n\n      if (specialDesig.helper_info != null) {\n        return helperInfo[0].helper_id;\n      }\n\n      return null;\n    }\n\n  }\n\n  CreatePermitDrawMapComponent.ɵfac = function CreatePermitDrawMapComponent_Factory(t) {\n    return new (t || CreatePermitDrawMapComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.ElginStartUpService), i0.ɵɵdirectiveInject(i3.SessionStorageService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i4.AppRepoHelperService), i0.ɵɵdirectiveInject(i5.NotificationService), i0.ɵɵdirectiveInject(i6.ValidationService), i0.ɵɵdirectiveInject(i7.ServerApiInterfaceServiceService));\n  };\n\n  CreatePermitDrawMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatePermitDrawMapComponent,\n    selectors: [[\"app-create-permit-draw-map\"]],\n    inputs: {\n      configModel: \"configModel\",\n      dataModel: \"dataModel\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 57,\n    vars: 15,\n    consts: [[\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-between start\", \"fxLayoutGap\", \"0\", 1, \"change-request-info\"], [\"fxFlex\", \"showHideDetialsSection()? '100' : '65'\", 1, \"left-side\"], [1, \"info-title\"], [1, \"map-wrapper\"], [\"fxFlex\", \"35\", 1, \"right-side\", 3, \"hidden\"], [1, \"info-div\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-between center\"], [\"class\", \"info-element\", \"fxFlex\", \"100\", 4, \"ngIf\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-between center\", 4, \"ngIf\"], [\"class\", \"info-element\", \"fxFlex\", \"50\", 4, \"ngIf\"], [\"class\", \"text-warning\", 4, \"ngIf\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"start center\", 1, \"selection-field\", 3, \"hidden\"], [\"fxLayout\", \"column\", \"fxLayoutAlign\", \"space-between stretch\"], [\"value\", \"1\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-between center\", 1, \"pin-div\"], [1, \"pin-title\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Click to drop Pin\", \"color\", \"warn\", 1, \"iconbutton\"], [\"value\", \"2\"], [\"value\", \"3\"], [\"fxFlex\", \"100\", 1, \"info-element\"], [\"appearance\", \"outline\", 1, \"mb-0\"], [3, \"ngModel\", \"ngModelChange\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"selectusrn\", 4, \"ngIf\"], [3, \"value\"], [1, \"selectusrn\"], [\"for\", \"\"], [\"fxFlex\", \"50\", 1, \"info-element\"], [1, \"text-warning\"], [1, \"designations-list\"], [1, \"list-group\"], [\"class\", \"list-group-item list-item-background\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", \"list-item-background\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"start start\", \"fxLayoutGap\", \"20px\", \"appHelperTextPopover\", \"\", 3, \"helperTextData\"], [3, \"checked\", \"change\"], [1, \"code\"], [1, \"description\"], [1, \"periodicity\"]],\n    template: function CreatePermitDrawMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelement(0, \"hr\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"h2\", 2);\n        i0.ɵɵtext(4, \"Create Drawing on the map\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵprojection(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵtemplate(10, CreatePermitDrawMapComponent_div_10_Template, 9, 3, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵtemplate(12, CreatePermitDrawMapComponent_div_12_Template, 5, 1, \"div\", 7);\n        i0.ɵɵtemplate(13, CreatePermitDrawMapComponent_div_13_Template, 5, 1, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, CreatePermitDrawMapComponent_div_14_Template, 6, 1, \"div\", 8);\n        i0.ɵɵtemplate(15, CreatePermitDrawMapComponent_div_15_Template, 6, 1, \"div\", 8);\n        i0.ɵɵelementStart(16, \"div\", 6);\n        i0.ɵɵtemplate(17, CreatePermitDrawMapComponent_div_17_Template, 5, 1, \"div\", 9);\n        i0.ɵɵtemplate(18, CreatePermitDrawMapComponent_div_18_Template, 5, 1, \"div\", 9);\n        i0.ɵɵtemplate(19, CreatePermitDrawMapComponent_div_19_Template, 5, 1, \"div\", 9);\n        i0.ɵɵtemplate(20, CreatePermitDrawMapComponent_div_20_Template, 5, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(21, CreatePermitDrawMapComponent_div_21_Template, 11, 2, \"div\", 8);\n        i0.ɵɵtemplate(22, CreatePermitDrawMapComponent_div_22_Template, 2, 0, \"div\", 10);\n        i0.ɵɵtemplate(23, CreatePermitDrawMapComponent_div_23_Template, 11, 2, \"div\", 8);\n        i0.ɵɵtemplate(24, CreatePermitDrawMapComponent_div_24_Template, 2, 1, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 11);\n        i0.ɵɵelementStart(26, \"mat-radio-group\", 12);\n        i0.ɵɵelementStart(27, \"mat-radio-button\", 13);\n        i0.ɵɵelementStart(28, \"div\", 14);\n        i0.ɵɵelementStart(29, \"div\", 15);\n        i0.ɵɵelementStart(30, \"h3\");\n        i0.ɵɵtext(31, \"Draw Polygon\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"p\");\n        i0.ɵɵtext(33, \"Select here and draw polygon on the map\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"button\", 16);\n        i0.ɵɵelementStart(35, \"mat-icon\");\n        i0.ɵɵtext(36, \"star_outline\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-radio-button\", 17);\n        i0.ɵɵelementStart(38, \"div\", 14);\n        i0.ɵɵelementStart(39, \"div\", 15);\n        i0.ɵɵelementStart(40, \"h3\");\n        i0.ɵɵtext(41, \"Draw Line\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"p\");\n        i0.ɵɵtext(43, \"Select here and draw Line on the map\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"button\", 16);\n        i0.ɵɵelementStart(45, \"mat-icon\");\n        i0.ɵɵtext(46, \"horizontal_rule\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"mat-radio-button\", 18);\n        i0.ɵɵelementStart(48, \"div\", 14);\n        i0.ɵɵelementStart(49, \"div\", 15);\n        i0.ɵɵelementStart(50, \"h3\");\n        i0.ɵɵtext(51, \"Drop Pin\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"p\");\n        i0.ɵɵtext(53, \"Select here and drop Pin on the map\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"button\", 16);\n        i0.ɵɵelementStart(55, \"mat-icon\");\n        i0.ɵɵtext(56, \"push_pin\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"hidden\", ctx.showHideDetialsSection());\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.ismultipleusrn);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.ismultipleusrn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.ismultipleusrn && ctx.isChangeUSRN);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.ismultipleusrn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.ismultipleusrn && ctx.isChangeUSRN);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.ismultipleusrn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.ismultipleusrn && ctx.isChangeUSRN);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.ismultipleusrn && ctx.isChangeUSRN);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.ismultipleusrn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.ismultipleusrn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isprivaateroad);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.ismultipleusrn && ctx.isChangeUSRN);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.dataModel.data == null ? null : ctx.dataModel.data.special_designations == null ? null : ctx.dataModel.data.special_designations.length) > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", true);\n      }\n    },\n    directives: [i8.DefaultLayoutDirective, i8.DefaultLayoutAlignDirective, i8.DefaultLayoutGapDirective, i8.DefaultFlexDirective, i9.NgIf, i10.MatRadioGroup, i10.MatRadioButton, i11.MatButton, i12.MatTooltip, i13.MatIcon, i14.MatFormField, i14.MatLabel, i15.MatSelect, i16.NgControlStatus, i16.NgModel, i9.NgForOf, i14.MatError, i17.MatOption, i18.MatCard, i19.HelperTextPopoverDirective, i20.MatCheckbox],\n    styles: [\".info-title[_ngcontent-%COMP%]{text-align:left;font:normal normal bold 1.3rem Noto Sans;letter-spacing:0px;color:#706f6f}.map-wrapper[_ngcontent-%COMP%]{height:500px;min-width:500px;border:1px solid var(--theme-color-border-light);border-radius:4px}.pin-div[_ngcontent-%COMP%]{background:#FFFFFF 0% 0% no-repeat padding-box;border:1px solid #2B5C4169;border-radius:5px;padding:10px}.pin-div[_ngcontent-%COMP%]   .pin-title[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{text-align:left;font:normal normal bold 1.2rem Noto Sans;letter-spacing:0px;color:#706f6f;text-transform:uppercase;margin:0;padding:0}.pin-div[_ngcontent-%COMP%]   .pin-title[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;padding:0;text-align:left;font:normal normal normal 1rem Noto Sans;letter-spacing:0px;color:#58576b}.designations-list[_ngcontent-%COMP%]{max-height:300px;overflow-y:auto}.code[_ngcontent-%COMP%]{font-weight:bold}.description[_ngcontent-%COMP%]{color:var(--text-highlighted-1)}.periodicity[_ngcontent-%COMP%]{color:var(--text-highlighted-2)}.list-item-background[_ngcontent-%COMP%]{background-color:#e6e6e6;padding:3px!important}.permit-form[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%]{margin-bottom:5px!important}.selectusrn[_ngcontent-%COMP%]{color:var(--warning-massage-color)}\"]\n  });\n  return CreatePermitDrawMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}