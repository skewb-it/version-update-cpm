{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notification.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./error.dialog.service\";\nexport let HttpErrorInterceptorService = /*#__PURE__*/(() => {\n  class HttpErrorInterceptorService {\n    constructor(_notificationService, _router, _errorDialogService) {\n      this._notificationService = _notificationService;\n      this._router = _router;\n      this._errorDialogService = _errorDialogService;\n    }\n\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        var _a, _b;\n\n        let apiErrorMessage = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.message;\n        let apiErrorStatus = (_b = error === null || error === void 0 ? void 0 : error.error) === null || _b === void 0 ? void 0 : _b.status; // TODO: send the error to remote logging infrastructure\n\n        switch (error.status) {\n          case 401:\n            // user is not autheticated, redirect to login page\n            this._notificationService.error('Un-Authorised');\n\n            this._router.navigate(['/']);\n\n            break;\n\n          case 403:\n            // No access to a resource, redirect to login or not authorized page\n            this._notificationService.error('No access to a resource');\n\n            break;\n\n          case 404:\n          case 400:\n            // // not found, display error to user\n            // this._notificationService.error('Resource not found');             \n            // this._notificationService.error(apiError);\n            this._errorDialogService.openDialog(apiErrorMessage, apiErrorStatus);\n\n            break;\n\n          case 500:\n            // not found, display error to user\n            this._notificationService.error('Internal server error');\n\n            break;\n\n          case 503:\n            // site under maintaince\n            this._notificationService.error(error.message);\n\n            break;\n\n          default:\n            // display error occured to user.              \n            this._notificationService.error(apiErrorMessage);\n\n            break;\n        }\n\n        if (error.error) {\n          if (error.error.code < 5000) {\n            this.handleGenericErrors(error.error.code);\n            return;\n          }\n\n          return throwError(error.error);\n        }\n      }));\n    }\n\n    handleGenericErrors(code) {\n      switch (code) {\n        case 3001:\n          this._notificationService.error('Data Mismatch');\n\n          break;\n\n        case 3002:\n          this._notificationService.error('Invalid Token');\n\n          break;\n\n        case 3003:\n          this._notificationService.error('UnAuthorised');\n\n          break;\n\n        case 3004:\n          this._notificationService.error('Invalid user');\n\n          break;\n\n        case 3006:\n          this._notificationService.error('Duplicate Data');\n\n          break;\n\n        case 3007:\n          this._notificationService.error('Data not available');\n\n          break;\n\n        default:\n          break;\n      }\n\n      this._notificationService.error('SYSTEM ERROR');\n    }\n\n  }\n\n  HttpErrorInterceptorService.ɵfac = function HttpErrorInterceptorService_Factory(t) {\n    return new (t || HttpErrorInterceptorService)(i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ErrorDialogService));\n  };\n\n  HttpErrorInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptorService,\n    factory: HttpErrorInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpErrorInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}