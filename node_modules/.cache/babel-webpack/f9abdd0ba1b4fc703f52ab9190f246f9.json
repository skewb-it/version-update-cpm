{"ast":null,"code":"import { LineChartConfigModel, LineChartDataModel } from 'src/app/modules/widget/charts/line-chart/line-chart.model';\nimport { StackedColumnChartConfigModel, StackedColumnChartDataModel } from 'src/app/modules/widget/charts/stacked-column-chart/stacked-column-chart.model';\nimport { WidgetPageBase } from 'src/app/utility/widget/widget-utility/widget-page-base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/server-api-interface-service.service\";\nimport * as i2 from \"src/app/services/event-action.service\";\nimport * as i3 from \"src/app/services/session-storage.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"ngx-spinner\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/flex-layout/extended\";\nimport * as i10 from \"../../../widget/charts/stacked-column-chart/stacked-column-chart.component\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/select\";\nimport * as i13 from \"@angular/material/core\";\nimport * as i14 from \"../../../widget/charts/line-chart/line-chart.component\";\n\nconst _c0 = function () {\n  return {\n    \"width\": \"100%\"\n  };\n};\n\nexport let PcpManagementDashboard2Component = /*#__PURE__*/(() => {\n  class PcpManagementDashboard2Component extends WidgetPageBase {\n    constructor(_serverApi, _eventActionServiceBase, _sessionStorageService, _router, _spinner) {\n      super(_serverApi, _eventActionServiceBase, _sessionStorageService, _router, _spinner);\n      this._serverApi = _serverApi;\n      this._eventActionServiceBase = _eventActionServiceBase;\n      this._sessionStorageService = _sessionStorageService;\n      this._router = _router;\n      this._spinner = _spinner;\n      this.stackedColumnChartDataModel = StackedColumnChartDataModel.getInstance();\n      this.stackedColumnChartConfigModel = StackedColumnChartConfigModel.getInstance();\n      this.lineChartDataModel = LineChartDataModel.getInstance();\n      this.lineChartConfigModel = LineChartConfigModel.getInstance();\n    }\n\n    ngOnInit() {\n      this.bindStackedColumnChartDataModel();\n      this.bindStackedColumnChartConfigModel();\n      this.bindLineChartDataModel();\n      this.bindLineChartConfigModel();\n    }\n\n    bindStackedColumnChartDataModel() {\n      this.stackedColumnChartDataModel.data = {\n        data: {\n          labels: [\"Status\", \"Finance\", \"Recharged Commercial\"],\n          datasets: [{\n            label: 'Outstanding',\n            data: [10, 10, 10],\n            backgroundColor: \"#3e6fb6\",\n            hoverBackgroundColor: '#3e6fb6'\n          }, {\n            label: 'Written off',\n            data: [23, 25, 19],\n            backgroundColor: \"#3e6fb6\",\n            hoverBackgroundColor: '#3e6fb6'\n          }, {\n            label: 'Challenged',\n            data: [19, 10],\n            backgroundColor: \"#3e6fb6\",\n            hoverBackgroundColor: '#3e6fb6'\n          }, {\n            label: 'Paid',\n            data: [25, 31, 19],\n            backgroundColor: \"#3e6fb6\",\n            hoverBackgroundColor: '#3e6fb6'\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          legend: {\n            display: false,\n            position: 'bottom'\n          },\n          scales: {\n            xAxes: [{\n              stacked: true,\n              barPercentage: 0.5,\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              gridLines: {\n                drawBorder: false\n              },\n              ticks: {\n                min: 0,\n                max: 100,\n                stepSize: 20\n              }\n            }]\n          },\n          tooltips: {\n            mode: 'index'\n          },\n          hover: {\n            animationDuration: 0\n          },\n          animation: {\n            duration: 1,\n            onComplete: function () {\n              var chartInstance = this.chart,\n                  ctx = chartInstance.ctx; // ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);\n\n              ctx.textAlign = 'center';\n              ctx.textBaseline = 'center';\n              ctx.fillStyle = '#ffffff';\n              ctx.fillSize = 1;\n              ctx.fontSize = 1;\n              this.data.datasets.forEach(function (dataset, i) {\n                var meta = chartInstance.controller.getDatasetMeta(i);\n                meta.data.forEach(function (bar, index) {\n                  var data = dataset.data[index];\n                  var label = dataset.label; // ctx.fillText(data, bar._model.x, bar._model.y + 12);\n\n                  ctx.fillText(label, bar._model.x, bar._model.y + 12);\n                });\n              });\n            }\n          }\n        }\n      };\n    }\n\n    bindStackedColumnChartConfigModel() {}\n\n    bindLineChartDataModel() {\n      this.lineChartDataModel.data = {\n        data: {\n          labels: [\"Month 1\", \"Month 2\", \"Month 3\", \"Month 4\", \"Month 5\", \"Month 6\", \"Month 7\", \"Month 8\"],\n          datasets: [{\n            label: \"Projected\",\n            data: [10, 19, 15, 35, 38, 21, 25, 8],\n            backgroundColor: \"#E85933\",\n            borderColor: \"#E85933\",\n            fill: false,\n            lineTension: 0,\n            radius: 1\n          }, {\n            label: \"Actual\",\n            data: [60, 35, 60, 35, 50, 45, 41, 20],\n            backgroundColor: \"#3E6FB6\",\n            borderColor: \"#3E6FB6\",\n            fill: false,\n            lineTension: 0,\n            radius: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          legend: {\n            display: true,\n            position: 'bottom'\n          },\n          scales: {\n            xAxes: [{\n              stacked: true,\n              barPercentage: 0.5,\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              stacked: true,\n              scaleLabel: {\n                display: true,\n                labelString: 'Cost'\n              },\n              gridLines: {\n                drawBorder: false\n              },\n              ticks: {\n                min: 0,\n                max: 100,\n                stepSize: 20\n              }\n            }]\n          },\n          tooltips: {\n            mode: 'index'\n          },\n          hover: {\n            animationDuration: 0\n          }\n        }\n      };\n    }\n\n    bindLineChartConfigModel() {}\n\n  }\n\n  PcpManagementDashboard2Component.ɵfac = function PcpManagementDashboard2Component_Factory(t) {\n    return new (t || PcpManagementDashboard2Component)(i0.ɵɵdirectiveInject(i1.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i2.EventActionService), i0.ɵɵdirectiveInject(i3.SessionStorageService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.NgxSpinnerService));\n  };\n\n  PcpManagementDashboard2Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PcpManagementDashboard2Component,\n    selectors: [[\"app-pcp-management-dashboard2\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 21,\n    vars: 8,\n    consts: [[1, \"dashboard-container\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"20px\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"start center\", \"fxLayoutGap\", \"20px\", 1, \"dashboard-row\", \"mb-5\"], [\"fxFlex\", \"50\", \"fxLayout\", \"column\", \"fxLayoutGap\", \"10px\", \"fxLayoutAlign\", \"space-between center\", 1, \"card-height\"], [1, \"chart-card-heading\"], [3, \"ngStyle\"], [3, \"dataModel\", \"configModel\"], [\"fxFlex\", \"50\", 1, \"card-height\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-between center\", 1, \"card-heading\"], [\"appearance\", \"outline\", 1, \"select-on-chart-card\"], [\"value\", \"WorkStream1\"], [\"value\", \"WorkStream2\"]],\n    template: function PcpManagementDashboard2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"mat-card\", 3);\n        i0.ɵɵelement(4, \"h4\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelement(6, \"app-stacked-column-chart\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-card\", 7);\n        i0.ɵɵelementStart(8, \"div\", 8);\n        i0.ɵɵelementStart(9, \"h4\", 4);\n        i0.ɵɵtext(10, \"Permit fines & Penalties | Projections Vs Actual\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(12, \"mat-label\");\n        i0.ɵɵtext(13, \"WorkStream\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-select\");\n        i0.ɵɵelementStart(15, \"mat-option\", 10);\n        i0.ɵɵtext(16, \"WorkStream 1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-option\", 11);\n        i0.ɵɵtext(18, \"WorkStream 2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 5);\n        i0.ɵɵelement(20, \"app-line-chart\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(6, _c0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataModel\", ctx.stackedColumnChartDataModel)(\"configModel\", ctx.stackedColumnChartConfigModel);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(7, _c0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataModel\", ctx.lineChartDataModel)(\"configModel\", ctx.lineChartConfigModel);\n      }\n    },\n    directives: [i6.DefaultLayoutDirective, i6.DefaultLayoutGapDirective, i6.DefaultLayoutAlignDirective, i7.MatCard, i6.DefaultFlexDirective, i8.NgStyle, i9.DefaultStyleDirective, i10.StackedColumnChartComponent, i11.MatFormField, i11.MatLabel, i12.MatSelect, i13.MatOption, i14.LineChartComponent],\n    styles: [\".dashboard-container[_ngcontent-%COMP%]{padding:15px 25px 50px;margin-top:2%}.dashboard-title[_ngcontent-%COMP%]{font-weight:bold;margin-bottom:20px}.card-height[_ngcontent-%COMP%]{height:400px}.chart-card-heading[_ngcontent-%COMP%]{color:#690096;font-weight:bold}.card-heading[_ngcontent-%COMP%]{margin-bottom:15px}\"]\n  });\n  return PcpManagementDashboard2Component;\n})();","map":null,"metadata":{},"sourceType":"module"}