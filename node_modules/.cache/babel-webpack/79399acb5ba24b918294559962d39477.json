{"ast":null,"code":"import { LOCALE_ID } from '@angular/core';\nimport { PRODUCT_SERVICES } from '../constants/app-repo.constants';\nimport { MASTER_DATA_DOMAIN, PERMIT_ACTIONS_CONFIG } from '../constants/db.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-repo.service\";\nexport let AppRepoHelperService = /*#__PURE__*/(() => {\n  class AppRepoHelperService {\n    constructor(_appRepoService, locale) {\n      this._appRepoService = _appRepoService;\n      this.locale = locale;\n    } // master data\n\n\n    getMDataByDomain(categoryCode) {\n      return this._appRepoService.appRepo.masterDataByDomain.get(categoryCode);\n    }\n\n    getMDataByKey(key) {\n      return this._appRepoService.appRepo.masterDataByKey.get(key);\n    }\n\n    getMDataByValue(value) {\n      return this._appRepoService.appRepo.masterDataByValue.get(value);\n    }\n\n    getMDataByName(list, name) {\n      return list.find(d => d.name.indexOf(name) > 0);\n    }\n\n    getMDataDisplayTextByValue(value) {\n      let masterData = this._appRepoService.appRepo.masterDataByValue.get(value);\n\n      return masterData === null || masterData === void 0 ? void 0 : masterData.displayText;\n    } // navigation\n\n\n    setNavigationData(key, value) {\n      this._appRepoService.appRepo.navigationData.set(key, value);\n    }\n\n    getNavigationData(key) {\n      return this._appRepoService.appRepo.navigationData.get(key);\n    }\n\n    getUserAccessibleWorkStream() {\n      return this._appRepoService.appRepo.masterDataByDomain.get(MASTER_DATA_DOMAIN.USER_ACCESS_WROK_STREAM);\n    }\n\n    getUserAccessibleContractors() {\n      return this._appRepoService.appRepo.masterDataByDomain.get(MASTER_DATA_DOMAIN.USER_ACCESS_CONTRACTOR);\n    }\n\n    getWorkIdentifiersByOrg(orgId, worksteamId) {\n      let arrWorkIdentifiers = this._appRepoService.appRepo.masterDataByDomain.get(MASTER_DATA_DOMAIN.WORK_IDENTIFIER.toString()); // let userInfo: any = this._appRepoService.appRepo.masterDataByKey.get(MASTER_DATA.USER_INFO);\n\n\n      if (arrWorkIdentifiers && arrWorkIdentifiers.length == 0) return [];\n      let filteredWorkIdentifiers = arrWorkIdentifiers.filter(d => {\n        return d.orgId == orgId && d.worksteamId == worksteamId;\n      });\n      return filteredWorkIdentifiers;\n    }\n\n    hasPermitActionPermission(actionName, actions) {\n      let appProductCode = this._appRepoService.appRepo.appProductCode;\n      let flag = this.productCodePermission(actionName, appProductCode);\n\n      if (flag == false) {\n        return false;\n      } else {\n        if (actions && actions.length > 0 && !([PERMIT_ACTIONS_CONFIG.ADD_NEW_COMMENT, PERMIT_ACTIONS_CONFIG.ADD_REINSTATEMENT].indexOf(actionName) + 1 && actionName)) {\n          return actions.indexOf(actionName === null || actionName === void 0 ? void 0 : actionName.toString()) >= 0;\n        } else {\n          return true;\n        }\n      }\n    }\n\n    productCodePermission(actionName, appProductCode) {\n      switch (appProductCode) {\n        case PRODUCT_SERVICES.PERMIT_MANAGER_PRODUCT_CODE:\n        case PRODUCT_SERVICES.START_STOP_REGISTER_MANAGER_PRODUCT_CODE:\n          switch (actionName) {\n            case [PERMIT_ACTIONS_CONFIG.CREATE_PERMIT, PERMIT_ACTIONS_CONFIG.EDIT_PERMIT, PERMIT_ACTIONS_CONFIG.DELETE_PERMIT, PERMIT_ACTIONS_CONFIG.DELETE_REINSTATEMENT, PERMIT_ACTIONS_CONFIG.EDIT_REINSTATEMENT, PERMIT_ACTIONS_CONFIG.ADD_REINSTATEMENT, PERMIT_ACTIONS_CONFIG.ADD_NEW_COMMENT, PERMIT_ACTIONS_CONFIG.UPLOAD, PERMIT_ACTIONS_CONFIG.REVERT_START, PERMIT_ACTIONS_CONFIG.REVERT_STOP, PERMIT_ACTIONS_CONFIG.START, PERMIT_ACTIONS_CONFIG.STOP].indexOf(actionName) + 1 && actionName:\n              return false;\n\n            default:\n              return null;\n          }\n\n          break;\n\n        default:\n          return null;\n      }\n    }\n\n    getGlobalPersistantData(key) {\n      return this._appRepoService.appRepo.appGlobalPersistantData.get(key);\n    }\n\n    setGlobalPersistantData(key, value) {\n      return this._appRepoService.appRepo.appGlobalPersistantData.set(key, value);\n    }\n\n  }\n\n  AppRepoHelperService.ɵfac = function AppRepoHelperService_Factory(t) {\n    return new (t || AppRepoHelperService)(i0.ɵɵinject(i1.AppRepoService), i0.ɵɵinject(LOCALE_ID));\n  };\n\n  AppRepoHelperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppRepoHelperService,\n    factory: AppRepoHelperService.ɵfac,\n    providedIn: 'root'\n  });\n  return AppRepoHelperService;\n})();","map":null,"metadata":{},"sourceType":"module"}