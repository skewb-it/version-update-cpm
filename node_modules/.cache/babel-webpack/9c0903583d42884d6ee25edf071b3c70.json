{"ast":null,"code":"import { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/server-api-interface-service.service\";\nimport * as i2 from \"src/app/services/validation.service\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@angular/material/core\";\n\nfunction AddCommentComponent_form_0_mat_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const topic_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", topic_r2.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(topic_r2.viewValue);\n  }\n}\n\nfunction AddCommentComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 1);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Topic\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 3);\n    i0.ɵɵtemplate(5, AddCommentComponent_form_0_mat_option_5_Template, 2, 2, \"mat-option\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-error\");\n    i0.ɵɵtext(7, \"Field must be valid\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(9, \"mat-label\");\n    i0.ɵɵtext(10, \"Content\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"textarea\", 5);\n    i0.ɵɵelementStart(12, \"mat-error\");\n    i0.ɵɵtext(13, \"Field must be valid\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 6);\n    i0.ɵɵelementStart(15, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AddCommentComponent_form_0_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onAddCommentButtonClick();\n    });\n    i0.ɵɵtext(16, \"Add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.wgFormGroup);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.arrTopics);\n  }\n}\n\nexport let AddCommentComponent = /*#__PURE__*/(() => {\n  class AddCommentComponent extends WidgetComponentBase {\n    constructor(_serverApi, _validationService, _ngxSpinnerService, fb) {\n      super(_serverApi, _validationService);\n      this._serverApi = _serverApi;\n      this._validationService = _validationService;\n      this._ngxSpinnerService = _ngxSpinnerService;\n      this.fb = fb;\n      this.arrTopics = [{\n        value: \"GENERAL\",\n        viewValue: \"General\"\n      }, {\n        value: \"SECTION_74\",\n        viewValue: \"Section 74\"\n      }, {\n        value: \"INSPECTION\",\n        viewValue: \"Inspection\"\n      }, {\n        value: \"FPN\",\n        viewValue: \"FPN\"\n      }, {\n        value: \"OVERRUN\",\n        viewValue: \"Overrun\"\n      }, {\n        value: \"FORWARD_PLAN\",\n        viewValue: \"Forward Plan\"\n      }, {\n        value: \"CHANGE_REQUEST\",\n        viewValue: \"Change Request\"\n      }, {\n        value: \"IMPOSED_VARIATION\",\n        viewValue: \"Imposed Variation\"\n      }, {\n        value: \"DURATION_CHALLENGE\",\n        viewValue: \"Duration Challenge\"\n      }, {\n        value: \"SECTION_81\",\n        viewValue: \"Section 81\"\n      }];\n      this.errorMsg = \"\";\n    }\n\n    ngOnInit() {\n      this.createFormGroup();\n    }\n\n    createFormGroup() {\n      this.wgFormGroup = this.fb.group({\n        'topic': ['', [Validators.required]],\n        'content': ['', [Validators.required]]\n      });\n    }\n\n    setFieldData() {}\n\n    getControlData() {}\n\n    convertData(response) {}\n\n    setMode(responseDataModel) {}\n\n    setValue(responseDataModel) {}\n\n    onAddCommentButtonClick() {\n      this.wgFormGroup.markAllAsTouched();\n\n      if (this.wgFormGroup.valid) {\n        let data = {\n          \"content\": this.wgFormGroup.controls.content.value,\n          \"topic\": this.wgFormGroup.controls.topic.value,\n          \"type\": \"EXTERNAL\"\n        };\n        let applicationId = this.dataModel.globalParameters.get('applicationId');\n\n        this._ngxSpinnerService.show();\n\n        this._serverApi.post(`/api/v1/applications/${applicationId}/comments`, data).subscribe(response => {\n          try {\n            if (response && response.applicationId) {\n              this.wgReset();\n              this.wgFormGroup.markAsUntouched();\n              this.emitEvent('onCommentAdded');\n\n              this._ngxSpinnerService.hide();\n            }\n          } catch (e) {\n            this._ngxSpinnerService.hide();\n          }\n        }, error => {\n          this._ngxSpinnerService.hide();\n\n          console.log('Comment add error :');\n        });\n      }\n    }\n\n  }\n\n  AddCommentComponent.ɵfac = function AddCommentComponent_Factory(t) {\n    return new (t || AddCommentComponent)(i0.ɵɵdirectiveInject(i1.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i2.ValidationService), i0.ɵɵdirectiveInject(i3.NgxSpinnerService), i0.ɵɵdirectiveInject(i4.FormBuilder));\n  };\n\n  AddCommentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddCommentComponent,\n    selectors: [[\"app-add-comment\"]],\n    inputs: {\n      dataModel: \"dataModel\",\n      configModel: \"configModel\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"fxLayout\", \"column\", 3, \"formGroup\", 4, \"ngIf\"], [\"fxLayout\", \"column\", 3, \"formGroup\"], [\"appearance\", \"outline\", \"fxFlex\", \"100\"], [\"required\", \"\", \"formControlName\", \"topic\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"required\", \"\", \"matInput\", \"\", \"placeholder\", \"Enter content\", \"autocomplete\", \"off\", \"formControlName\", \"content\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"end center\"], [\"type\", \"button\", \"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"primary-button\", \"mb-2\", 3, \"click\"], [3, \"value\"]],\n    template: function AddCommentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AddCommentComponent_form_0_Template, 17, 2, \"form\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.wgFormGroup);\n      }\n    },\n    directives: [i5.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i6.DefaultLayoutDirective, i4.FormGroupDirective, i7.MatFormField, i6.DefaultFlexDirective, i7.MatLabel, i8.MatSelect, i4.RequiredValidator, i4.NgControlStatus, i4.FormControlName, i5.NgForOf, i7.MatError, i9.MatInput, i4.DefaultValueAccessor, i6.DefaultLayoutAlignDirective, i10.MatButton, i11.MatOption],\n    styles: [\"\"]\n  });\n  return AddCommentComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}