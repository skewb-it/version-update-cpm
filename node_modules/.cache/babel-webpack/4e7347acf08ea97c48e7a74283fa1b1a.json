{"ast":null,"code":"import { PERMIT_WORK_STATUS } from '../constants/app-repo.constants';\nexport let DataHelper = /*#__PURE__*/(() => {\n  class DataHelper {\n    static booleanToUserText(value) {\n      return value ? \"Yes\" : \"No\";\n    }\n\n    static removeExtensionFromName(value) {\n      if (value) {\n        return value.split('.').slice(0, -1).join('.');\n      }\n\n      return null;\n    }\n\n    static getFileExetension(value) {\n      if (value) {\n        return value.split('.').pop();\n      }\n\n      return null;\n    }\n\n    static isImage(value) {\n      let imageextenstions = [\"jpg\", \"jpeg\", \"bmp\", \"gif\", \"png\"];\n\n      if (value) {\n        return imageextenstions.indexOf(value) > -1;\n      }\n\n      return false;\n    }\n\n    static getPermitIconURL(value) {\n      let icon;\n\n      switch (value) {\n        case 1:\n          icon = \"red\";\n          break;\n\n        case 2:\n          icon = \"yellow\";\n          break;\n\n        case 3:\n          icon = \"green\";\n          break;\n\n        default:\n          icon = \"gray\";\n          break;\n      }\n\n      return `assets/images/flags/${icon}.png`;\n    }\n\n    static getWorkStatusClass(value) {\n      let cssClass;\n\n      switch (value) {\n        case PERMIT_WORK_STATUS.PENDING:\n          cssClass = \"status-label-pending\";\n          break;\n\n        case PERMIT_WORK_STATUS.GRANTED:\n          cssClass = \"status-label-granted\";\n          break;\n\n        case PERMIT_WORK_STATUS.REFUSED:\n          cssClass = \"status-label-refused\";\n          break;\n\n        default:\n          cssClass = \"mb-0\";\n          break;\n      }\n\n      return cssClass;\n    }\n\n    static findProp(obj, prop, defval) {\n      if (typeof defval == 'undefined') defval = null;\n      prop = prop.split('.');\n\n      for (var i = 0; i < prop.length; i++) {\n        if (typeof obj[prop[i]] == 'undefined') return defval;\n        obj = obj[prop[i]];\n      }\n\n      return obj;\n    }\n\n    static FormatSize(x) {\n      let l = 0,\n          n = parseInt(x, 10) || 0;\n\n      while (n >= 1024 && ++l) {\n        n = n / 1024;\n      }\n\n      return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + DataHelper.units[l];\n    }\n\n  }\n\n  DataHelper.units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  return DataHelper;\n})();","map":null,"metadata":{},"sourceType":"module"}