{"ast":null,"code":"import { WidgetConstants } from 'src/app/constants/widget-constants';\nexport class WidgetComponentBase {\n  constructor(_baseServerApiBase, _baseValidationServiceBase) {\n    this._baseServerApiBase = _baseServerApiBase;\n    this._baseValidationServiceBase = _baseValidationServiceBase;\n    this.tempPermission = true;\n  }\n\n  wgOnInit() {\n    this.configModel.CallerToComp.addListener(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA, () => {\n      this.wgRefreshData();\n    });\n    this.wgSetRequestData();\n    this.wgPrepareFieldData().then(() => {\n      // this.wgAttachValidation();\n      if (this.dataModel.isSelfDataLoad) {\n        this.wgRefreshData();\n      }\n    });\n    this.wgSetFormDataFromGlobalParams();\n  }\n\n  wgRefreshData() {\n    this.wgSetRequestData();\n    this.wgSetFormDataFromGlobalParams();\n    this.wgGetControlData().then(response => {\n      let responseDataModel = this.convertData(response);\n      this.setMode(responseDataModel);\n      this.wgSetModeFromGlobalParameter(); // this.wgCreateForm(responseDataModel);\n\n      this.setValue(responseDataModel);\n    });\n  }\n\n  wgAttachValidation(responseDataModel) {// if (this._baseValidationServiceBase) {\n    //   this.wgFormGroup = this._baseValidationServiceBase.createFormGroup(this.dataModel.validators);\n    // }\n  }\n\n  validate() {\n    this.isSubmitted = true;\n\n    if (this.formComponent) {\n      this.formComponent.onSubmit(null);\n    }\n\n    return this.wgFormGroup.valid;\n  }\n\n  wgSetModeFromGlobalParameter() {\n    var _a, _b;\n\n    if ((_b = (_a = this.dataModel) === null || _a === void 0 ? void 0 : _a.globalParameters) === null || _b === void 0 ? void 0 : _b.get(\"mode\")) {\n      this.dataModel.mode = this.dataModel.globalParameters.get(\"mode\");\n    }\n  } // for get request\n\n\n  wgSetRequestData() {// if (this.dataModel.isGlobalParams) {\n    //   this.dataModel.globalParamterKeys.forEach(item => {\n    //     this.dataModel.apireqdata[item] = this.dataModel.globalParameters.get(item) ? this.dataModel.globalParameters.get(item) : null;\n    //   })\n    // }\n  } // for submit/save request\n\n\n  wgSetFormDataFromGlobalParams() {// if (this.dataModel.isGlobalParams && this.wgFormData) {\n    //   this.dataModel.globalParamterKeys.forEach(item => {\n    //     this.wgFormData[item] = this.dataModel.globalParameters.get(item);\n    //   })\n    // }\n  }\n\n  wgGetControlData() {\n    return this.getControlData();\n  }\n\n  wgAPIMethodGet(apiDataUrl, requestParam) {\n    this.wgOnRequest();\n    return new Promise((resolve, reject) => {\n      this._baseServerApiBase.get(apiDataUrl, requestParam).subscribe(response => {\n        this.wgOnRequestCompleted();\n\n        try {\n          if (response) {\n            resolve(response);\n          }\n        } catch (e) {}\n      }, error => {\n        this.wgOnRequestCompleted();\n        reject();\n      });\n    });\n  }\n\n  wgAPIMethodPut(apiDataUrl, requestData) {\n    this.wgOnRequest();\n    return new Promise((resolve, reject) => {\n      this._baseServerApiBase.put(apiDataUrl, requestData).subscribe(response => {\n        this.wgOnRequestCompleted();\n\n        try {\n          if (response) {\n            resolve(response);\n          }\n        } catch (e) {}\n      }, error => {\n        this.wgOnRequestCompleted();\n        reject();\n      });\n    });\n  }\n\n  wgAPIMethodPost(apiDataUrl, requestData) {\n    this.wgOnRequest();\n    return new Promise((resolve, reject) => {\n      this._baseServerApiBase.post(apiDataUrl, requestData).subscribe(response => {\n        this.wgOnRequestCompleted();\n\n        try {\n          if (response) {\n            resolve(response);\n          }\n        } catch (e) {}\n      }, error => {\n        this.wgOnRequestCompleted();\n        reject();\n      });\n    });\n  }\n\n  wgAPIMethodDelete(apiDataUrl, requestData) {\n    this.wgOnRequest();\n    return new Promise((resolve, reject) => {\n      this._baseServerApiBase.delete(apiDataUrl, requestData).subscribe(response => {\n        this.wgOnRequestCompleted();\n\n        try {\n          if (response) {\n            resolve(response);\n          }\n        } catch (e) {}\n      }, error => {\n        this.wgOnRequestCompleted();\n        reject();\n      });\n    });\n  }\n\n  wgPrepareFieldData() {\n    let isResolved = this.setFieldData();\n    return Promise.all([isResolved]);\n  }\n\n  get wgFC() {\n    return this.wgFormGroup.controls;\n  }\n\n  get fg() {\n    return this.wgFormGroup;\n  }\n\n  wgOnRequest() {\n    this.configModel.CompToCaller.emit(WidgetConstants.ON_REQUEST, null);\n  }\n\n  wgOnRequestCompleted() {\n    this.configModel.CompToCaller.emit(WidgetConstants.ON_REQUEST_COMPLETED, null);\n  }\n\n  wgDisableControl() {\n    Object.keys(this.wgFC).forEach(key => {\n      this.wgFC[key].disable();\n    });\n  }\n\n  wgEnabledControl() {\n    Object.keys(this.wgFC).forEach(key => {\n      this.wgFC[key].enable();\n    });\n  }\n\n  wgReset() {\n    if (this.formComponent) {\n      this.formComponent.resetForm();\n    }\n\n    this.isSubmitted = false;\n    this.wgFormGroup.reset();\n  }\n\n  emitEvent(actionName, data) {\n    let eventDataObj = Object();\n    eventDataObj.dataContext = data;\n\n    if (this.configModel.EventAction.has(actionName)) {\n      this.configModel.CompToCaller.emit(actionName, eventDataObj);\n    }\n  }\n\n  wgGetControlValue(formFieldNAme, defaultValue = null) {\n    const value = this.wgFormGroup.controls[formFieldNAme].value;\n    return value ? value : defaultValue;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}