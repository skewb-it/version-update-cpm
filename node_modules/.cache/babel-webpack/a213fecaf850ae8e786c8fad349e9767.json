{"ast":null,"code":"import { ELGIN_MAP_GEOMETRY_TYPE, PERMIT_GEOMETRY_TYPE } from 'src/app/constants/app-repo.constants';\nexport class ElginMapUtility {\n  static addDrawingManger(dataModel) {\n    const drawingManager = new google.maps.drawing.DrawingManager({\n      drawingMode: dataModel.drawingManager.drawingMode,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: google.maps.ControlPosition.BOTTOM_LEFT,\n        drawingModes: [google.maps.drawing.OverlayType.MARKER, // google.maps.drawing.OverlayType.CIRCLE,\n        google.maps.drawing.OverlayType.POLYGON, google.maps.drawing.OverlayType.POLYLINE // google.maps.drawing.OverlayType.RECTANGLE,\n        ]\n      },\n      circleOptions: {\n        editable: true\n      },\n      polygonOptions: {\n        editable: true\n      }\n    });\n    drawingManager.setMap(window.Elgin.map);\n    return drawingManager;\n  }\n\n  static addDrawingListener(drawingManager) {\n    google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {\n      if (event.type == 'polygon') {\n        let path = event.overlay.getPath();\n\n        if (path) {\n          ElginMapUtility.getPolygonCoordinates(path);\n        }\n      }\n    });\n  } // TODO: to be updated further\n\n\n  static getPolygonCoordinates(path) {\n    if (path && path.i) {\n      alert(JSON.stringify(path));\n      path.i.forEach(element => {\n        console.log('lat->', element.lat());\n        console.log('lng->', element.lng());\n      });\n    }\n  } // TODO: to be updated further\n\n\n  static addPolygons() {\n    const map = window.Elgin.map;\n    map.setZoom(14);\n    map.setCenter({\n      lat: 53.78468,\n      lng: -1.58233\n    });\n    const blueCoords = [{\n      lat: 53.78468,\n      lng: -1.58233\n    }, {\n      lat: 53.78658,\n      lng: -1.58344\n    }, {\n      lat: 53.78868,\n      lng: -1.58255\n    }];\n    const redCoords = [{\n      \"lat\": 53.792519865111586,\n      \"lng\": -1.5692412217101737\n    }, {\n      \"lat\": 53.77933549902776,\n      \"lng\": -1.573704417510955\n    }, {\n      \"lat\": 53.7769010091516,\n      \"lng\": -1.54761188821408\n    }]; // Construct a draggable red triangle with geodesic set to true.\n\n    new google.maps.Polygon({\n      map,\n      paths: redCoords,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.35,\n      draggable: true,\n      geodesic: true\n    }); // Construct a draggable blue triangle with geodesic set to false.\n\n    new google.maps.Polygon({\n      map,\n      paths: blueCoords,\n      strokeColor: \"#FFAF00\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FF00F0\",\n      fillOpacity: 0.35,\n      draggable: true,\n      geodesic: false\n    });\n  }\n\n  static addPolygon(data) {\n    const map = window.Elgin.map; // Construct a draggable red triangle with geodesic set to true.\n\n    return new google.maps.Polygon({\n      map,\n      paths: data.coordinates,\n      fillColor: \"#adaeaf\",\n      editable: data.editable\n    });\n  }\n\n  static addPolyline(data) {\n    const map = window.Elgin.map; // Construct a draggable red triangle with geodesic set to true.\n\n    return new google.maps.Polyline({\n      map,\n      path: data.coordinates\n    });\n  }\n\n  static addMarker(data) {\n    const map = window.Elgin.map; // Construct a draggable red triangle with geodesic set to true.\n\n    return new google.maps.Marker({\n      map,\n      position: data.coordinates\n    });\n  } // { lat: 53.78468, lng: -1.58233 }\n\n\n  static setCenter(center, zoom) {\n    const map = window.Elgin.map;\n    let newZoom = zoom ? zoom : 18;\n    map.setZoom(newZoom);\n    map.setCenter(center);\n  }\n\n  static convertToLatLong(lat, lang) {\n    let osgb = new GT_OSGB();\n    osgb.setGridCoordinates(lat, lang); //convert to a wgs84 coordinate\n\n    let wgs84 = osgb.getWGS84();\n    return {\n      lat: wgs84.latitude,\n      lng: wgs84.longitude\n    };\n  }\n\n  static convertCoordinatesToLatLong(cordinateNorthingsEastings) {\n    let coordinatesLatLongs = [];\n    let coordinates = cordinateNorthingsEastings ? cordinateNorthingsEastings[0] : null;\n\n    if (coordinates) {\n      for (let i = 0; i < coordinates.length; i++) {\n        let coordinatesLatLong = ElginMapUtility.convertToLatLong(coordinates[i][0], coordinates[i][1]);\n        coordinatesLatLongs.push(coordinatesLatLong);\n      }\n    }\n\n    return coordinatesLatLongs;\n  }\n\n  static convertCoordinatesToLatLongForPloyline(cordinateNorthingsEastings) {\n    let coordinatesLatLongs = [];\n    let coordinates = cordinateNorthingsEastings ? cordinateNorthingsEastings : null;\n\n    if (coordinates) {\n      for (let i = 0; i < coordinates.length; i++) {\n        let coordinatesLatLong = ElginMapUtility.convertToLatLong(coordinates[i][0], coordinates[i][1]);\n        coordinatesLatLongs.push(coordinatesLatLong);\n      }\n    }\n\n    return coordinatesLatLongs;\n  }\n\n  static convertCoordinatesToLatLongForMarker(cordinateNorthingsEastings) {\n    let coordinatesLatLongs = [];\n    let coordinates = cordinateNorthingsEastings;\n\n    if (coordinates) {\n      let coordinatesLatLong = ElginMapUtility.convertToLatLong(cordinateNorthingsEastings[0], cordinateNorthingsEastings[1]);\n      coordinatesLatLongs.push(coordinatesLatLong.lat);\n      coordinatesLatLongs.push(coordinatesLatLong.lng);\n    }\n\n    return coordinatesLatLongs;\n  }\n\n  static convertLatLngToEastingsNorthings(lat, lng) {\n    let wgs84 = new GT_WGS84();\n    wgs84.setDegrees(lat, lng); //(<Lattitude>,<Longitude>)\n\n    let osgb = wgs84.getOSGB(); //osgb.eastings, osgb.northings\n    //console.log('---------osgb-------', element.lat(), element.lng(), osgb)\n\n    return osgb;\n  }\n\n  static getGeometryType(type) {\n    switch (type) {\n      case \"Polygon\":\n        return ELGIN_MAP_GEOMETRY_TYPE.POLYGON;\n\n      case \"Point\":\n        return ELGIN_MAP_GEOMETRY_TYPE.MARKER;\n\n      case \"LineString\":\n        return ELGIN_MAP_GEOMETRY_TYPE.POLYLINE;\n\n      default:\n        null;\n    }\n  }\n\n  static getGeometryTypeForRequest(type) {\n    switch (type) {\n      case \"polygon\":\n        return PERMIT_GEOMETRY_TYPE.POLYGON;\n\n      case \"marker\":\n        return PERMIT_GEOMETRY_TYPE.MARKER;\n\n      case \"polyline\":\n        return PERMIT_GEOMETRY_TYPE.POLYLINE;\n\n      default:\n        null;\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}