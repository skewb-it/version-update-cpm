{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { GLOBAL_PARAM_KEY } from 'src/app/app-constants';\nimport { ElginMapAddModeCenterCordinates, ElginMapAddModeZoom } from './elginmap-model';\nimport { ElginMapUtility } from './elginmap-utility';\nimport { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport { FormModeConstant } from 'src/app/constants/widget-constants';\nimport { ELGIN_MAP_GEOMETRY_TYPE } from 'src/app/constants/app-repo.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/script.service\";\nimport * as i2 from \"src/app/services/server-api-interface-service.service\";\nimport * as i3 from \"src/app/services/session-storage.service\";\nimport * as i4 from \"src/app/services/elgin-start-up.service\";\nimport * as i5 from \"src/app/services/validation.service\";\nimport * as i6 from \"src/app/services/app-repo-helper.service\";\nexport let ElginmapComponent = /*#__PURE__*/(() => {\n  class ElginmapComponent extends WidgetComponentBase {\n    constructor(_scriptService, _serverApi, _sessionStorageService, _elginSessionStorage, _validationService, _appRepoHelperService, ngZone) {\n      super(_serverApi, _validationService);\n      this._scriptService = _scriptService;\n      this._serverApi = _serverApi;\n      this._sessionStorageService = _sessionStorageService;\n      this._elginSessionStorage = _elginSessionStorage;\n      this._validationService = _validationService;\n      this._appRepoHelperService = _appRepoHelperService;\n      this.ngZone = ngZone;\n      this.overlayCompleteEventEmitter = new EventEmitter();\n      this.elgin = window.Elgin;\n    }\n\n    ngOnInit() {\n      this.dataModel.optionConfig.system.callback = this.mapLoaded;\n      ElginmapComponent.instance = this;\n      this.wgOnInit();\n    }\n\n    ngAfterViewInit() {\n      window.Streetwork = {};\n      window.Streetwork.ElginMapComponent = this;\n      this.loadMap();\n    }\n\n    setFieldData() {}\n\n    getControlData() {\n      return new Promise((resolve, reject) => {\n        let data = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.ELGIN_MAP);\n\n        if (data) {\n          ElginmapComponent.instance.dataModel.geometry = data.geometry;\n          resolve(data);\n        }\n\n        reject();\n      });\n    }\n\n    convertData(response) {}\n\n    setMode(responseDataModel) {}\n\n    setValue(responseDataModel) {}\n\n    loadMap() {\n      setTimeout(() => {\n        this.elgin.loader.load(ElginmapComponent.instance.dataModel.optionConfig);\n      }, 2000);\n    }\n\n    mapLoaded() {\n      ElginmapComponent.instance = window.Streetwork.ElginMapComponent;\n\n      for (var i = 0; i < ElginmapComponent.instance.dataModel.shapes.length; i++) {\n        ElginmapComponent.instance.dataModel.shapes[i].overlay.setMap(null);\n      }\n\n      let drawingManager = null;\n      ElginmapComponent.instance.dataModel.shapes = [];\n\n      switch (ElginmapComponent.instance.dataModel.mode) {\n        case FormModeConstant.ADD:\n          drawingManager = ElginMapUtility.addDrawingManger(ElginmapComponent.instance.dataModel);\n          ElginmapComponent.addDrawingListener(drawingManager, ElginmapComponent.instance.dataModel.geometry.type); // add polygon\n\n          if (ElginmapComponent.instance.dataModel.geometry.center == null) {\n            ElginmapComponent.instance.dataModel.geometry.center = ElginMapAddModeCenterCordinates;\n            ElginmapComponent.instance.dataModel.geometry.zoom = ElginMapAddModeZoom;\n          }\n\n          ElginmapComponent.instance.setCenter(ElginmapComponent.instance.dataModel.geometry.center, ElginmapComponent.instance.dataModel.geometry.zoom);\n\n          if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.POLYGON) {\n            ElginmapComponent.instance.addPolygon(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng, drawingManager);\n          } else if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.MARKER) {\n            ElginmapComponent.instance.addMarker(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng, drawingManager);\n          } else if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.POLYLINE) {\n            ElginmapComponent.instance.addPolyline(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng, drawingManager);\n          }\n\n          break;\n\n        case FormModeConstant.EDIT:\n          drawingManager = ElginMapUtility.addDrawingManger(ElginmapComponent.instance.dataModel);\n          ElginmapComponent.addDrawingListener(drawingManager, ElginmapComponent.instance.dataModel.geometry.type); // add polygon\n\n          ElginmapComponent.instance.setCenter(ElginmapComponent.instance.dataModel.geometry.center, ElginmapComponent.instance.dataModel.geometry.zoom);\n\n          if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.POLYGON) {\n            ElginmapComponent.instance.addPolygon(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng, drawingManager);\n          } else if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.MARKER) {\n            ElginmapComponent.instance.addMarker(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng, drawingManager);\n          } else if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.POLYLINE) {\n            ElginmapComponent.instance.addPolyline(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng, drawingManager);\n          }\n\n          break;\n\n        case FormModeConstant.VIEW:\n          ElginmapComponent.instance.setCenter(ElginmapComponent.instance.dataModel.geometry.center, ElginmapComponent.instance.dataModel.geometry.zoom);\n\n          if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.POLYGON) {\n            ElginmapComponent.instance.addPolygon(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng);\n          } else if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.MARKER) {\n            ElginmapComponent.instance.addMarker(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng);\n          } else if (ElginmapComponent.instance.dataModel.geometry.type === ELGIN_MAP_GEOMETRY_TYPE.POLYLINE) {\n            ElginmapComponent.instance.addPolyline(ElginmapComponent.instance.dataModel.geometry.coordinatesLatLng);\n          }\n\n      }\n    }\n\n    addPolygon(coordinates, drawingManager) {\n      let shape = new Object();\n      let data = new Object();\n      data.coordinates = coordinates;\n      data.editable = this.dataModel.mode == FormModeConstant.EDIT || this.dataModel.mode == FormModeConstant.ADD;\n      shape.type = ELGIN_MAP_GEOMETRY_TYPE.POLYGON;\n      shape.overlay = ElginMapUtility.addPolygon(data);\n      ElginmapComponent.instance.dataModel.shapes.push(shape);\n\n      if (drawingManager && drawingManager.getDrawingMode()) {\n        drawingManager.setDrawingMode(null);\n      }\n\n      ElginmapComponent.instance.addEditPolygonListener(ElginmapComponent.instance.dataModel.shapes[0]);\n      let eventData = new Object();\n      eventData.geometry = this.dataModel.geometry;\n      eventData.event = event;\n      ElginmapComponent.instance.ngZone.run(() => {\n        ElginmapComponent.instance.emitEvent('overlayComplete', eventData);\n      }); //this.onOverlayComplete(ElginmapComponent.instance.dataModel.shapes[0]);\n    }\n\n    addPolyline(coordinates, drawingManager) {\n      let shape = new Object();\n      let data = new Object();\n      data.coordinates = coordinates;\n      data.editable = this.dataModel.mode == FormModeConstant.EDIT || this.dataModel.mode == FormModeConstant.ADD;\n      shape.type = ELGIN_MAP_GEOMETRY_TYPE.POLYLINE;\n      shape.overlay = ElginMapUtility.addPolyline(data);\n      ElginmapComponent.instance.dataModel.shapes.push(shape);\n\n      if (drawingManager && drawingManager.getDrawingMode()) {\n        drawingManager.setDrawingMode(null);\n      }\n\n      ElginmapComponent.instance.addEditPolylineListener(ElginmapComponent.instance.dataModel.shapes[0]);\n      let eventData = new Object();\n      eventData.geometry = this.dataModel.geometry;\n      eventData.event = event;\n      ElginmapComponent.instance.ngZone.run(() => {\n        ElginmapComponent.instance.emitEvent('overlayComplete', eventData);\n      });\n    }\n\n    addMarker(coordinates, drawingManager) {\n      let shape = new Object();\n      let data = new Object();\n      data.coordinates = {\n        lat: coordinates[0],\n        lng: coordinates[1]\n      };\n      data.editable = this.dataModel.mode == FormModeConstant.EDIT || this.dataModel.mode == FormModeConstant.ADD;\n      shape.type = ELGIN_MAP_GEOMETRY_TYPE.MARKER;\n      shape.overlay = ElginMapUtility.addMarker(data);\n      ElginmapComponent.instance.dataModel.shapes.push(shape);\n\n      if (drawingManager && drawingManager.getDrawingMode()) {\n        drawingManager.setDrawingMode(null);\n      }\n\n      ElginmapComponent.instance.addEditMarkerListener(ElginmapComponent.instance.dataModel.shapes[0]);\n      let eventData = new Object();\n      eventData.geometry = this.dataModel.geometry;\n      eventData.event = event;\n      ElginmapComponent.instance.ngZone.run(() => {\n        ElginmapComponent.instance.emitEvent('overlayComplete', eventData);\n      }); //this.onOverlayComplete(ElginmapComponent.instance.dataModel.shapes[0]);\n    }\n\n    setCenter(center, zoom) {\n      //coordinate\n      if (center) {\n        ElginMapUtility.setCenter(center, zoom);\n      }\n    }\n\n    static addDrawingListener(drawingManager, geometryType) {\n      google.maps.event.addListener(drawingManager, 'overlaycomplete', event => {\n        //ElginmapComponent.instance.overlayCompleteEventEmitter.emit(event);\n        let newShape = event; // newShape.type = event.type;\n\n        ElginmapComponent.instance.dataModel.shapes.push(newShape);\n        ElginmapComponent.instance.onOverlayComplete(event);\n\n        if (drawingManager.getDrawingMode()) {\n          drawingManager.setDrawingMode(null);\n        }\n\n        if (geometryType === ELGIN_MAP_GEOMETRY_TYPE.POLYGON) {\n          ElginmapComponent.instance.addEditPolygonListener(event);\n        } else if (geometryType === ELGIN_MAP_GEOMETRY_TYPE.POLYLINE) {\n          ElginmapComponent.instance.addEditPolylineListener(event);\n        } else {\n          ElginmapComponent.instance.addEditMarkerListener(event);\n        }\n      }); // add a listener for the drawing mode change event, delete any existing polygons\n\n      google.maps.event.addListener(drawingManager, \"drawingmode_changed\", function () {\n        if (drawingManager.getDrawingMode() != null) {\n          for (var i = 0; i < ElginmapComponent.instance.dataModel.shapes.length; i++) {\n            ElginmapComponent.instance.dataModel.shapes[i].overlay.setMap(null);\n          }\n\n          ElginmapComponent.instance.dataModel.shapes = [];\n          ElginmapComponent.instance.ngZone.run(() => {\n            ElginmapComponent.instance.emitEvent('drawingmodeChanged', null);\n          });\n        }\n      });\n    }\n\n    addEditPolygonListener(event) {\n      google.maps.event.addListener(event.overlay.getPath(), \"insert_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n      google.maps.event.addListener(event.overlay.getPath(), \"remove_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n      google.maps.event.addListener(event.overlay.getPath(), \"set_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n    }\n\n    addEditPolylineListener(event) {\n      google.maps.event.addListener(event.overlay.getPath(), \"insert_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n      google.maps.event.addListener(event.overlay.getPath(), \"remove_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n      google.maps.event.addListener(event.overlay.getPath(), \"set_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n    }\n\n    addEditMarkerListener(event) {\n      google.maps.event.addListener(event.overlay, \"insert_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n      google.maps.event.addListener(event.overlay, \"remove_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n      google.maps.event.addListener(event.overlay, \"set_at\", () => {\n        ElginmapComponent.instance.getPath();\n      });\n    }\n\n    getPath() {\n      //ElginmapComponent.instance.emitEvent('overlayComplete', ElginmapComponent.instance.dataModel.shapes[0]);\n      ElginmapComponent.instance.onOverlayComplete(ElginmapComponent.instance.dataModel.shapes[0]);\n    }\n\n    onOverlayComplete(event) {\n      // let cordinateLatLng = new Map<number, number>();\n      let cordinateLatLng = [];\n      let cordinateNorthingsEastings = new Map();\n\n      switch (event.type) {\n        case ELGIN_MAP_GEOMETRY_TYPE.POLYGON:\n          let path = event.overlay.getPath();\n\n          for (let i = 0; i < path.getLength(); i++) {\n            let temp = {};\n            const cordinate = path.getAt(i);\n            temp.lat = cordinate.lat();\n            temp.lng = cordinate.lng();\n            cordinateLatLng.push(temp);\n            let osgb = ElginMapUtility.convertLatLngToEastingsNorthings(cordinate.lat(), cordinate.lng());\n            cordinateNorthingsEastings.set(osgb.eastings, osgb.northings);\n          } // let cordinateLatLng = JSON.parse(JSON.stringify(path.i))\n\n\n          let lineCoordsList = []; // path.i.forEach(element => {\n          //   let osgb = ElginMapUtility.convertLatLngToEastingsNorthings(element.lat(), element.lng());\n          //   cordinateNorthingsEastings.set(osgb.eastings, osgb.northings);\n          // });\n\n          this.dataModel.geometry = {\n            cordinateNorthingsEastings: JSON.parse(JSON.stringify([[...cordinateNorthingsEastings]])),\n            coordinatesLatLng: cordinateLatLng,\n            type: ELGIN_MAP_GEOMETRY_TYPE.POLYGON,\n            zoom: event.overlay.zoom,\n            center: cordinateLatLng[0]\n          };\n          break;\n\n        case ELGIN_MAP_GEOMETRY_TYPE.MARKER:\n          let cordinateLatLngMarker = [event.overlay.position.lat(), event.overlay.position.lng()];\n          let osgb = ElginMapUtility.convertLatLngToEastingsNorthings(event.overlay.position.lat(), event.overlay.position.lng());\n          let cordinateNorthingsEastingsMarker = [osgb.eastings, osgb.northings];\n          this.dataModel.geometry = {\n            cordinateNorthingsEastings: cordinateNorthingsEastingsMarker,\n            coordinatesLatLng: cordinateLatLngMarker,\n            type: ELGIN_MAP_GEOMETRY_TYPE.MARKER,\n            zoom: event.overlay.zoom,\n            center: {\n              lat: cordinateLatLngMarker[0],\n              lng: cordinateLatLngMarker[1]\n            }\n          };\n          break;\n\n        case ELGIN_MAP_GEOMETRY_TYPE.POLYLINE:\n          let cordinateNorthingsEasting = [];\n          let linepath = event.overlay.getPath();\n\n          for (let i = 0; i < linepath.getLength(); i++) {\n            let temp = {};\n            const cordinate = linepath.getAt(i);\n            temp.lat = cordinate.lat();\n            temp.lng = cordinate.lng();\n            cordinateLatLng.push(temp);\n            let osgb = ElginMapUtility.convertLatLngToEastingsNorthings(cordinate.lat(), cordinate.lng());\n            cordinateNorthingsEastings.set(osgb.eastings, osgb.northings);\n          }\n\n          this.dataModel.geometry = {\n            cordinateNorthingsEastings: JSON.parse(JSON.stringify([...cordinateNorthingsEastings])),\n            coordinatesLatLng: cordinateLatLng,\n            type: ELGIN_MAP_GEOMETRY_TYPE.POLYLINE,\n            zoom: event.overlay.zoom,\n            center: cordinateLatLng[0]\n          };\n          break;\n      }\n\n      let eventData = new Object();\n      eventData.geometry = this.dataModel.geometry;\n      eventData.event = event;\n      ElginmapComponent.instance.ngZone.run(() => {\n        ElginmapComponent.instance.emitEvent('overlayComplete', eventData);\n      });\n    }\n\n    getValue() {\n      const data = this.dataModel.geometry;\n      return data;\n    }\n\n  }\n\n  ElginmapComponent.ɵfac = function ElginmapComponent_Factory(t) {\n    return new (t || ElginmapComponent)(i0.ɵɵdirectiveInject(i1.ScriptService), i0.ɵɵdirectiveInject(i2.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i3.SessionStorageService), i0.ɵɵdirectiveInject(i4.ElginStartUpService), i0.ɵɵdirectiveInject(i5.ValidationService), i0.ɵɵdirectiveInject(i6.AppRepoHelperService), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  ElginmapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ElginmapComponent,\n    selectors: [[\"app-elginmap\"]],\n    inputs: {\n      dataModel: \"dataModel\",\n      configModel: \"configModel\"\n    },\n    outputs: {\n      overlayCompleteEventEmitter: \"overlayCompleteEventEmitter\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"erw-container\", 1, \"ElginRoadworksWidget\"]],\n    template: function ElginmapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    styles: [\"p[_ngcontent-%COMP%]{font-size:larger}body[_ngcontent-%COMP%]{margin:20px;font-family:arial}#erw-container[_ngcontent-%COMP%]{background-color:#0029ff36;border:solid black 3px}#on-map[_ngcontent-%COMP%]{position:relative;width:600px!important;height:200px!important}.ons-map-container[_ngcontent-%COMP%]{width:200px!important;height:200px!important}\"]\n  });\n  return ElginmapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}