{"ast":null,"code":"import { GLOBAL_PARAM_KEY } from 'src/app/app-constants';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { VERSION } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/server-api-interface-service.service\";\nimport * as i2 from \"src/app/services/app-repo-helper.service\";\nimport * as i3 from \"src/app/services/validation.service\";\nimport * as i4 from \"src/app/services/save-file.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/dialog\";\nimport * as i7 from \"src/app/directive/invalid-control-scroll/invalid-control-scroll.directive\";\nimport * as i8 from \"@angular/flex-layout/flex\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"../chip-list-email-input/chip-list-email-input.component\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/cdk/text-field\";\nexport function emailArrayValidator() {\n  return control => {\n    let isPassed = true;\n\n    if (Array.isArray(control.value)) {\n      for (const email of control.value) {\n        const innerControl = new FormControl(email, Validators.email);\n\n        if (innerControl.errors && innerControl.errors.email) {\n          isPassed = false;\n          break;\n        }\n      }\n    } else {\n      isPassed = false;\n    }\n\n    return isPassed ? null : {\n      emailArray: true\n    };\n  };\n}\nexport function requiredArrayValidator() {\n  return control => {\n    const isPassed = Array.isArray(control.value) && control.value.length > 0;\n    return isPassed ? null : {\n      required: true\n    };\n  };\n}\nexport let EmailInvoiceForm2Component = /*#__PURE__*/(() => {\n  class EmailInvoiceForm2Component extends WidgetComponentBase {\n    constructor(_serverApi, _appRepoHelperService, _validationService, _saveFileService, fb, dialog) {\n      super(_serverApi, _validationService);\n      this._serverApi = _serverApi;\n      this._appRepoHelperService = _appRepoHelperService;\n      this._validationService = _validationService;\n      this._saveFileService = _saveFileService;\n      this.fb = fb;\n      this.dialog = dialog;\n      this.version = VERSION.full;\n      this.emailFormControl = new FormControl([], [requiredArrayValidator(), emailArrayValidator()]);\n      this.separatorKeysCodes = [ENTER, COMMA];\n      this.oldForm = new FormGroup({\n        email: new FormControl([], Validators.required),\n        emailHelper: new FormControl(null, Validators.email)\n      });\n    }\n\n    addEmailAddress(event) {\n      const formControl = this.oldForm.get('email');\n      const helperForm = this.oldForm.get('emailHelper');\n      const input = event.input;\n      const value = (event.value || '').trim();\n      helperForm.updateValueAndValidity();\n\n      if (helperForm.valid) {\n        if (value) {\n          formControl.setValue([...formControl.value, value]);\n        }\n\n        formControl.updateValueAndValidity();\n\n        if (input) {\n          input.value = '';\n        }\n      } else {\n        formControl.setErrors({\n          email: true\n        });\n      }\n    }\n\n    removeEmailAddress(selectedEmail) {\n      const formControl = this.oldForm.get('email');\n      const value = formControl.value.filter(email => email !== selectedEmail);\n      formControl.setValue(value);\n      formControl.updateValueAndValidity();\n    }\n\n    ngOnInit() {\n      super.wgOnInit(); // this.rulesForm = this.fb.group({\n      //   emails: this.fb.array(\n      //     [],\n      //     [this.validateArrayNotEmpty, this.validateEmailPattern]\n      //   ),\n      // });\n    }\n\n    setFieldData() {}\n\n    stopPropagation(event) {\n      event.stopPropagation();\n    }\n\n    setMode(responseDataModel) {}\n\n    setValue(responseDataModel) {}\n\n    getControlData() {\n      // let id = this.dataModel.globalParameters.get('applicationId');\n      // // INFO: ServerAPI\n      // let url = `/api/v1/applications/${id}`\n      // return this.wgAPIMethodGet(url, null);\n      return new Promise((resolve, reject) => {\n        let permitform = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.VIEW_PERMIT_FORM);\n        permitform = permitform ? permitform : new Object();\n\n        if (permitform) {\n          resolve(permitform);\n        } else {\n          reject(permitform);\n        }\n      });\n    }\n\n    convertData(response) {}\n\n    getValue() {\n      if (this.emailFormControl.valid) {\n        return this.emailFormControl.value;\n      }\n    }\n\n    resetForm() {\n      this.emailFormControl.reset();\n    }\n\n  }\n\n  EmailInvoiceForm2Component.ɵfac = function EmailInvoiceForm2Component_Factory(t) {\n    return new (t || EmailInvoiceForm2Component)(i0.ɵɵdirectiveInject(i1.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i2.AppRepoHelperService), i0.ɵɵdirectiveInject(i3.ValidationService), i0.ɵɵdirectiveInject(i4.SaveFileService), i0.ɵɵdirectiveInject(i5.FormBuilder), i0.ɵɵdirectiveInject(i6.MatDialog));\n  };\n\n  EmailInvoiceForm2Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EmailInvoiceForm2Component,\n    selectors: [[\"app-email-invoice-form2\"]],\n    inputs: {\n      dataModel: \"dataModel\",\n      configModel: \"configModel\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 19,\n    vars: 2,\n    consts: [[1, \"d-flex\", \"flex-column\"], [1, \"form-group\"], [\"form\", \"\", \"id\", \"filter-form\", \"appInvalidControlScroll\", \"\", 1, \"d-flex\", \"flex-column\", \"p-3\", 3, \"formGroup\"], [\"fxFlex\", \"100\", \"fxLayoutGap\", \"10px\", 1, \"fixed-underline\"], [\"appearance\", \"fill\", \"fxFlex\", \"100\"], [\"placeholder\", \"Add emails here\", \"required\", \"\", 3, \"formControl\"], [\"matInput\", \"\", \"cdkTextareaAutosize\", \"\", \"cdkAutosizeMinRows\", \"12\", \"cdkAutosizeMaxRows\", \"12\", \"value\", \"\\n  Dear User,\\n\\n  Please review attached defect charges that need to be accepted.\\n\\n  Please respond to this email within five working days. If not, these charges will be deemed as accepted.\\n\\n  Regards,\\n\\n  Street Works Admin\", \"readonly\", \"\"], [\"autosize\", \"cdkTextareaAutosize\"], [\"fxFlex\", \"100\", \"fxLayoutGap\", \"10px\", 1, \"file-container\", \"p-3\"], [1, \"charge-item\", \"m-2\"], [1, \"charge-name\", \"p-3\"], [1, \"charge-item\"]],\n    template: function EmailInvoiceForm2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"form\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"mat-form-field\", 4);\n        i0.ɵɵelement(5, \"app-chip-list-email-input\", 5);\n        i0.ɵɵelementStart(6, \"mat-error\");\n        i0.ɵɵtext(7, \" Enter a valid email! \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 3);\n        i0.ɵɵelementStart(9, \"mat-form-field\", 4);\n        i0.ɵɵelement(10, \"textarea\", 6, 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 8);\n        i0.ɵɵelementStart(13, \"div\", 9);\n        i0.ɵɵelementStart(14, \"p\", 10);\n        i0.ɵɵtext(15, \"ChargeList-4 Charges.xlsl\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 11);\n        i0.ɵɵelementStart(17, \"p\", 10);\n        i0.ɵɵtext(18, \"ChargeList-4 Charges.xlsl\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.emailFormControl);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.emailFormControl);\n      }\n    },\n    directives: [i5.ɵNgNoValidate, i5.NgControlStatusGroup, i7.InvalidControlScrollDirective, i5.FormGroupDirective, i8.DefaultFlexDirective, i8.DefaultLayoutGapDirective, i9.MatFormField, i10.ChipListEmailInputComponent, i5.RequiredValidator, i5.NgControlStatus, i5.FormControlDirective, i9.MatError, i11.MatInput, i12.CdkTextareaAutosize],\n    styles: [\".example-chip-list[_ngcontent-%COMP%]{width:100%}.warn[_ngcontent-%COMP%]{background:red;opacity:.7}.file-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:flex-start;align-items:center}.charge-item[_ngcontent-%COMP%]{border:1px solid #1995e7;border-radius:1rem;width:100%;height:60px;color:#1995e7;display:flex;align-items:center}\"]\n  });\n  return EmailInvoiceForm2Component;\n})();","map":null,"metadata":{},"sourceType":"module"}