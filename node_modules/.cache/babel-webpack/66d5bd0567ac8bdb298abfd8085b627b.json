{"ast":null,"code":"import { NAVIGATION_DATA, SESSION_STORAGE_DATA_KEY } from '../app-constants';\nimport { environment } from 'src/environments/environment';\nimport { MASTER_DATA } from '../constants/db.constants';\nimport { GLOBAL_PERSISTANT_DATA } from '../constants/app-repo.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nimport * as i2 from \"./session-storage.service\";\nimport * as i3 from \"./app-repo-helper.service\";\nimport * as i4 from \"./app-repo.service\";\nexport let AppHttpInterceptorService = /*#__PURE__*/(() => {\n  class AppHttpInterceptorService {\n    constructor(_localStorageService, _sessionStorageService, _appRepoHelperService, _appRepoService) {\n      this._localStorageService = _localStorageService;\n      this._sessionStorageService = _sessionStorageService;\n      this._appRepoHelperService = _appRepoHelperService;\n      this._appRepoService = _appRepoService;\n      this.clientid = \"\";\n      this.workflowtype = \"\";\n      this.sessiontoken = \"\";\n    }\n\n    intercept(req, next) {\n      let headers = req.headers;\n\n      if (req.url.includes(environment.baseurl)) {\n        headers = headers.set('ProductCode', this._appRepoService.appRepo.appProductCode);\n      }\n\n      let interceptedReq = req; // clone the request to add the new header.\n\n      if (this._sessionStorageService.getObject(SESSION_STORAGE_DATA_KEY.SESSION_TOKEN)) {\n        this.sessiontoken = this._sessionStorageService.getObject(SESSION_STORAGE_DATA_KEY.SESSION_TOKEN); //this.clientid = this._sessionStorageService.getCurrentUser().clientid;\n        //this.userroleuid = this._sessionStorageService.getCurrentUser().userroleuid;\n\n        let token = this.sessiontoken;\n\n        if (req.url.includes(environment.mapBaseUrl)) {\n          token = this._sessionStorageService.getObject(NAVIGATION_DATA.SESSION_TOKEN);\n        }\n\n        if (req.url.includes(environment.baseurl)) {\n          let userInfo = this._appRepoHelperService.getMDataByKey(MASTER_DATA.USER_INFO);\n\n          let orgIds = [];\n          let contractorIds = [];\n          let stringOrgIds = '';\n          let stringContractorIds = '';\n\n          if (userInfo) {}\n\n          let selectedPromoterOrgnisation = this._appRepoHelperService.getGlobalPersistantData(GLOBAL_PERSISTANT_DATA.SELECTED_PROMOTER_ORGNISATION);\n\n          if (userInfo && userInfo.user_access_details) {\n            userInfo.user_access_details.forEach(element => {\n              orgIds.push(element.org_id);\n\n              if (selectedPromoterOrgnisation === null || selectedPromoterOrgnisation === void 0 ? void 0 : selectedPromoterOrgnisation.length) {\n                if (selectedPromoterOrgnisation.indexOf(element.org_id) > -1) {\n                  element.contractor.forEach(elements => {\n                    contractorIds.push(elements.contractorId);\n                  });\n                }\n              } else {\n                element.contractor.forEach(elements => {\n                  contractorIds.push(elements.contractorId);\n                });\n              }\n            });\n            stringOrgIds = orgIds.length ? orgIds.join() : '';\n            stringContractorIds = contractorIds.length ? contractorIds.join() : '';\n\n            let selectContractor = this._appRepoHelperService.getGlobalPersistantData(GLOBAL_PERSISTANT_DATA.SELECTED_CONTRACTOR); // let selectedPromoterOrgnisation = this._appRepoHelperService.getGlobalPersistantData(GLOBAL_PERSISTANT_DATA.SELECTED_PROMOTER_ORGNISATION);\n\n\n            selectContractor = selectContractor && selectContractor.length ? selectContractor : stringContractorIds;\n            selectedPromoterOrgnisation = selectedPromoterOrgnisation && selectedPromoterOrgnisation.length ? selectedPromoterOrgnisation : stringOrgIds;\n            headers = headers.set('Orgids', selectedPromoterOrgnisation);\n            headers = headers.set('ContractorIds', selectContractor);\n          }\n        }\n\n        headers = headers.set('Authorization', 'Bearer ' + token);\n      }\n\n      interceptedReq = req.clone({\n        headers: headers\n      });\n      return next.handle(interceptedReq);\n    }\n\n  }\n\n  AppHttpInterceptorService.ɵfac = function AppHttpInterceptorService_Factory(t) {\n    return new (t || AppHttpInterceptorService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.AppRepoHelperService), i0.ɵɵinject(i4.AppRepoService));\n  };\n\n  AppHttpInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppHttpInterceptorService,\n    factory: AppHttpInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AppHttpInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}