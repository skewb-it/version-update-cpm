{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/select\";\nexport let OptionalSelectDirective = /*#__PURE__*/(() => {\n  class OptionalSelectDirective {\n    constructor(matSelect, elementRef, renderer) {\n      this.matSelect = matSelect;\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n    }\n\n    onOpenedChange(isOpened) {\n      if (!isOpened || this.matSelect.required) {\n        return; //Closing panel, or select is required\n      } //Manually create a mat option DOM element\n\n\n      let matOption = this.renderer.createElement(\"mat-option\");\n      this.renderer.setAttribute(matOption, 'class', 'mat-option'); //Bind events to the new mat option\n\n      this.renderer.listen(matOption, 'click', () => {\n        this.matSelect.value = \"\";\n        this.matSelect.close();\n      }); //Try to add the new mat option in first position of the list\n\n      let panel = document.querySelector('.mat-select-panel');\n\n      if (!panel) {\n        throw \"Cannot find mat select panel\";\n      }\n\n      this.renderer.insertBefore(panel, matOption, panel.firstChild);\n    }\n\n  }\n\n  OptionalSelectDirective.ɵfac = function OptionalSelectDirective_Factory(t) {\n    return new (t || OptionalSelectDirective)(i0.ɵɵdirectiveInject(i1.MatSelect), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  OptionalSelectDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: OptionalSelectDirective,\n    selectors: [[\"\", \"optionalSelect\", \"\"]],\n    hostBindings: function OptionalSelectDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"openedChange\", function OptionalSelectDirective_openedChange_HostBindingHandler($event) {\n          return ctx.onOpenedChange($event);\n        });\n      }\n    }\n  });\n  return OptionalSelectDirective;\n})();\nexport let OptionalSelectDirectiveModule = /*#__PURE__*/(() => {\n  class OptionalSelectDirectiveModule {}\n\n  OptionalSelectDirectiveModule.ɵfac = function OptionalSelectDirectiveModule_Factory(t) {\n    return new (t || OptionalSelectDirectiveModule)();\n  };\n\n  OptionalSelectDirectiveModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: OptionalSelectDirectiveModule\n  });\n  OptionalSelectDirectiveModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({});\n  return OptionalSelectDirectiveModule;\n})();","map":null,"metadata":{},"sourceType":"module"}