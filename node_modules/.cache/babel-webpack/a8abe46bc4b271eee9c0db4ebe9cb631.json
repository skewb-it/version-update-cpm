{"ast":null,"code":"import { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { forwardRef, EventEmitter, Component, Input, Output, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, ChangeDetectorRef, NgZone, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { ObjectUtils, FilterUtils } from 'primeng/utils';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { RippleModule } from 'primeng/ripple';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'primeng/ripple';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'primeng/tooltip';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\n\nfunction DropdownItem_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.option.label || \"empty\");\n  }\n}\n\nfunction DropdownItem_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"height\": a0\n  };\n};\n\nconst _c1 = function (a1, a2) {\n  return {\n    \"p-dropdown-item\": true,\n    \"p-highlight\": a1,\n    \"p-disabled\": a2\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nconst _c3 = [\"container\"];\nconst _c4 = [\"filter\"];\nconst _c5 = [\"in\"];\nconst _c6 = [\"editableInput\"];\n\nfunction Dropdown_span_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r7.label || \"empty\");\n  }\n}\n\nfunction Dropdown_span_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c7 = function (a1) {\n  return {\n    \"p-dropdown-label p-inputtext\": true,\n    \"p-dropdown-label-empty\": a1\n  };\n};\n\nfunction Dropdown_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtemplate(1, Dropdown_span_5_ng_container_1_Template, 2, 1, \"ng-container\", 13);\n    ɵngcc0.ɵɵtemplate(2, Dropdown_span_5_ng_container_2_Template, 1, 0, \"ng-container\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(8, _c7, ctx_r2.label == null || ctx_r2.label.length === 0))(\"pTooltip\", ctx_r2.tooltip)(\"tooltipPosition\", ctx_r2.tooltipPosition)(\"positionStyle\", ctx_r2.tooltipPositionStyle)(\"tooltipStyleClass\", ctx_r2.tooltipStyleClass);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.selectedItemTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.selectedItemTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(10, _c2, ctx_r2.selectedOption));\n  }\n}\n\nconst _c8 = function (a1) {\n  return {\n    \"p-dropdown-label p-inputtext p-placeholder\": true,\n    \"p-dropdown-label-empty\": a1\n  };\n};\n\nfunction Dropdown_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 15);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c8, ctx_r3.placeholder == null || ctx_r3.placeholder.length === 0));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.placeholder || \"empty\");\n  }\n}\n\nfunction Dropdown_input_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 16, 17);\n    ɵngcc0.ɵɵlistener(\"click\", function Dropdown_input_7_Template_input_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onEditableInputClick();\n    })(\"input\", function Dropdown_input_7_Template_input_input_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onEditableInputChange($event);\n    })(\"focus\", function Dropdown_input_7_Template_input_focus_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onEditableInputFocus($event);\n    })(\"blur\", function Dropdown_input_7_Template_input_blur_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.onInputBlur($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r4.disabled);\n    ɵngcc0.ɵɵattribute(\"maxlength\", ctx_r4.maxlength)(\"aria-label\", ctx_r4.selectedOption ? ctx_r4.selectedOption.label : \" \")(\"placeholder\", ctx_r4.placeholder)(\"aria-expanded\", ctx_r4.overlayVisible);\n  }\n}\n\nfunction Dropdown_i_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"i\", 18);\n    ɵngcc0.ɵɵlistener(\"click\", function Dropdown_i_8_Template_i_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.clear($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction Dropdown_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 25);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 26);\n    ɵngcc0.ɵɵlistener(\"click\", function Dropdown_div_11_div_1_Template_div_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    ɵngcc0.ɵɵelementStart(2, \"input\", 27, 28);\n    ɵngcc0.ɵɵlistener(\"keydown.enter\", function Dropdown_div_11_div_1_Template_input_keydown_enter_2_listener($event) {\n      return $event.preventDefault();\n    })(\"keydown\", function Dropdown_div_11_div_1_Template_input_keydown_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r27);\n      const ctx_r26 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r26.onKeydown($event, false);\n    })(\"input\", function Dropdown_div_11_div_1_Template_input_input_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r27);\n      const ctx_r28 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r28.onFilter($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(4, \"span\", 29);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r17.filterValue || \"\");\n    ɵngcc0.ɵɵattribute(\"placeholder\", ctx_r17.filterPlaceholder)(\"aria-label\", ctx_r17.ariaFilterLabel);\n  }\n}\n\nfunction Dropdown_div_11_ng_container_4_ng_template_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const optgroup_r30 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(optgroup_r30.label || \"empty\");\n  }\n}\n\nfunction Dropdown_div_11_ng_container_4_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Dropdown_div_11_ng_container_4_ng_template_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c9 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    selectedOption: a1\n  };\n};\n\nfunction Dropdown_div_11_ng_container_4_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 31);\n    ɵngcc0.ɵɵtemplate(1, Dropdown_div_11_ng_container_4_ng_template_1_span_1_Template, 2, 1, \"span\", 13);\n    ɵngcc0.ɵɵtemplate(2, Dropdown_div_11_ng_container_4_ng_template_1_ng_container_2_Template, 1, 0, \"ng-container\", 14);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, Dropdown_div_11_ng_container_4_ng_template_1_ng_container_3_Template, 1, 0, \"ng-container\", 14);\n  }\n\n  if (rf & 2) {\n    const optgroup_r30 = ctx.$implicit;\n    ɵngcc0.ɵɵnextContext(2);\n\n    const _r20 = ɵngcc0.ɵɵreference(7);\n\n    const ctx_r29 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r29.groupTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r29.groupTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(5, _c2, optgroup_r30));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r20)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(7, _c9, optgroup_r30.items, ctx_r29.selectedOption));\n  }\n}\n\nfunction Dropdown_div_11_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, Dropdown_div_11_ng_container_4_ng_template_1_Template, 4, 10, \"ng-template\", 30);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r18.optionsToDisplay);\n  }\n}\n\nfunction Dropdown_div_11_ng_container_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Dropdown_div_11_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, Dropdown_div_11_ng_container_5_ng_container_1_Template, 1, 0, \"ng-container\", 14);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n\n    const _r20 = ɵngcc0.ɵɵreference(7);\n\n    const ctx_r19 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r20)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(2, _c9, ctx_r19.optionsToDisplay, ctx_r19.selectedOption));\n  }\n}\n\nfunction Dropdown_div_11_ng_template_6_ng_container_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"p-dropdownItem\", 34);\n    ɵngcc0.ɵɵlistener(\"onClick\", function Dropdown_div_11_ng_template_6_ng_container_0_ng_template_1_Template_p_dropdownItem_onClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r45);\n      const ctx_r44 = ɵngcc0.ɵɵnextContext(4);\n      return ctx_r44.onItemClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r42 = ctx.$implicit;\n    const selectedOption_r37 = ɵngcc0.ɵɵnextContext(2).selectedOption;\n    const ctx_r41 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"option\", option_r42)(\"selected\", selectedOption_r37 == option_r42)(\"template\", ctx_r41.itemTemplate);\n  }\n}\n\nfunction Dropdown_div_11_ng_template_6_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, Dropdown_div_11_ng_template_6_ng_container_0_ng_template_1_Template, 1, 3, \"ng-template\", 30);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const options_r36 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", options_r36);\n  }\n}\n\nfunction Dropdown_div_11_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r59 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"p-dropdownItem\", 34);\n    ɵngcc0.ɵɵlistener(\"onClick\", function Dropdown_div_11_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_2_Template_p_dropdownItem_onClick_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r59);\n      const ctx_r58 = ɵngcc0.ɵɵnextContext(5);\n      return ctx_r58.onItemClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const option_r51 = ctx.$implicit;\n    const selectedOption_r37 = ɵngcc0.ɵɵnextContext(3).selectedOption;\n    const ctx_r50 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"option\", option_r51)(\"selected\", selectedOption_r37 == option_r51)(\"template\", ctx_r50.itemTemplate);\n  }\n}\n\nfunction Dropdown_div_11_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r62 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 36, 37);\n    ɵngcc0.ɵɵlistener(\"scrolledIndexChange\", function Dropdown_div_11_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_Template_cdk_virtual_scroll_viewport_scrolledIndexChange_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r62);\n      const ctx_r61 = ɵngcc0.ɵɵnextContext(4);\n      return ctx_r61.scrollToSelectedVirtualScrollElement();\n    });\n    ɵngcc0.ɵɵtemplate(2, Dropdown_div_11_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_ng_container_2_Template, 2, 3, \"ng-container\", 38);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const options_r36 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r48 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r48.scrollHeight))(\"itemSize\", ctx_r48.itemSize);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", options_r36);\n  }\n}\n\nfunction Dropdown_div_11_ng_template_6_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, Dropdown_div_11_ng_template_6_ng_template_1_cdk_virtual_scroll_viewport_0_Template, 3, 5, \"cdk-virtual-scroll-viewport\", 35);\n  }\n\n  if (rf & 2) {\n    const ctx_r40 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r40.virtualScroll && ctx_r40.optionsToDisplay && ctx_r40.optionsToDisplay.length);\n  }\n}\n\nfunction Dropdown_div_11_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, Dropdown_div_11_ng_template_6_ng_container_0_Template, 2, 1, \"ng-container\", 32);\n    ɵngcc0.ɵɵtemplate(1, Dropdown_div_11_ng_template_6_ng_template_1_Template, 1, 1, \"ng-template\", null, 33, ɵngcc0.ɵɵtemplateRefExtractor);\n  }\n\n  if (rf & 2) {\n    const _r39 = ɵngcc0.ɵɵreference(2);\n\n    const ctx_r21 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r21.virtualScroll)(\"ngIfElse\", _r39);\n  }\n}\n\nfunction Dropdown_div_11_li_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 39);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r22.emptyFilterMessage);\n  }\n}\n\nconst _c10 = function (a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\n\nconst _c11 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nfunction Dropdown_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r65 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵlistener(\"@overlayAnimation.start\", function Dropdown_div_11_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r65);\n      const ctx_r64 = ɵngcc0.ɵɵnextContext();\n      return ctx_r64.onOverlayAnimationStart($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, Dropdown_div_11_div_1_Template, 5, 3, \"div\", 20);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 21);\n    ɵngcc0.ɵɵelementStart(3, \"ul\", 22);\n    ɵngcc0.ɵɵtemplate(4, Dropdown_div_11_ng_container_4_Template, 2, 1, \"ng-container\", 13);\n    ɵngcc0.ɵɵtemplate(5, Dropdown_div_11_ng_container_5_Template, 2, 5, \"ng-container\", 13);\n    ɵngcc0.ɵɵtemplate(6, Dropdown_div_11_ng_template_6_Template, 3, 2, \"ng-template\", null, 23, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵtemplate(8, Dropdown_div_11_li_8_Template, 2, 1, \"li\", 24);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r6.panelStyleClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", \"p-dropdown-panel p-component\")(\"@overlayAnimation\", ɵngcc0.ɵɵpureFunction1(14, _c11, ɵngcc0.ɵɵpureFunction2(11, _c10, ctx_r6.showTransitionOptions, ctx_r6.hideTransitionOptions)))(\"ngStyle\", ctx_r6.panelStyle);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.filter);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"max-height\", ctx_r6.virtualScroll ? \"auto\" : ctx_r6.scrollHeight || \"auto\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.group);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r6.group);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.filter && (!ctx_r6.optionsToDisplay || ctx_r6.optionsToDisplay && ctx_r6.optionsToDisplay.length === 0));\n  }\n}\n\nconst _c12 = function (a1, a2, a3, a4) {\n  return {\n    \"p-dropdown p-component\": true,\n    \"p-disabled\": a1,\n    \"p-dropdown-open\": a2,\n    \"p-focus\": a3,\n    \"p-dropdown-clearable\": a4\n  };\n};\n\nconst DROPDOWN_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Dropdown),\n  multi: true\n};\nlet DropdownItem = /*#__PURE__*/(() => {\n  class DropdownItem {\n    constructor() {\n      this.onClick = new EventEmitter();\n    }\n\n    onOptionClick(event) {\n      this.onClick.emit({\n        originalEvent: event,\n        option: this.option\n      });\n    }\n\n  }\n\n  DropdownItem.ɵfac = function DropdownItem_Factory(t) {\n    return new (t || DropdownItem)();\n  };\n\n  DropdownItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DropdownItem,\n    selectors: [[\"p-dropdownItem\"]],\n    inputs: {\n      option: \"option\",\n      selected: \"selected\",\n      disabled: \"disabled\",\n      visible: \"visible\",\n      itemSize: \"itemSize\",\n      template: \"template\"\n    },\n    outputs: {\n      onClick: \"onClick\"\n    },\n    decls: 3,\n    vars: 14,\n    consts: [[\"role\", \"option\", \"pRipple\", \"\", 3, \"ngStyle\", \"ngClass\", \"click\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function DropdownItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"li\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function DropdownItem_Template_li_click_0_listener($event) {\n          return ctx.onOptionClick($event);\n        });\n        ɵngcc0.ɵɵtemplate(1, DropdownItem_span_1_Template, 2, 1, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(2, DropdownItem_ng_container_2_Template, 1, 0, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(7, _c0, ctx.itemSize + \"px\"))(\"ngClass\", ɵngcc0.ɵɵpureFunction2(9, _c1, ctx.selected, ctx.option.disabled));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.option.label)(\"aria-selected\", ctx.selected);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(12, _c2, ctx.option));\n      }\n    },\n    directives: [ɵngcc1.Ripple, ɵngcc2.NgStyle, ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return DropdownItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Dropdown = /*#__PURE__*/(() => {\n  class Dropdown {\n    constructor(el, renderer, cd, zone) {\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.zone = zone;\n      this.scrollHeight = '200px';\n      this.filterBy = 'label';\n      this.resetFilterOnHide = false;\n      this.dropdownIcon = 'pi pi-chevron-down';\n      this.autoDisplayFirst = true;\n      this.emptyFilterMessage = 'No results found';\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.filterMatchMode = \"contains\";\n      this.tooltip = '';\n      this.tooltipPosition = 'right';\n      this.tooltipPositionStyle = 'absolute';\n      this.autofocusFilter = true;\n      this.onChange = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onClick = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n\n      this.onModelChange = () => {};\n\n      this.onModelTouched = () => {};\n\n      this.viewPortOffsetTop = 0;\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(_disabled) {\n      if (_disabled) this.focused = false;\n      this._disabled = _disabled;\n\n      if (!this.cd.destroyed) {\n        this.cd.detectChanges();\n      }\n    }\n\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'item':\n            this.itemTemplate = item.template;\n            break;\n\n          case 'selectedItem':\n            this.selectedItemTemplate = item.template;\n            break;\n\n          case 'group':\n            this.groupTemplate = item.template;\n            break;\n\n          default:\n            this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n\n    ngOnInit() {\n      this.optionsToDisplay = this.options;\n      this.updateSelectedOption(null);\n    }\n\n    get options() {\n      return this._options;\n    }\n\n    set options(val) {\n      let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n      this._options = opts;\n      this.optionsToDisplay = this._options;\n      this.updateSelectedOption(this.value);\n      this.optionsChanged = true;\n      this.updateFilledState();\n\n      if (this.filterValue && this.filterValue.length) {\n        this.activateFilter();\n      }\n    }\n\n    ngAfterViewInit() {\n      if (this.editable) {\n        this.updateEditableLabel();\n      }\n    }\n\n    get label() {\n      return this.selectedOption ? this.selectedOption.label : null;\n    }\n\n    updateEditableLabel() {\n      if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {\n        this.editableInputViewChild.nativeElement.value = this.selectedOption ? this.selectedOption.label : this.value || '';\n      }\n    }\n\n    onItemClick(event) {\n      const option = event.option;\n\n      if (!option.disabled) {\n        this.selectItem(event, option);\n        this.accessibleViewChild.nativeElement.focus();\n      }\n\n      setTimeout(() => {\n        this.hide(event);\n      }, 150);\n    }\n\n    selectItem(event, option) {\n      if (this.selectedOption != option) {\n        this.selectedOption = option;\n        this.value = option.value;\n        this.filled = true;\n        this.onModelChange(this.value);\n        this.updateEditableLabel();\n        this.onChange.emit({\n          originalEvent: event.originalEvent,\n          value: this.value\n        });\n\n        if (this.virtualScroll) {\n          setTimeout(() => {\n            this.viewPortOffsetTop = this.viewPort ? this.viewPort.measureScrollOffset() : 0;\n          }, 1);\n        }\n      }\n    }\n\n    ngAfterViewChecked() {\n      if (this.optionsChanged && this.overlayVisible) {\n        this.optionsChanged = false;\n\n        if (this.virtualScroll) {\n          this.updateVirtualScrollSelectedIndex(true);\n        }\n\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            this.alignOverlay();\n          }, 1);\n        });\n      }\n\n      if (this.selectedOptionUpdated && this.itemsWrapper) {\n        if (this.virtualScroll && this.viewPort) {\n          let range = this.viewPort.getRenderedRange();\n          this.updateVirtualScrollSelectedIndex(false);\n\n          if (range.start > this.virtualScrollSelectedIndex || range.end < this.virtualScrollSelectedIndex) {\n            this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n          }\n        }\n\n        let selectedItem = DomHandler.findSingle(this.overlay, 'li.p-highlight');\n\n        if (selectedItem) {\n          DomHandler.scrollInView(this.itemsWrapper, DomHandler.findSingle(this.overlay, 'li.p-highlight'));\n        }\n\n        this.selectedOptionUpdated = false;\n      }\n    }\n\n    writeValue(value) {\n      if (this.filter) {\n        this.resetFilter();\n      }\n\n      this.value = value;\n      this.updateSelectedOption(value);\n      this.updateEditableLabel();\n      this.updateFilledState();\n      this.cd.markForCheck();\n    }\n\n    resetFilter() {\n      this.filterValue = null;\n\n      if (this.filterViewChild && this.filterViewChild.nativeElement) {\n        this.filterViewChild.nativeElement.value = '';\n      }\n\n      this.optionsToDisplay = this.options;\n    }\n\n    updateSelectedOption(val) {\n      this.selectedOption = this.findOption(val, this.optionsToDisplay);\n\n      if (this.autoDisplayFirst && !this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {\n        this.selectedOption = this.optionsToDisplay[0];\n      }\n\n      this.selectedOptionUpdated = true;\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n\n    onMouseclick(event) {\n      if (this.disabled || this.readonly || this.isInputClick(event)) {\n        return;\n      }\n\n      this.onClick.emit(event);\n      this.accessibleViewChild.nativeElement.focus();\n      if (this.overlayVisible) this.hide(event);else this.show();\n      this.cd.detectChanges();\n    }\n\n    isInputClick(event) {\n      return DomHandler.hasClass(event.target, 'p-dropdown-clear-icon') || event.target.isSameNode(this.accessibleViewChild.nativeElement) || this.editableInputViewChild && event.target.isSameNode(this.editableInputViewChild.nativeElement);\n    }\n\n    isOutsideClicked(event) {\n      return !(this.el.nativeElement.isSameNode(event.target) || this.el.nativeElement.contains(event.target) || this.overlay && this.overlay.contains(event.target));\n    }\n\n    onEditableInputClick() {\n      this.bindDocumentClickListener();\n    }\n\n    onEditableInputFocus(event) {\n      this.focused = true;\n      this.hide(event);\n      this.onFocus.emit(event);\n    }\n\n    onEditableInputChange(event) {\n      this.value = event.target.value;\n      this.updateSelectedOption(this.value);\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n\n    show() {\n      this.overlayVisible = true;\n    }\n\n    onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.overlay = event.element;\n          let itemsWrapperSelector = this.virtualScroll ? '.cdk-virtual-scroll-viewport' : '.p-dropdown-items-wrapper';\n          this.itemsWrapper = DomHandler.findSingle(this.overlay, itemsWrapperSelector);\n          this.appendOverlay();\n\n          if (this.autoZIndex) {\n            this.overlay.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n          }\n\n          this.alignOverlay();\n          this.bindDocumentClickListener();\n          this.bindDocumentResizeListener();\n          this.bindScrollListener();\n\n          if (this.options && this.options.length) {\n            if (!this.virtualScroll) {\n              let selectedListItem = DomHandler.findSingle(this.itemsWrapper, '.p-dropdown-item.p-highlight');\n\n              if (selectedListItem) {\n                DomHandler.scrollInView(this.itemsWrapper, selectedListItem);\n              }\n            }\n          }\n\n          if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.preventModelTouched = true;\n\n            if (this.autofocusFilter) {\n              this.filterViewChild.nativeElement.focus();\n            }\n          }\n\n          this.onShow.emit(event);\n          break;\n\n        case 'void':\n          this.onOverlayHide();\n          break;\n      }\n    }\n\n    scrollToSelectedVirtualScrollElement() {\n      if (!this.virtualAutoScrolled) {\n        if (this.viewPortOffsetTop) {\n          this.viewPort.scrollToOffset(this.viewPortOffsetTop);\n        } else if (this.virtualScrollSelectedIndex > -1) {\n          this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n        }\n      }\n\n      this.virtualAutoScrolled = true;\n    }\n\n    updateVirtualScrollSelectedIndex(resetOffset) {\n      if (this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length) {\n        if (resetOffset) {\n          this.viewPortOffsetTop = 0;\n        }\n\n        this.virtualScrollSelectedIndex = this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay);\n      }\n    }\n\n    appendOverlay() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlay);else DomHandler.appendChild(this.overlay, this.appendTo);\n\n        if (!this.overlay.style.minWidth) {\n          this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n        }\n      }\n    }\n\n    restoreOverlayAppend() {\n      if (this.overlay && this.appendTo) {\n        this.el.nativeElement.appendChild(this.overlay);\n      }\n    }\n\n    hide(event) {\n      this.overlayVisible = false;\n\n      if (this.filter && this.resetFilterOnHide) {\n        this.resetFilter();\n      }\n\n      if (this.virtualScroll) {\n        this.virtualAutoScrolled = false;\n      }\n\n      this.cd.markForCheck();\n      this.onHide.emit(event);\n    }\n\n    alignOverlay() {\n      if (this.overlay) {\n        if (this.appendTo) DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);else DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n      }\n    }\n\n    onInputFocus(event) {\n      this.focused = true;\n      this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n      this.focused = false;\n      this.onBlur.emit(event);\n\n      if (!this.preventModelTouched) {\n        this.onModelTouched();\n      }\n\n      this.preventModelTouched = false;\n    }\n\n    findPrevEnabledOption(index) {\n      let prevEnabledOption;\n\n      if (this.optionsToDisplay && this.optionsToDisplay.length) {\n        for (let i = index - 1; 0 <= i; i--) {\n          let option = this.optionsToDisplay[i];\n\n          if (option.disabled) {\n            continue;\n          } else {\n            prevEnabledOption = option;\n            break;\n          }\n        }\n\n        if (!prevEnabledOption) {\n          for (let i = this.optionsToDisplay.length - 1; i >= index; i--) {\n            let option = this.optionsToDisplay[i];\n\n            if (option.disabled) {\n              continue;\n            } else {\n              prevEnabledOption = option;\n              break;\n            }\n          }\n        }\n      }\n\n      return prevEnabledOption;\n    }\n\n    findNextEnabledOption(index) {\n      let nextEnabledOption;\n\n      if (this.optionsToDisplay && this.optionsToDisplay.length) {\n        for (let i = index + 1; index < this.optionsToDisplay.length - 1; i++) {\n          let option = this.optionsToDisplay[i];\n\n          if (option.disabled) {\n            continue;\n          } else {\n            nextEnabledOption = option;\n            break;\n          }\n        }\n\n        if (!nextEnabledOption) {\n          for (let i = 0; i < index; i++) {\n            let option = this.optionsToDisplay[i];\n\n            if (option.disabled) {\n              continue;\n            } else {\n              nextEnabledOption = option;\n              break;\n            }\n          }\n        }\n      }\n\n      return nextEnabledOption;\n    }\n\n    onKeydown(event, search) {\n      if (this.readonly || !this.optionsToDisplay || this.optionsToDisplay.length === null) {\n        return;\n      }\n\n      switch (event.which) {\n        //down\n        case 40:\n          if (!this.overlayVisible && event.altKey) {\n            this.show();\n          } else {\n            if (this.group) {\n              let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n              if (selectedItemIndex !== -1) {\n                let nextItemIndex = selectedItemIndex.itemIndex + 1;\n\n                if (nextItemIndex < this.optionsToDisplay[selectedItemIndex.groupIndex].items.length) {\n                  this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[nextItemIndex]);\n                  this.selectedOptionUpdated = true;\n                } else if (this.optionsToDisplay[selectedItemIndex.groupIndex + 1]) {\n                  this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex + 1].items[0]);\n                  this.selectedOptionUpdated = true;\n                }\n              } else {\n                this.selectItem(event, this.optionsToDisplay[0].items[0]);\n              }\n            } else {\n              let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n              let nextEnabledOption = this.findNextEnabledOption(selectedItemIndex);\n\n              if (nextEnabledOption) {\n                this.selectItem(event, nextEnabledOption);\n                this.selectedOptionUpdated = true;\n              }\n            }\n          }\n\n          event.preventDefault();\n          break;\n        //up\n\n        case 38:\n          if (this.group) {\n            let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n\n            if (selectedItemIndex !== -1) {\n              let prevItemIndex = selectedItemIndex.itemIndex - 1;\n\n              if (prevItemIndex >= 0) {\n                this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[prevItemIndex]);\n                this.selectedOptionUpdated = true;\n              } else if (prevItemIndex < 0) {\n                let prevGroup = this.optionsToDisplay[selectedItemIndex.groupIndex - 1];\n\n                if (prevGroup) {\n                  this.selectItem(event, prevGroup.items[prevGroup.items.length - 1]);\n                  this.selectedOptionUpdated = true;\n                }\n              }\n            }\n          } else {\n            let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n            let prevEnabledOption = this.findPrevEnabledOption(selectedItemIndex);\n\n            if (prevEnabledOption) {\n              this.selectItem(event, prevEnabledOption);\n              this.selectedOptionUpdated = true;\n            }\n          }\n\n          event.preventDefault();\n          break;\n        //space\n\n        case 32:\n        case 32:\n          if (!this.overlayVisible) {\n            this.show();\n            event.preventDefault();\n          }\n\n          break;\n        //enter\n\n        case 13:\n          if (!this.filter || this.optionsToDisplay && this.optionsToDisplay.length > 0) {\n            this.hide(event);\n          }\n\n          event.preventDefault();\n          break;\n        //escape and tab\n\n        case 27:\n        case 9:\n          this.hide(event);\n          break;\n        //search item based on keyboard input\n\n        default:\n          if (search) {\n            this.search(event);\n          }\n\n          break;\n      }\n    }\n\n    search(event) {\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n\n      const char = event.key;\n      this.previousSearchChar = this.currentSearchChar;\n      this.currentSearchChar = char;\n      if (this.previousSearchChar === this.currentSearchChar) this.searchValue = this.currentSearchChar;else this.searchValue = this.searchValue ? this.searchValue + char : char;\n      let newOption;\n\n      if (this.group) {\n        let searchIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : {\n          groupIndex: 0,\n          itemIndex: 0\n        };\n        newOption = this.searchOptionWithinGroup(searchIndex);\n      } else {\n        let searchIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n        newOption = this.searchOption(++searchIndex);\n      }\n\n      if (newOption && !newOption.disabled) {\n        this.selectItem(event, newOption);\n        this.selectedOptionUpdated = true;\n      }\n\n      this.searchTimeout = setTimeout(() => {\n        this.searchValue = null;\n      }, 250);\n    }\n\n    searchOption(index) {\n      let option;\n\n      if (this.searchValue) {\n        option = this.searchOptionInRange(index, this.optionsToDisplay.length);\n\n        if (!option) {\n          option = this.searchOptionInRange(0, index);\n        }\n      }\n\n      return option;\n    }\n\n    searchOptionInRange(start, end) {\n      for (let i = start; i < end; i++) {\n        let opt = this.optionsToDisplay[i];\n\n        if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n          return opt;\n        }\n      }\n\n      return null;\n    }\n\n    searchOptionWithinGroup(index) {\n      let option;\n\n      if (this.searchValue) {\n        for (let i = index.groupIndex; i < this.optionsToDisplay.length; i++) {\n          for (let j = index.groupIndex === i ? index.itemIndex + 1 : 0; j < this.optionsToDisplay[i].items.length; j++) {\n            let opt = this.optionsToDisplay[i].items[j];\n\n            if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n              return opt;\n            }\n          }\n        }\n\n        if (!option) {\n          for (let i = 0; i <= index.groupIndex; i++) {\n            for (let j = 0; j < (index.groupIndex === i ? index.itemIndex : this.optionsToDisplay[i].items.length); j++) {\n              let opt = this.optionsToDisplay[i].items[j];\n\n              if (opt.label.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)) && !opt.disabled) {\n                return opt;\n              }\n            }\n          }\n        }\n      }\n\n      return null;\n    }\n\n    findOptionIndex(val, opts) {\n      let index = -1;\n\n      if (opts) {\n        for (let i = 0; i < opts.length; i++) {\n          if (val == null && opts[i].value == null || ObjectUtils.equals(val, opts[i].value, this.dataKey)) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n\n    findOptionGroupIndex(val, opts) {\n      let groupIndex, itemIndex;\n\n      if (opts) {\n        for (let i = 0; i < opts.length; i++) {\n          groupIndex = i;\n          itemIndex = this.findOptionIndex(val, opts[i].items);\n\n          if (itemIndex !== -1) {\n            break;\n          }\n        }\n      }\n\n      if (itemIndex !== -1) {\n        return {\n          groupIndex: groupIndex,\n          itemIndex: itemIndex\n        };\n      } else {\n        return -1;\n      }\n    }\n\n    findOption(val, opts, inGroup) {\n      if (this.group && !inGroup) {\n        let opt;\n\n        if (opts && opts.length) {\n          for (let optgroup of opts) {\n            opt = this.findOption(val, optgroup.items, true);\n\n            if (opt) {\n              break;\n            }\n          }\n        }\n\n        return opt;\n      } else {\n        let index = this.findOptionIndex(val, opts);\n        return index != -1 ? opts[index] : null;\n      }\n    }\n\n    onFilter(event) {\n      let inputValue = event.target.value;\n\n      if (inputValue && inputValue.length) {\n        this.filterValue = inputValue;\n        this.activateFilter();\n      } else {\n        this.filterValue = null;\n        this.optionsToDisplay = this.options;\n      }\n\n      this.optionsChanged = true;\n    }\n\n    activateFilter() {\n      let searchFields = this.filterBy.split(',');\n\n      if (this.options && this.options.length) {\n        if (this.group) {\n          let filteredGroups = [];\n\n          for (let optgroup of this.options) {\n            let filteredSubOptions = FilterUtils.filter(optgroup.items, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n            if (filteredSubOptions && filteredSubOptions.length) {\n              filteredGroups.push({\n                label: optgroup.label,\n                value: optgroup.value,\n                items: filteredSubOptions\n              });\n            }\n          }\n\n          this.optionsToDisplay = filteredGroups;\n        } else {\n          this.optionsToDisplay = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n        }\n\n        this.optionsChanged = true;\n      }\n    }\n\n    applyFocus() {\n      if (this.editable) DomHandler.findSingle(this.el.nativeElement, '.p-dropdown-label.p-inputtext').focus();else DomHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();\n    }\n\n    focus() {\n      this.applyFocus();\n    }\n\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentClickListener = this.renderer.listen(documentTarget, 'click', event => {\n          if (this.isOutsideClicked(event)) {\n            this.hide(event);\n            this.unbindDocumentClickListener();\n          }\n\n          this.cd.markForCheck();\n        });\n      }\n    }\n\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n\n    bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n\n    onWindowResize() {\n      if (!DomHandler.isAndroid()) {\n        this.hide(event);\n      }\n    }\n\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerViewChild.nativeElement, event => {\n          if (this.overlayVisible) {\n            this.hide(event);\n          }\n        });\n      }\n\n      this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n\n    updateFilledState() {\n      this.filled = this.selectedOption != null;\n    }\n\n    clear(event) {\n      this.value = null;\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n      this.updateSelectedOption(this.value);\n      this.updateEditableLabel();\n      this.updateFilledState();\n    }\n\n    onOverlayHide() {\n      this.unbindDocumentClickListener();\n      this.unbindDocumentResizeListener();\n      this.unbindScrollListener();\n      this.overlay = null;\n      this.itemsWrapper = null;\n      this.onModelTouched();\n    }\n\n    ngOnDestroy() {\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n\n      this.restoreOverlayAppend();\n      this.onOverlayHide();\n    }\n\n  }\n\n  Dropdown.ɵfac = function Dropdown_Factory(t) {\n    return new (t || Dropdown)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  Dropdown.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Dropdown,\n    selectors: [[\"p-dropdown\"]],\n    contentQueries: function Dropdown_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Dropdown_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n        ɵngcc0.ɵɵviewQuery(_c4, 5);\n        ɵngcc0.ɵɵviewQuery(_c5, 5);\n        ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);\n        ɵngcc0.ɵɵviewQuery(_c6, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterViewChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.accessibleViewChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewPort = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.editableInputViewChild = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function Dropdown_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focused);\n      }\n    },\n    inputs: {\n      scrollHeight: \"scrollHeight\",\n      filterBy: \"filterBy\",\n      resetFilterOnHide: \"resetFilterOnHide\",\n      dropdownIcon: \"dropdownIcon\",\n      autoDisplayFirst: \"autoDisplayFirst\",\n      emptyFilterMessage: \"emptyFilterMessage\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      filterMatchMode: \"filterMatchMode\",\n      tooltip: \"tooltip\",\n      tooltipPosition: \"tooltipPosition\",\n      tooltipPositionStyle: \"tooltipPositionStyle\",\n      autofocusFilter: \"autofocusFilter\",\n      disabled: \"disabled\",\n      options: \"options\",\n      filter: \"filter\",\n      name: \"name\",\n      style: \"style\",\n      panelStyle: \"panelStyle\",\n      styleClass: \"styleClass\",\n      panelStyleClass: \"panelStyleClass\",\n      readonly: \"readonly\",\n      required: \"required\",\n      editable: \"editable\",\n      appendTo: \"appendTo\",\n      tabindex: \"tabindex\",\n      placeholder: \"placeholder\",\n      filterPlaceholder: \"filterPlaceholder\",\n      filterLocale: \"filterLocale\",\n      inputId: \"inputId\",\n      selectId: \"selectId\",\n      dataKey: \"dataKey\",\n      autofocus: \"autofocus\",\n      optionLabel: \"optionLabel\",\n      group: \"group\",\n      showClear: \"showClear\",\n      virtualScroll: \"virtualScroll\",\n      itemSize: \"itemSize\",\n      ariaFilterLabel: \"ariaFilterLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      maxlength: \"maxlength\",\n      tooltipStyleClass: \"tooltipStyleClass\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onClick: \"onClick\",\n      onShow: \"onShow\",\n      onHide: \"onHide\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DROPDOWN_VALUE_ACCESSOR])],\n    decls: 12,\n    vars: 23,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"], [\"container\", \"\"], [1, \"p-hidden-accessible\"], [\"type\", \"text\", \"readonly\", \"\", \"aria-haspopup\", \"listbox\", \"aria-haspopup\", \"listbox\", \"role\", \"listbox\", 3, \"disabled\", \"focus\", \"blur\", \"keydown\"], [\"in\", \"\"], [3, \"ngClass\", \"pTooltip\", \"tooltipPosition\", \"positionStyle\", \"tooltipStyleClass\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [\"type\", \"text\", \"class\", \"p-dropdown-label p-inputtext\", \"aria-haspopup\", \"listbox\", 3, \"disabled\", \"click\", \"input\", \"focus\", \"blur\", 4, \"ngIf\"], [\"class\", \"p-dropdown-clear-icon pi pi-times\", 3, \"click\", 4, \"ngIf\"], [\"role\", \"button\", \"aria-haspopup\", \"listbox\", 1, \"p-dropdown-trigger\"], [1, \"p-dropdown-trigger-icon\", 3, \"ngClass\"], [3, \"ngClass\", \"ngStyle\", \"class\", 4, \"ngIf\"], [3, \"ngClass\", \"pTooltip\", \"tooltipPosition\", \"positionStyle\", \"tooltipStyleClass\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\"], [\"type\", \"text\", \"aria-haspopup\", \"listbox\", 1, \"p-dropdown-label\", \"p-inputtext\", 3, \"disabled\", \"click\", \"input\", \"focus\", \"blur\"], [\"editableInput\", \"\"], [1, \"p-dropdown-clear-icon\", \"pi\", \"pi-times\", 3, \"click\"], [3, \"ngClass\", \"ngStyle\"], [\"class\", \"p-dropdown-header\", 4, \"ngIf\"], [1, \"p-dropdown-items-wrapper\"], [\"role\", \"listbox\", 1, \"p-dropdown-items\"], [\"itemslist\", \"\"], [\"class\", \"p-dropdown-empty-message\", 4, \"ngIf\"], [1, \"p-dropdown-header\"], [1, \"p-dropdown-filter-container\", 3, \"click\"], [\"type\", \"text\", \"autocomplete\", \"off\", 1, \"p-dropdown-filter\", \"p-inputtext\", \"p-component\", 3, \"value\", \"keydown.enter\", \"keydown\", \"input\"], [\"filter\", \"\"], [1, \"p-dropdown-filter-icon\", \"pi\", \"pi-search\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"p-dropdown-item-group\"], [4, \"ngIf\", \"ngIfElse\"], [\"virtualScrollList\", \"\"], [3, \"option\", \"selected\", \"template\", \"onClick\"], [3, \"ngStyle\", \"itemSize\", \"scrolledIndexChange\", 4, \"ngIf\"], [3, \"ngStyle\", \"itemSize\", \"scrolledIndexChange\"], [\"viewport\", \"\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [1, \"p-dropdown-empty-message\"]],\n    template: function Dropdown_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function Dropdown_Template_div_click_0_listener($event) {\n          return ctx.onMouseclick($event);\n        });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"focus\", function Dropdown_Template_input_focus_3_listener($event) {\n          return ctx.onInputFocus($event);\n        })(\"blur\", function Dropdown_Template_input_blur_3_listener($event) {\n          return ctx.onInputBlur($event);\n        })(\"keydown\", function Dropdown_Template_input_keydown_3_listener($event) {\n          return ctx.onKeydown($event, true);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(5, Dropdown_span_5_Template, 3, 12, \"span\", 5);\n        ɵngcc0.ɵɵtemplate(6, Dropdown_span_6_Template, 2, 4, \"span\", 6);\n        ɵngcc0.ɵɵtemplate(7, Dropdown_input_7_Template, 2, 5, \"input\", 7);\n        ɵngcc0.ɵɵtemplate(8, Dropdown_i_8_Template, 1, 0, \"i\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"span\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, Dropdown_div_11_Template, 9, 16, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.styleClass);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(18, _c12, ctx.disabled, ctx.overlayVisible, ctx.focused, ctx.showClear && !ctx.disabled))(\"ngStyle\", ctx.style);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"aria-label\", ctx.selectedOption ? ctx.selectedOption.label : \" \")(\"aria-expanded\", ctx.overlayVisible)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"tabindex\", ctx.tabindex)(\"autofocus\", ctx.autofocus);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.editable && ctx.label != null);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.editable && ctx.label == null);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.editable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.value != null && ctx.showClear && !ctx.disabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.overlayVisible);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.dropdownIcon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.overlayVisible);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgStyle, ɵngcc2.NgIf, ɵngcc3.Tooltip, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgForOf, DropdownItem, ɵngcc4.CdkVirtualScrollViewport, ɵngcc4.CdkFixedSizeVirtualScroll, ɵngcc4.CdkVirtualForOf],\n    styles: [\".p-dropdown{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;position:relative;user-select:none}.p-dropdown-clear-icon{margin-top:-.5rem;position:absolute;top:50%}.p-dropdown-trigger{-ms-flex-align:center;-ms-flex-negative:0;-ms-flex-pack:center;align-items:center;display:-ms-flexbox;display:flex;flex-shrink:0;justify-content:center}.p-dropdown-label{-ms-flex:1 1 auto;cursor:pointer;display:block;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:1%}.p-dropdown-label-empty{overflow:hidden;visibility:hidden}input.p-dropdown-label{cursor:default}.p-dropdown .p-dropdown-panel{min-width:100%}.p-dropdown-panel{position:absolute}.p-dropdown-items-wrapper{overflow:auto}.p-dropdown-item{cursor:pointer;font-weight:400;overflow:hidden;position:relative;white-space:nowrap}.p-dropdown-items{list-style-type:none;margin:0;padding:0}.p-dropdown-filter{width:100%}.p-dropdown-filter-container{position:relative}.p-dropdown-filter-icon{margin-top:-.5rem;position:absolute;top:50%}.p-fluid .p-dropdown{display:-ms-flexbox;display:flex}.p-fluid .p-dropdown .p-dropdown-label{width:1%}\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return Dropdown;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DropdownModule = /*#__PURE__*/(() => {\n  class DropdownModule {}\n\n  DropdownModule.ɵfac = function DropdownModule_Factory(t) {\n    return new (t || DropdownModule)();\n  };\n\n  DropdownModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DropdownModule\n  });\n  DropdownModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, SharedModule, ScrollingModule, TooltipModule, RippleModule], SharedModule, ScrollingModule]\n  });\n  return DropdownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropdownModule, {\n    declarations: function () {\n      return [Dropdown, DropdownItem];\n    },\n    imports: function () {\n      return [CommonModule, SharedModule, ScrollingModule, TooltipModule, RippleModule];\n    },\n    exports: function () {\n      return [Dropdown, SharedModule, ScrollingModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DROPDOWN_VALUE_ACCESSOR, Dropdown, DropdownItem, DropdownModule }; //# sourceMappingURL=primeng-dropdown.js.map","map":null,"metadata":{},"sourceType":"module"}