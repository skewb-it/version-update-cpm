{"ast":null,"code":"import { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/cdk/a11y\";\nimport * as i3 from \"@angular/material/chips\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/icon\";\nconst _c0 = [\"emailInputControl\"];\n\nfunction ChipListEmailInputComponent_mat_chip_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-chip\", 5);\n    i0.ɵɵlistener(\"removed\", function ChipListEmailInputComponent_mat_chip_2_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const val_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.remove(val_r3);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"mat-icon\", 6);\n    i0.ɵɵtext(3, \"clear\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const val_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectable\", true)(\"removable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", val_r3.length > ctx_r1.maxValueLength ? val_r3.substr(0, ctx_r1.maxValueLength - 1) + \"\\u2026\" : val_r3, \" \");\n  }\n}\n\nexport let ChipListEmailInputComponent = /*#__PURE__*/(() => {\n  class ChipListEmailInputComponent {\n    constructor(ngControl, focusMonitor, elementRef) {\n      this.ngControl = ngControl;\n      this.focusMonitor = focusMonitor;\n      this.elementRef = elementRef;\n      this._placeholder = null;\n      this._required = false;\n      this._disabled = false;\n      this._value = null;\n      this.focused = false;\n      this.errorState = false;\n      this.stateChanges = new Subject();\n      this.emailInputValue = '';\n      this.separatorKeysCodes = [ENTER, COMMA];\n      this.maxValueLength = 15;\n      this.id = `app-chiplist-input-${ChipListEmailInputComponent.nextId++}`;\n      this.describedBy = '';\n\n      this.handleOnChange = v => {\n        return;\n      };\n\n      this.handleOnTouched = () => {\n        return;\n      };\n\n      if (this.ngControl !== null) {\n        this.ngControl.valueAccessor = this;\n      }\n\n      this.focusMonitor.monitor(this.elementRef.nativeElement, true).subscribe(origin => {\n        this.focused = !!origin;\n        this.stateChanges.next();\n      });\n    }\n\n    get empty() {\n      return Array.isArray(this.value) ? this.value.length === 0 : !this.value;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      this._value = value;\n      this.handleOnChange(value);\n      this.stateChanges.next();\n    }\n\n    get required() {\n      return this._required;\n    }\n\n    set required(required) {\n      this._required = !!required;\n      this.stateChanges.next();\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = !!value;\n      this.stateChanges.next();\n    }\n\n    get placeholder() {\n      return this._placeholder;\n    }\n\n    set placeholder(placeholder) {\n      this._placeholder = placeholder;\n      this.stateChanges.next();\n    }\n\n    get shouldLabelFloat() {\n      return this.focused || !this.empty || !!this.emailInputValue;\n    }\n\n    ngOnDestroy() {\n      this.stateChanges.complete();\n      this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    writeValue(value) {\n      this.value = Array.isArray(value) ? value : null;\n    }\n\n    registerOnChange(fn) {\n      this.handleOnChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.handleOnTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    onContainerClick(event) {\n      if (event.target.tagName.toLowerCase() !== 'input') {\n        const matChipInput = this.elementRef.nativeElement.querySelector('input');\n\n        if (matChipInput) {\n          matChipInput.focus();\n        }\n      }\n    }\n\n    setDescribedByIds(ids) {\n      this.describedBy = ids.join(' ');\n    }\n\n    ngDoCheck() {\n      if (this.ngControl) {\n        this.errorState = this.ngControl.invalid && this.ngControl.touched;\n        this.stateChanges.next();\n      }\n    }\n\n    add(event) {\n      const input = event.input;\n      const value = event.value ? event.value.trim() : event.value;\n\n      if (this.ngControl && this.ngControl.control) {\n        this.ngControl.control.setErrors(null);\n        this.ngControl.control.updateValueAndValidity();\n      }\n\n      if (this.emailInputControl.valid) {\n        if (value) {\n          const fieldValue = this.value ? [...this.value] : [];\n          fieldValue.push(value);\n          this.value = fieldValue;\n        }\n\n        if (input) {\n          input.value = '';\n        }\n      } else if (this.ngControl && this.ngControl.control) {\n        this.ngControl.control.setErrors({\n          email: true\n        });\n        this.ngControl.control.markAsTouched();\n      }\n    }\n\n    remove(val) {\n      const value = this.value ? [...this.value] : [];\n      const index = value.indexOf(val);\n\n      if (index >= 0) {\n        value.splice(index, 1);\n        this.value = value;\n      }\n    }\n\n  }\n\n  ChipListEmailInputComponent.nextId = 0;\n\n  ChipListEmailInputComponent.ɵfac = function ChipListEmailInputComponent_Factory(t) {\n    return new (t || ChipListEmailInputComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ChipListEmailInputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChipListEmailInputComponent,\n    selectors: [[\"app-chip-list-email-input\"]],\n    viewQuery: function ChipListEmailInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emailInputControl = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ChipListEmailInputComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n        i0.ɵɵattribute(\"aria-describedby\", ctx.describedBy);\n        i0.ɵɵclassProp(\"floating\", ctx.shouldLabelFloat);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      required: \"required\",\n      disabled: \"disabled\",\n      placeholder: \"placeholder\",\n      maxValueLength: \"maxValueLength\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: ChipListEmailInputComponent\n    }])],\n    decls: 5,\n    vars: 9,\n    consts: [[3, \"required\", \"disabled\"], [\"chipList\", \"\"], [3, \"selectable\", \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngModel\", \"placeholder\", \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputAddOnBlur\", \"email\", \"ngModelChange\", \"blur\", \"matChipInputTokenEnd\"], [\"emailInputControl\", \"ngModel\"], [3, \"selectable\", \"removable\", \"removed\"], [\"matChipRemove\", \"\"]],\n    template: function ChipListEmailInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-chip-list\", 0, 1);\n        i0.ɵɵtemplate(2, ChipListEmailInputComponent_mat_chip_2_Template, 4, 3, \"mat-chip\", 2);\n        i0.ɵɵelementStart(3, \"input\", 3, 4);\n        i0.ɵɵlistener(\"ngModelChange\", function ChipListEmailInputComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.emailInputValue = $event;\n        })(\"blur\", function ChipListEmailInputComponent_Template_input_blur_3_listener() {\n          return ctx.handleOnTouched();\n        })(\"matChipInputTokenEnd\", function ChipListEmailInputComponent_Template_input_matChipInputTokenEnd_3_listener($event) {\n          return ctx.add($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n\n        i0.ɵɵproperty(\"required\", ctx.required)(\"disabled\", ctx.disabled);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.emailInputValue)(\"placeholder\", ctx.placeholder)(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes)(\"matChipInputAddOnBlur\", true)(\"email\", true);\n      }\n    },\n    directives: [i3.MatChipList, i4.NgForOf, i1.DefaultValueAccessor, i3.MatChipInput, i1.NgControlStatus, i1.NgModel, i1.EmailValidator, i3.MatChip, i5.MatIcon, i3.MatChipRemove],\n    encapsulation: 2\n  });\n  return ChipListEmailInputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}