{"ast":null,"code":"import { MASTER_DATA_DOMAIN } from '../constants/app-repo.constants';\nimport { SESSION_STORAGE_DATA_KEY, GLOBAL_PARAM_KEY } from '../app-constants';\nimport { MASTER_DATA } from '../constants/db.constants';\nimport { AppFilterModel } from '../models/common/app-filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./server-api-interface-service.service\";\nimport * as i2 from \"./app-repo.service\";\nimport * as i3 from \"./session-storage.service\";\nexport let StartUpService = /*#__PURE__*/(() => {\n  class StartUpService {\n    constructor(_serverApi, _appRepoService, _sessionStorageService) {\n      this._serverApi = _serverApi;\n      this._appRepoService = _appRepoService;\n      this._sessionStorageService = _sessionStorageService;\n      this._appRepoService.appRepo.masterDataByDomain = new Map();\n      this._appRepoService.appRepo.masterDataByKey = new Map();\n      this._appRepoService.appRepo.masterDataByValue = new Map();\n    }\n\n    Init() {\n      const masterDataPromise = this.GetMasterData();\n      const highwayAuthoritiesDataPromise = this.getOtherMasterData('/api/v1/highway-authorities', MASTER_DATA_DOMAIN.HIGHWAY_AUTORITIES.toString());\n      const organizationDataPromise = this.getOtherMasterData('/api/v1/organisations-map', MASTER_DATA_DOMAIN.ORGANIZATIONS.toString());\n      const departmentDataPromise = this.getOtherMasterData('/api/v1/departments', MASTER_DATA_DOMAIN.DEPARTMENTS.toString());\n\n      let userId = this._sessionStorageService.getObject(SESSION_STORAGE_DATA_KEY.USER_NAME);\n\n      const userInfoPromise = this.getUserInfoData(`/api/v1/user-details`);\n      const allContractors = this.getOtherMasterData(`/api/v1/contractor/get-all-contractors`, MASTER_DATA_DOMAIN.CONTRACTOR.toString());\n      const allWorkstream = this.getOtherMasterData(`/api/v1/workstream/get-all-workstream`, MASTER_DATA_DOMAIN.WORKSTREAM.toString());\n      const workIdentifierDataPromise = this.getOtherMasterData(`/api/v1/works-identifier`, MASTER_DATA_DOMAIN.WORK_IDENTIFIER.toString());\n      const filterGlobalParamsSetPromise = this.setAppGlobalPersistantStartupData();\n      const helperTextData = this.getHelperTextData(`/api/v1/master-data/helper-info`);\n      Promise.all([userInfoPromise, organizationDataPromise]).then(response => {\n        this.setUserAccessiblePromoterOrg();\n      });\n      Promise.all([userInfoPromise]).then(response => {\n        this.setUserAccessibleContractors();\n        this.setUserAccessibleWorkStream();\n      });\n      return Promise.all([masterDataPromise, highwayAuthoritiesDataPromise, organizationDataPromise, departmentDataPromise, userInfoPromise, allWorkstream, allContractors, workIdentifierDataPromise, filterGlobalParamsSetPromise, helperTextData]);\n    }\n\n    setAppGlobalPersistantStartupData() {\n      return new Promise((resolve, reject) => {\n        let initFilterGlobalParams = new AppFilterModel();\n\n        this._appRepoService.appRepo.appGlobalPersistantData.set(GLOBAL_PARAM_KEY.APP_FILTER, initFilterGlobalParams);\n\n        resolve(0);\n      });\n    }\n\n    GetMasterData() {\n      return new Promise((resolve, reject) => {\n        this._serverApi.get('/api/v1/master-data').subscribe(resp => {\n          if (resp) {\n            this.SetMasterDataMap(resp);\n            resolve(resp);\n          }\n        }, error => {\n          reject();\n        });\n      });\n    }\n\n    getOtherMasterData(url, domainName) {\n      return new Promise((resolve, reject) => {\n        this._serverApi.get(url).subscribe(resp => {\n          if (resp) {\n            let formattedRespWithDomainName = {};\n            formattedRespWithDomainName[domainName] = resp;\n            this.SetMasterDataMap(formattedRespWithDomainName);\n            resolve(resp);\n          }\n        }, error => {\n          reject();\n        });\n      });\n    }\n\n    getUserInfoData(url) {\n      return new Promise((resolve, reject) => {\n        this._serverApi.get(url).subscribe(resp => {\n          if (resp) {\n            this._appRepoService.appRepo.masterDataByKey.set(MASTER_DATA.USER_INFO, resp);\n\n            resolve(resp);\n          }\n        }, error => {\n          reject();\n        });\n      });\n    }\n\n    SetMasterDataMap(response) {\n      for (let key of Object.keys(response)) {\n        this._appRepoService.appRepo.masterDataByDomain.set(key, response[key]); // TODO: will update this\n\n\n        if (key != MASTER_DATA_DOMAIN.HIGHWAY_AUTORITIES.toString() || key != MASTER_DATA_DOMAIN.ORGANIZATIONS.toString() || key != MASTER_DATA_DOMAIN.DEPARTMENTS.toString() || key != MASTER_DATA_DOMAIN.WORK_IDENTIFIER.toString()) {\n          response[key].forEach(element => {\n            this._appRepoService.appRepo.masterDataByKey.set(element.key, element);\n\n            this._appRepoService.appRepo.masterDataByValue.set(element.value, element);\n          });\n        }\n      }\n    }\n\n    getHelperTextData(url) {\n      return new Promise((resolve, reject) => {\n        this._serverApi.get(url).subscribe(resp => {\n          if (resp) {\n            resp.forEach(element => {\n              this._appRepoService.appRepo.helperTextDataById.set(element.helper_id, element);\n            });\n            resolve(resp);\n          }\n        }, error => {\n          reject();\n        });\n      });\n    }\n\n    setUserAccessibleContractors() {\n      let userAccessibleContractors = [];\n\n      let userInfo = this._appRepoService.appRepo.masterDataByKey.get(MASTER_DATA.USER_INFO);\n\n      if (userInfo == null || (userInfo === null || userInfo === void 0 ? void 0 : userInfo.user_access_details) == null) {\n        return;\n      }\n\n      ;\n      userInfo === null || userInfo === void 0 ? void 0 : userInfo.user_access_details.forEach(element => {\n        element === null || element === void 0 ? void 0 : element.contractor.forEach(c => {\n          // let isContractorExist = userAccessibleContractors.find(uac=> uac.contractor_id == c.contractorId)\n          // if(!isContractorExist)\n          // {\n          let contractor = {\n            contractor_id: c.contractorId,\n            contractor_name: c.contractorDisplayName,\n            org_id: element.org_id\n          };\n          userAccessibleContractors.push(contractor); // }\n        });\n      });\n\n      this._appRepoService.appRepo.masterDataByDomain.set(MASTER_DATA_DOMAIN.USER_ACCESS_CONTRACTOR.toString(), userAccessibleContractors); // let contractorIds = userAccessibleContractors.map(d=>d.contractor_id);\n\n    }\n\n    setUserAccessiblePromoterOrg() {\n      let orgs = [];\n\n      let userInfo = this._appRepoService.appRepo.masterDataByKey.get(MASTER_DATA.USER_INFO);\n\n      let allOrg = this._appRepoService.appRepo.masterDataByDomain.get(MASTER_DATA_DOMAIN.ORGANIZATIONS.toString());\n\n      if (!userInfo || !(userInfo === null || userInfo === void 0 ? void 0 : userInfo.user_access_details) || !allOrg) {\n        return;\n      }\n\n      ;\n      orgs = userInfo === null || userInfo === void 0 ? void 0 : userInfo.user_access_details.map(d => {\n        var _a;\n\n        let promoterPrefix = (_a = allOrg.find(a => a.orgId == d.org_id)) === null || _a === void 0 ? void 0 : _a.swaOrgPrefix;\n        return {\n          orgId: d.org_id,\n          name: d.org_name,\n          promoterPrefix: promoterPrefix\n        };\n      });\n\n      this._appRepoService.appRepo.masterDataByDomain.set(MASTER_DATA_DOMAIN.USER_ACCESS_ORG.toString(), orgs);\n    }\n\n    setUserAccessibleWorkStream() {\n      let userAccessibleWorkStream = [];\n\n      let userInfo = this._appRepoService.appRepo.masterDataByKey.get(MASTER_DATA.USER_INFO);\n\n      if (userInfo == null || (userInfo === null || userInfo === void 0 ? void 0 : userInfo.user_access_details) == null) {\n        return;\n      }\n\n      ;\n      userInfo === null || userInfo === void 0 ? void 0 : userInfo.user_access_details.forEach(element => {\n        element === null || element === void 0 ? void 0 : element.workstream.forEach(w => {\n          // let isContractorExist = userAccessibleWorkStream.find(uac=> uac.workstreamId == w.workstreamId)\n          // if(!isContractorExist)\n          // {\n          let workstream = {\n            org_id: element.org_id,\n            workstreamId: w.workstreamId,\n            description: w.description\n          };\n          userAccessibleWorkStream.push(workstream); // }\n        });\n      });\n\n      this._appRepoService.appRepo.masterDataByDomain.set(MASTER_DATA_DOMAIN.USER_ACCESS_WROK_STREAM.toString(), userAccessibleWorkStream);\n    }\n\n  }\n\n  StartUpService.ɵfac = function StartUpService_Factory(t) {\n    return new (t || StartUpService)(i0.ɵɵinject(i1.ServerApiInterfaceServiceService), i0.ɵɵinject(i2.AppRepoService), i0.ɵɵinject(i3.SessionStorageService));\n  };\n\n  StartUpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StartUpService,\n    factory: StartUpService.ɵfac,\n    providedIn: 'root'\n  });\n  return StartUpService;\n})();","map":null,"metadata":{},"sourceType":"module"}