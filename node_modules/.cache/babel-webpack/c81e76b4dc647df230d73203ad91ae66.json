{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/server-api-interface-service.service\";\nimport * as i2 from \"src/app/services/app-repo-helper.service\";\nimport * as i3 from \"src/app/services/validation.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"src/app/services/notification.service\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/datepicker\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/material/core\";\n\nfunction AddRecordInvoiceChargesComponent_mat_option_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", c_r2.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", c_r2.viewValue, \" \");\n  }\n}\n\nexport let AddRecordInvoiceChargesComponent = /*#__PURE__*/(() => {\n  class AddRecordInvoiceChargesComponent extends WidgetComponentBase {\n    constructor(_serverApi, _appRepoHelperService, _validationService, fb, _notificationService) {\n      super(_serverApi, _validationService);\n      this._serverApi = _serverApi;\n      this._appRepoHelperService = _appRepoHelperService;\n      this._validationService = _validationService;\n      this.fb = fb;\n      this._notificationService = _notificationService;\n      this.arrCostType = [{\n        value: \"PERMIT CHARGE\",\n        viewValue: \"Permit Charge\"\n      }, {\n        value: \"FPN\",\n        viewValue: \"FPN\"\n      }];\n    }\n\n    ngOnInit() {\n      this.createFormGroup();\n    }\n\n    createFormGroup() {\n      this.wgFormGroup = this.fb.group({\n        'invoiceNumber': ['', [Validators.required]],\n        'invoiceDate': ['', [Validators.required]],\n        'invoiceAmount': ['', [Validators.required]],\n        'costType': ['', [Validators.required]],\n        'invoiceDesc': ['', [Validators.required]],\n        'chargesDesc': ['', [Validators.required]]\n      });\n      this.wgFormGroup.reset();\n      this.wgFormGroup.markAsUntouched();\n      this.wgOnInit();\n    }\n\n    setFieldData() {}\n\n    getControlData() {}\n\n    convertData(response) {}\n\n    setMode(responseDataModel) {}\n\n    setValue(responseDataModel) {}\n\n    getValue() {\n      let data = new Object();\n\n      if (this.wgFormGroup.controls.invoiceNumber.value) {\n        data.invoiceNumber = this.wgFormGroup.controls.invoiceNumber.value;\n      }\n\n      if (this.wgFormGroup.controls.invoiceDate.value) {\n        data.invoiceDate = this.wgFormGroup.controls.invoiceDate.value;\n      }\n\n      if (this.wgFormGroup.controls.invoiceAmount.value) {\n        data.invoiceAmount = this.wgFormGroup.controls.invoiceAmount.value;\n      }\n\n      if (this.wgFormGroup.controls.costType.value) {\n        data.costType = this.wgFormGroup.controls.costType.value;\n      }\n\n      if (this.wgFormGroup.controls.invoiceDesc.value) {\n        data.invoiceDesc = this.wgFormGroup.controls.invoiceDesc.value;\n      }\n\n      if (this.wgFormGroup.controls.chargesDesc.value) {\n        data.chargesDesc = this.wgFormGroup.controls.chargesDesc.value;\n      }\n\n      return data;\n    }\n\n    addRecordInvoiceCharges() {\n      this.wgFormGroup.markAllAsTouched();\n\n      if (this.wgFormGroup.dirty && this.wgFormGroup.valid) {\n        let data = this.getValue();\n        this.wgReset();\n        this.emitEvent(\"onSaveInvoiceClick\", data);\n      } else {\n        try {\n          this._notificationService.error(this.wgFormGroup.errors.dateCompare.errorMessage);\n        } catch (exception) {}\n      }\n    }\n\n    formatDate(date) {\n      var d = new Date(date),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n\n  }\n\n  AddRecordInvoiceChargesComponent.ɵfac = function AddRecordInvoiceChargesComponent_Factory(t) {\n    return new (t || AddRecordInvoiceChargesComponent)(i0.ɵɵdirectiveInject(i1.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i2.AppRepoHelperService), i0.ɵɵdirectiveInject(i3.ValidationService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.NotificationService));\n  };\n\n  AddRecordInvoiceChargesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddRecordInvoiceChargesComponent,\n    selectors: [[\"app-add-record-invoice-charges\"]],\n    inputs: {\n      dataModel: \"dataModel\",\n      configModel: \"configModel\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 48,\n    vars: 4,\n    consts: [[1, \"form-container\", 3, \"formGroup\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"20px\", \"fxLayoutAlign\", \"space-between end\"], [\"fxFlex\", \"50\", \"appearance\", \"outline\"], [\"matInput\", \"\", \"autocomplete\", \"off\", \"formControlName\", \"invoiceNumber\"], [\"matInput\", \"\", \"formControlName\", \"invoiceDate\", 3, \"matDatepicker\", \"click\", \"focus\"], [\"matSuffix\", \"\", 3, \"for\"], [\"invoiceDate\", \"\"], [\"matInput\", \"\", \"autocomplete\", \"off\", \"formControlName\", \"invoiceAmount\", \"type\", \"number\"], [\"appearance\", \"outline\", \"fxFlex\", \"50\"], [\"formControlName\", \"costType\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"placeholder\", \"Enter Invoice Description\", \"formControlName\", \"invoiceDesc\"], [\"matInput\", \"\", \"placeholder\", \"Enter Charge Description\", \"formControlName\", \"chargesDesc\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"20px\", \"fxLayoutAlign\", \"end end\"], [\"type\", \"button\", \"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"primary-button\", 3, \"click\"], [3, \"value\"]],\n    template: function AddRecordInvoiceChargesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(3, \"mat-label\");\n        i0.ɵɵtext(4, \"Invoice Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 3);\n        i0.ɵɵelementStart(6, \"mat-error\");\n        i0.ɵɵtext(7, \"Field must be valid\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Invoice Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 4);\n        i0.ɵɵlistener(\"click\", function AddRecordInvoiceChargesComponent_Template_input_click_11_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r0 = i0.ɵɵreference(14);\n\n          return _r0.open();\n        })(\"focus\", function AddRecordInvoiceChargesComponent_Template_input_focus_11_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r0 = i0.ɵɵreference(14);\n\n          return _r0.open();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"mat-datepicker-toggle\", 5);\n        i0.ɵɵelement(13, \"mat-datepicker\", null, 6);\n        i0.ɵɵelementStart(15, \"mat-error\");\n        i0.ɵɵtext(16, \"Field must be valid\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 1);\n        i0.ɵɵelementStart(18, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(19, \"mat-label\");\n        i0.ɵɵtext(20, \"Invoice Amount\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 7);\n        i0.ɵɵelementStart(22, \"mat-error\");\n        i0.ɵɵtext(23, \"Field must be valid\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-form-field\", 8);\n        i0.ɵɵelementStart(25, \"mat-label\");\n        i0.ɵɵtext(26, \"Cost Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-select\", 9);\n        i0.ɵɵtemplate(28, AddRecordInvoiceChargesComponent_mat_option_28_Template, 2, 2, \"mat-option\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"mat-error\");\n        i0.ɵɵtext(30, \"Field must be valid\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 1);\n        i0.ɵɵelementStart(32, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(33, \"mat-label\");\n        i0.ɵɵtext(34, \"Invoice Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"textarea\", 11);\n        i0.ɵɵelementStart(36, \"mat-error\");\n        i0.ɵɵtext(37, \"Field must be valid\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"mat-form-field\", 8);\n        i0.ɵɵelementStart(39, \"mat-label\");\n        i0.ɵɵtext(40, \"Charge Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(41, \"textarea\", 12);\n        i0.ɵɵelementStart(42, \"mat-error\");\n        i0.ɵɵtext(43, \"Field must be valid\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(44, \"hr\");\n        i0.ɵɵelementStart(45, \"div\", 13);\n        i0.ɵɵelementStart(46, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function AddRecordInvoiceChargesComponent_Template_button_click_46_listener() {\n          return ctx.addRecordInvoiceCharges();\n        });\n        i0.ɵɵtext(47, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(14);\n\n        i0.ɵɵproperty(\"formGroup\", ctx.wgFormGroup);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"matDatepicker\", _r0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r0);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"ngForOf\", ctx.arrCostType);\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i6.DefaultLayoutDirective, i6.DefaultLayoutGapDirective, i6.DefaultLayoutAlignDirective, i7.MatFormField, i6.DefaultFlexDirective, i7.MatLabel, i8.MatInput, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i7.MatError, i9.MatDatepickerInput, i9.MatDatepickerToggle, i7.MatSuffix, i9.MatDatepicker, i4.NumberValueAccessor, i10.MatSelect, i11.NgForOf, i12.MatButton, i13.MatOption],\n    styles: [\"\"]\n  });\n  return AddRecordInvoiceChargesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}