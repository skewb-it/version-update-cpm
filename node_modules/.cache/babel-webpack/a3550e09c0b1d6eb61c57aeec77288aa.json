{"ast":null,"code":"import { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport Chart from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/server-api-interface-service.service\";\nimport * as i2 from \"src/app/services/validation.service\";\nimport * as i3 from \"ngx-spinner\";\nconst _c0 = [\"barChart\"];\nexport let StackedBarChartComponent = /*#__PURE__*/(() => {\n  class StackedBarChartComponent extends WidgetComponentBase {\n    // chart: any;\n    constructor(_serverApiBase, _validationService, _spinner) {\n      super(_serverApiBase, _validationService);\n      this._serverApiBase = _serverApiBase;\n      this._validationService = _validationService;\n      this._spinner = _spinner;\n      this.labelarray = [];\n      this.datasetarray = [];\n      this.tdarrary = [];\n    }\n\n    ngOnInit() {\n      this.wgOnInit(); // this.bindchart();\n    }\n\n    ngAfterViewInit() {\n      this.wgRefreshData();\n    }\n\n    setFieldData() {}\n\n    bindchart() {\n      if (this.dataModel.chartInstance) this.dataModel.chartInstance.destroy();\n      this.dataModel.chartInstance = new Chart(this.chartRef.nativeElement, {\n        // type: 'horizontalBar',\n        type: 'bar',\n        data: {\n          labels: this.labelarray,\n          datasets: this.datasetarray\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          // legend: {\n          //   display: true,\n          //   position: 'bottom',\n          //   labels: {\n          //     color: \"#666666\",\n          //     // fontColor: \"#666666\",\n          //     // fontSize: 18\n          // },\n          // },\n          // legend:{},\n          scales: {\n            xAxes: {\n              stacked: true,\n              ticks: {\n                color: '#666666' // fontColor: \"#666666\",\n                // fontSize: 14,\n                // stepSize: 1,\n                // beginAtZero: true\n\n              }\n            },\n            y: {\n              stacked: true,\n              ticks: {\n                color: '#666666',\n                // fontColor: \"#666666\",\n                // fontSize: 14,\n                // stepSize: 1,\n                // beginAtZero: true\n                callback: function (value, index, values) {\n                  return '£' + value;\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                color: '#666666' // fontColor: \"#666666\",\n                // fontSize: 18\n\n              }\n            }\n          }\n        }\n      });\n    }\n\n    getControlData() {\n      let url = this.dataModel.widgetChartApi;\n\n      this._spinner.show();\n\n      return this.wgAPIMethodGet(url);\n    }\n\n    convertData(response) {\n      console.log('response from stack ', response);\n\n      this._spinner.hide();\n\n      let temparray = [];\n      let labelarr = [];\n      let temparray1 = [];\n      this.tdarrary.length = 0;\n      this.datasetarray.length = 0;\n      temparray.length = 0;\n      temparray = [];\n      response.columns.forEach(element => {\n        labelarr.push(element.display_text);\n      });\n      this.labelarray = labelarr; // this.dataModel.chartInstance.data.labels = temparray;\n\n      temparray.length = 0;\n      temparray = [];\n      let backgourndarray = ['#3B78B4', '#73E0E0', '#E32E2C', '#F2BE6E', 'purple', 'yellow', 'blue', 'red', 'blue', 'green', '#554645', 'whtie', 'gray', 'yellow', 'blue', 'red', 'blue', 'green', '#554645', 'whtie', 'gray', 'yellow', 'blue', 'red', 'blue', 'green', '#554645', 'whtie', 'gray', 'yellow', 'blue', 'red', 'blue', 'green', '#554645', 'whtie', 'gray', 'yellow', 'blue', 'red', 'blue', 'green', '#554645', 'whtie', 'gray', 'yellow', 'blue'];\n      let headerarray = ['FPNs', 'Defects', 'Variations', 'Works Start Due', 'Works Stop Due'];\n      response.data.forEach((element, index) => {\n        var tempobj = {};\n        tempobj.data = []; // console.log(\"name\",element.name)\n        // tempobj.label = headerarray[index];\n\n        tempobj.backgroundColor = backgourndarray[index];\n        tempobj.data.length = 0; // temparray1=[];\n\n        element.items.forEach(ele => {\n          tempobj.label = ele.item_code; // console.log(Number(ele.value))\n\n          tempobj.data.push(Number(ele.value)); // temparray1.push(ele.data)\n        });\n        /* for table start*/\n        //       var obj:any;\n        //    obj=tempobj.label;\n        //    let te=[];\n        //    te=tempobj.data;\n        //    let temp=tempobj.label;\n        //    te.unshift(temp);\n        //    console.log(\"te\",te)\n        // this.tdarrary.push(te);\n\n        /* for  table end */\n\n        temparray.push(tempobj);\n      });\n      this.datasetarray = temparray;\n      console.log('Stacked chart', this.dataModel.data);\n      this.bindchart();\n    }\n\n    setMode(responseDataModel) {}\n\n    setValue(responseDataModel) {}\n\n  }\n\n  StackedBarChartComponent.ɵfac = function StackedBarChartComponent_Factory(t) {\n    return new (t || StackedBarChartComponent)(i0.ɵɵdirectiveInject(i1.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i2.ValidationService), i0.ɵɵdirectiveInject(i3.NgxSpinnerService));\n  };\n\n  StackedBarChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StackedBarChartComponent,\n    selectors: [[\"app-stacked-bar-chart\"]],\n    viewQuery: function StackedBarChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartRef = _t.first);\n      }\n    },\n    inputs: {\n      dataModel: \"dataModel\",\n      configModel: \"configModel\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"row\", \"mb-2\"], [1, \"col\", \"text-center\"], [1, \"headingtitle\"], [2, \"width\", \"100%\", \"height\", \"300px\"], [2, \"width\", \"100%\", \"height\", \"100%\"], [\"barChart\", \"\"]],\n    template: function StackedBarChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3, \" Estimated Risk Exposure ( \\u00A3 ) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelement(5, \"canvas\", 4, 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".headingtitle[_ngcontent-%COMP%]{font-size:14px;padding-bottom:3px;color:var(--theme-color);font-weight:800}\"]\n  });\n  return StackedBarChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}