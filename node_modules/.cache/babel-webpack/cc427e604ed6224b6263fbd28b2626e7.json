{"ast":null,"code":"import { WidgetConstants } from '../constants/widget-constants';\nimport { FILTER_TYPE } from '../app-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./server-api-interface-service.service\";\nimport * as i3 from \"./notification.service\";\nimport * as i4 from \"./save-file.service\";\nexport let EventActionService = /*#__PURE__*/(() => {\n  class EventActionService {\n    constructor(_router, _serverApi, _notificationService, _saveFileService) {\n      this._router = _router;\n      this._serverApi = _serverApi;\n      this._notificationService = _notificationService;\n      this._saveFileService = _saveFileService;\n      this.EventActionMap = new Map();\n      this.globalParameters = new Map(); // this variable not used, however it is taken for reference only\n\n      this.compRefInstancesMap = new Map();\n      this.EventActionMap.set(\"applyFilter\", this.ActionApplyFilter);\n      this.EventActionMap.set(\"applyFilterOnChange\", this.ActionApplyFilterOnChange);\n      this.EventActionMap.set(\"resetFilter\", this.ActionResetFilter);\n      this.EventActionMap.set(\"navigate\", this.ActionNavigate);\n      this.EventActionMap.set(\"refresh\", this.ActionRefreshData);\n      this.EventActionMap.set(\"dynamic\", this.ActionDynamicMethod);\n      this.EventActionMap.set(\"redirect\", this.ActionRedirect);\n      this.EventActionMap.set(\"refreshWithReq\", this.ActionSearch);\n      this.EventActionMap.set(\"setPageProperties\", this.ActionSetPageProp);\n      this.EventActionMap.set(\"setBreadcrumbItem\", this.ActionSetBreadcrumbItem);\n      this.EventActionMap.set(\"setBreadcrumbsView\", this.ActionSetBreadcrumbsView);\n      this.EventActionMap.set(\"executePageMethod\", this.ActionExecutePageMethod);\n      this.EventActionMap.set(\"onsubmitwithuserdata\", this.ActionOnSubmitWithUserData);\n      this.EventActionMap.set(\"onsubmit\", this.ActionOnSubmit);\n      this.EventActionMap.set(\"dynamicRefresh\", this.ActionDynamicRefreshData);\n      this.EventActionMap.set(\"dynamicToaster\", this.ActionDynamicToasterNotification);\n      this.EventActionMap.set(\"resetFormData\", this.resetFormData);\n      this.EventActionMap.set(\"setNavPathFromReq\", this.ActionSetNavigationPathFromReq);\n      this.EventActionMap.set(\"navigationWithRouteParams\", this.ActionNavigationWithRouteParams);\n      this.EventActionMap.set(\"processSubmitResponseSetKey\", this.ActionProcessSubmitResponseSetKey);\n      this.EventActionMap.set(\"setNavPathForInsertUpdate\", this.ActionSetNavPathForInsertUpdate);\n      this.EventActionMap.set(\"navigateWithParams\", this.ActionNavigationWithStaticRouteParams);\n      this.EventActionMap.set(\"dynamicNavigationWithRouteParams\", this.ActionDynamicNavigationWithRouteParams);\n      this.EventActionMap.set(\"setGlobalParams\", this.ActionSetGlobaParams);\n      this.EventActionMap.set(\"fileUploadWithUserData\", this.ActionOnFileUploadWithUserData);\n      this.EventActionMap.set(\"downloadFile\", this.ActionDownload);\n      this.EventActionMap.set(\"setNavigationData\", this.ActionSetNavigationData);\n      this.EventActionMap.set(\"copyWidgetData\", this.ActionCopyWidgetData);\n    }\n\n    ActionCopyWidgetData(wigDataContext, params, eventparams) {\n      try {\n        if (params[0]) {\n          params[0].positions.forEach(item => {\n            const srcCompInstance = this.compRefInstancesMap.get(item.src);\n            const data = srcCompInstance.getValue();\n            const targCompInstance = this.compRefInstancesMap.get(item.target);\n            targCompInstance.setFormData(data, eventparams);\n          });\n        }\n      } catch (_a) {\n        console.error(\"Error : error occured while copying form data\", eventparams);\n      }\n    }\n\n    getEventHandler(eventName) {\n      if (this.EventActionMap.has(eventName)) {\n        return this.EventActionMap.get(eventName); //This methods will be executed by caller context\n      } else {\n        return null;\n      }\n    } // navigate action\n\n\n    ActionNavigate(wigDataContext, params, eventparams) {\n      //Static Keys is parameterized key passed to the navigation data\n      let statickeys = params.staticKeys; //Get value of these keys from event params\n\n      let eventParamKeys = params.eventParamKeys;\n      let globalParamKeys = params.globalParamKeys;\n      let location = params.location;\n      let page = this.pageInstance;\n      let navigationData = new Map();\n      let globalNavigationKeys = [];\n      let staticKeysMap = new Map(statickeys);\n      staticKeysMap.forEach((value, key) => {\n        navigationData.set(key, value);\n      });\n\n      let findProp = function (obj, prop, defval) {\n        if (typeof defval == 'undefined') defval = null;\n        prop = prop.split('.');\n\n        for (var i = 0; i < prop.length; i++) {\n          if (typeof obj[prop[i]] == 'undefined') return defval;\n          obj = obj[prop[i]];\n        }\n\n        return obj;\n      };\n\n      eventParamKeys.forEach(item => {\n        navigationData.set(item.setKey, findProp(eventparams.dataContext, item.getKey));\n      });\n      globalParamKeys.forEach(item => {\n        globalNavigationKeys.push(item);\n      });\n      navigationData.forEach((value, key) => {\n        globalNavigationKeys.push(key);\n        this.pageInstance.globalParameters.set(key, value);\n      });\n      this.pageInstance.globalParameters.set(\"navigationDataKeys\", globalNavigationKeys);\n\n      if (location.path) {\n        this._router.navigate([params.location.path]);\n      } else {\n        this._router.navigate([findProp(eventparams.dataContext, params.location.eventParamKey)]);\n      }\n    }\n\n    ActionDynamicNavigationWithRouteParams(wigDataContext, params, eventparams) {\n      var navigationData = eventparams[params.navigationKey];\n      var location = params.locationKey ? eventparams[params.locationKey] : params.location;\n\n      this._router.navigate([location, navigationData]);\n    }\n\n    ActionNavigationWithStaticRouteParams(wigDataContext, params, eventparams) {\n      this._router.navigate([params.location, eventparams.apireqdata[params.getkey]]);\n    }\n\n    ActionNavigationWithRouteParams(wigDataContext, params, eventparams) {\n      var navigationData = eventparams.dataContext[params.getkey];\n\n      this._router.navigate([params.location, navigationData]);\n    }\n\n    ActionSetNavigationData(wigDataContext, params, eventparams) {\n      let keys = params.globalParamKeys;\n      let page = this.pageInstance;\n      page.globalParameters[\"navigationDataKeys\"] = keys;\n    }\n\n    ActionProcessSubmitResponseSetKey(wigDataContext, params, eventparams) {\n      eventparams.dataContext = {};\n      eventparams.dataContext[params.setkey] = eventparams.responseData[0].insertedid;\n    }\n\n    ActionSetNavigationPathFromReq(wigDataContext, params, eventparams) {\n      eventparams.dataContext = {};\n      eventparams.dataContext[params.getkey] = eventparams.reqData[params.getkey];\n    }\n\n    ActionSetNavPathForInsertUpdate(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      eventparams.dataContext = {};\n\n      if (eventparams.queryAction === \"insert\") {\n        eventparams.dataContext[params.setkey] = eventparams.responseData[0].insertedid;\n      } else {\n        eventparams.dataContext[params.getkey] = eventparams.reqData[params.getkey];\n      } //This code will be used further and need to change previous references\n\n\n      page.globalParameters[params.setkey] = eventparams.dataContext[params.setkey];\n    }\n\n    resetFormData(wigDataContext, params, eventparams) {\n      try {\n        if (params[0]) {\n          if (params[0].position) {\n            const instance = this.compRefInstancesMap.get(params[0].position);\n            const mode = params[0].mode;\n            instance.dataModel.mode = mode;\n            instance.resetForm(mode);\n          }\n        }\n      } catch (_a) {\n        console.error(\"Error : error occured while reseting form data\", eventparams);\n      }\n    } // dynamic refresh widget data\n\n\n    ActionDynamicRefreshData(wigDataContext, params, eventparams) {\n      let position;\n      let src = eventparams;\n      Object.keys(params).forEach(key => {\n        // console.log(`key = param[key] :  ${key} = ${param[key]}`);\n        eval(`${key} = ${params[key]}`);\n      });\n      const instance = this.compRefInstancesMap.get(position);\n      instance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n    }\n\n    ActionDynamicRefreshDataArray(wigDataContext, params, eventparams) {\n      params.position.forEach(position => {\n        const instance = this.compRefInstancesMap.get(position);\n        instance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n      });\n    }\n\n    ActionDynamicToasterNotification(wigDataContext, params, eventparams) {\n      let src = eventparams;\n      let toaster = Object();\n\n      try {\n        Object.keys(params).forEach(key => {\n          eval(`${key} = ${params[key]}`);\n        });\n\n        if (toaster.issuccess) {\n          this._notificationService.success(toaster.msg);\n        } else {\n          this._notificationService.error(toaster.msg);\n        }\n      } catch (e) {\n        console.error(\"ActionDynamicSendToasterNotification error:\", e);\n      }\n    } //Info: Here this refers to the caller componet hence any variable with \"this.\" should be present\n    //caller compoent with same variable name e.g. in this case  \"_router\" should be present in caller\n    // apply filter action\n\n\n    ActionApplyFilter(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      let src = eventparams;\n      let targ;\n      params.forEach(param => {\n        try {\n          let filterPosition = Object.keys(param).find(key => key == \"page.filterposition\");\n          filterPosition = param[filterPosition].replace(/'/g, \"\");\n          const filterCompInstance = page.compRefInstancesMap.get(filterPosition);\n          let gridPosition = Object.keys(param).find(key => key == \"page.gridposition\");\n          gridPosition = param[gridPosition].replace(/'/g, \"\");\n          const gridCompInstance = page.compRefInstancesMap.get(gridPosition);\n          const isvalid = filterCompInstance.Validate();\n\n          if (!isvalid) {\n            page.collapse = false;\n            return false;\n          }\n\n          page.collapse = true;\n          var filterData = filterCompInstance.getValue(); //gridCompInstance.dataModel.apireqdata.wf = 'filter';\n\n          targ = gridCompInstance.dataModel;\n          Object.keys(param).forEach(key => {\n            eval(`${key} = ${param[key]}`);\n          });\n          Object.assign(gridCompInstance.dataModel.apireqdata, filterData);\n          gridCompInstance.ResetPagination();\n          gridCompInstance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n        } catch (e) {\n          console.error(\"ActionApplyFilter error:\", e);\n        }\n      });\n    }\n\n    ActionApplyFilterOnChange(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      let src = eventparams;\n      let targ;\n      params.forEach(param => {\n        try {\n          let filterPosition = Object.keys(param).find(key => key == \"page.filterposition\");\n          filterPosition = param[filterPosition].replace(/'/g, \"\");\n          const filterCompInstance = page.compRefInstancesMap.get(filterPosition);\n          let gridPosition = Object.keys(param).find(key => key == \"page.gridposition\");\n          gridPosition = param[gridPosition].replace(/'/g, \"\");\n          const gridCompInstance = page.compRefInstancesMap.get(gridPosition);\n          let filterClear = Object.keys(param).find(key => key == \"page.clearFilter\");\n          let filterData = null;\n          let filterClearCompInstance = null;\n\n          if (filterClear != null) {\n            filterClear = param[filterClear].replace(/'/g, \"\");\n            filterClearCompInstance = page.compRefInstancesMap.get(filterClear);\n            filterClearCompInstance.reset();\n          }\n\n          filterData = filterCompInstance.getValue();\n          targ = gridCompInstance.dataModel;\n          Object.keys(param).forEach(key => {\n            eval(`${key} = ${param[key]}`);\n          });\n\n          if (filterData != null && 'quickFilter' in filterData && filterData['quickFilter'] == '_all') {\n            filterData = filterClearCompInstance.getValue();\n            gridCompInstance.dataModel.filterType = FILTER_TYPE.ADVANCE_FILTER;\n          } //Object.assign(gridCompInstance.dataModel.apireqdata, filterData);\n\n\n          gridCompInstance.dataModel.apireqdata = Object.assign({}, filterData);\n          gridCompInstance.resetPagination();\n          gridCompInstance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n\n          if (filterClear != null) {\n            filterClearCompInstance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n          }\n        } catch (e) {\n          console.error(\"ActionApplyFilter error:\", e);\n        }\n      });\n    }\n\n    ActionResetFilter(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      let src = eventparams;\n      let targ;\n      params.forEach(param => {\n        try {\n          let filterPosition = Object.keys(param).find(key => key == \"page.filterposition\");\n          filterPosition = param[filterPosition].replace(/'/g, \"\");\n          const filterCompInstance = page.compRefInstancesMap.get(filterPosition);\n          let gridPosition = Object.keys(param).find(key => key == \"page.gridposition\");\n          gridPosition = param[gridPosition].replace(/'/g, \"\");\n          const gridCompInstance = page.compRefInstancesMap.get(gridPosition);\n          filterCompInstance.reset();\n          var filterData = filterCompInstance.getValue(); //gridCompInstance.dataModel.apireqdata.wf = undefined;\n\n          targ = gridCompInstance.dataModel;\n          Object.keys(param).forEach(key => {\n            eval(`${key} = ${param[key]}`);\n          });\n          Object.assign(gridCompInstance.dataModel.apireqdata, filterData);\n          gridCompInstance.resetPagination();\n          gridCompInstance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n        } catch (e) {\n          console.error(\"ActionResetFilter error:\", e);\n        }\n      });\n    } // refresh widget data\n\n\n    ActionRefreshData(wigDataContext, params, eventparams) {\n      const instance = this.compRefInstancesMap.get(params.position);\n      instance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n    }\n\n    ActionDynamicMethod(wigDataContext, params, eventparams) {\n      try {\n        this.dynamicMethod = new Function(params)();\n        this.dynamicMethod(eventparams);\n      } catch (e) {\n        console.error(\"Error occured while compiling/executing dynamic method\", params, e);\n      }\n    } // redirect to redirection url in new window\n\n\n    ActionRedirect(wigDataContext, params, eventparams) {\n      const url = eventparams.redirectionurl + params.location;\n      window.open(url);\n    }\n\n    ActionSearch(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      let src = eventparams;\n      let targ;\n      params.forEach(param => {\n        try {\n          var position = Object.keys(param).find(key => key == \"page.position\");\n          let compInstance;\n\n          if (position) {\n            position = param[position].replace(/'/g, \"\");\n            compInstance = page.compRefInstancesMap.get(position);\n            targ = compInstance.dataModel;\n          }\n\n          Object.keys(param).forEach(key => {\n            // console.log(`key = param[key] :  ${key} = ${param[key]}`);\n            eval(`${key} = ${param[key]}`);\n          }); //compInstance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n        } catch (e) {\n          console.error(\"ActionSearch error:\", e);\n        }\n      });\n    }\n\n    ActionSetPageProp(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      let src = eventparams;\n      params.forEach(param => {\n        try {\n          Object.keys(param).forEach(key => {\n            eval(`${key} = ${param[key]}`);\n          });\n        } catch (e) {\n          console.error(\"ActionSetPageProp error:\", e);\n        }\n      });\n    }\n\n    ActionSetGlobaParams(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      let src = eventparams;\n      let targ;\n      params.forEach(param => {\n        try {\n          var position = Object.keys(param).find(key => key == \"page.position\");\n          let compInstance;\n\n          if (position) {\n            position = param[position].replace(/'/g, \"\");\n            compInstance = page.compRefInstancesMap.get(position);\n            targ = compInstance.dataModel;\n          }\n\n          Object.keys(param).forEach(key => {\n            targ.globalParameters.set(key, eval(param[key]));\n          });\n        } catch (e) {\n          console.error(\"ActionSetGlobaParams error:\", e);\n        }\n      });\n    }\n\n    ActionSetBreadcrumbItem(wigDataContext, params, eventparams) {\n      let src = eventparams;\n      let targ;\n      params.forEach(param => {\n        var position = Object.keys(param).find(key => key == \"position\");\n        position = param[position].replace(/'/g, \"\");\n        const compInstance = this.compRefInstancesMap.get(position);\n        targ = compInstance.dataModel;\n        eval(`compInstance.dataModel.items.push(${param[\"propname\"]})`);\n      });\n    }\n\n    ActionSetBreadcrumbsView(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      page.viewMap.forEach(element => {\n        if (params[0].breadcrumbCode == element.name) {\n          eval('this.' + element.value + \"=false\");\n        } else {\n          eval('this.' + element.value + \"=true\");\n        }\n      });\n    }\n\n    ActionDownload(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      let skipSpinner;\n      let reqData = Object();\n      reqData.data = Object();\n      reqData.data.nodelist = eventparams[params.downloadKey];\n      const downloadApiUrl = \"/v1/utility/downloadfile\";\n\n      if (params.skipSpinner) {\n        skipSpinner = params.skipSpinner;\n      }\n\n      if (!skipSpinner) {\n        page.showSpinner();\n      }\n\n      this._serverApi.download(downloadApiUrl, reqData.data).subscribe(response => {\n        if (!skipSpinner) {\n          page.hideSpinner();\n        }\n\n        this._saveFileService.saveFile(response, eventparams[params.fileNameKey]);\n      }, error => {\n        if (!skipSpinner) {\n          page.hideSpinner();\n        }\n\n        this._notificationService.error(\"Download failed\");\n      });\n    }\n\n    ActionExecutePageMethod(wigDataContext, params, eventparams) {\n      let page = this.pageInstance;\n      params.forEach(param => {\n        eval('page.' + param.methodname + '(eventparams,wigDataContext,params)');\n      });\n    }\n\n    ActionOnSubmitWithUserData(wigDataContext, params, eventparams, posteventaction) {\n      let page = this.pageInstance;\n      let isValid = true;\n      let skipSpinner;\n      var submitData = Object();\n      submitData.id = eventparams.id;\n      submitData.updateId = eventparams.updateId;\n      submitData.queryAction = eventparams.queryAction;\n      params.forEach(param => {\n        if (param.skipSpinner) {\n          skipSpinner = param.skipSpinner;\n        }\n      });\n\n      try {\n        if (!eventparams.positions && eventparams.positions.length == 0) {\n          console.error(\"ActionOnSubmitWithUserData error: submit data positions not found\");\n          return;\n        }\n\n        eventparams.positions.forEach(position => {\n          var compInstance = this.compRefInstancesMap.get(position);\n          const isvalid = compInstance.Validate();\n\n          if (!isvalid && isValid) {\n            isValid = isvalid;\n          }\n        });\n\n        if (!isValid) {\n          return;\n        }\n\n        eventparams.positions.forEach(position => {\n          var compInstance = this.compRefInstancesMap.get(position);\n\n          if (compInstance && compInstance.getValue) {\n            const data = compInstance.getValue();\n            Object.assign(submitData, data);\n          }\n        });\n        const apiUrlConst = eventparams.apiSubmitUrl;\n\n        if (!skipSpinner) {\n          page.showSpinner();\n        }\n\n        this._serverApi.post(apiUrlConst, submitData).subscribe(response => {\n          if (!skipSpinner) {\n            page.hideSpinner();\n          }\n\n          if (response) {\n            if (posteventaction && posteventaction.success) {\n              posteventaction.success.forEach(item => {\n                eventparams.reqData = submitData;\n                eventparams.responseData = response.data;\n\n                page._eventActionService.ActionHandler(wigDataContext, item, page, eventparams);\n              });\n            }\n          }\n\n          error => {\n            if (!skipSpinner) {\n              page.hideSpinner();\n            }\n\n            this._notificationService.error(\"Submit request failed\");\n          };\n        }, error => {\n          if (!skipSpinner) {\n            page.hideSpinner();\n          }\n\n          this._notificationService.error(\"Something went wrong!\");\n        });\n      } catch (e) {\n        console.error(\"ActionOnSubmitWithUserData error:\", e);\n      }\n    }\n\n    ActionOnFileUploadWithUserData(wigDataContext, params, eventparams, posteventaction) {\n      let page = this.pageInstance;\n      let skipSpinner;\n      var submitData = Object();\n      params.forEach(param => {\n        if (param.skipSpinner) {\n          skipSpinner = param.skipSpinner;\n        }\n      });\n      let filesData = eventparams.dataContext.fileData;\n      const formData = new FormData();\n\n      for (const file of filesData.files) {\n        formData.append('file', file);\n      }\n\n      try {\n        const apiUrlConst = wigDataContext.apiDataUrl;\n\n        if (!skipSpinner) {\n          page.showSpinner();\n        }\n\n        this._serverApi.upload(apiUrlConst, formData).subscribe(response => {\n          if (response && response.status == 'progress') {//todo implement progress bar\n          } else if (response) {\n            if (!skipSpinner) {\n              page.hideSpinner();\n            }\n\n            this._notificationService.success('File Uploaded');\n\n            if (posteventaction && posteventaction.success) {\n              posteventaction.success.forEach(item => {\n                eventparams.reqData = submitData;\n                eventparams.responseData = response;\n\n                page._eventActionService.ActionHandler(wigDataContext, item, page, eventparams);\n              });\n            }\n          }\n        }, error => {\n          if (!skipSpinner) {\n            page.hideSpinner();\n          }\n\n          this._notificationService.error(\"Upload request failed\");\n        });\n      } catch (e) {\n        console.error(\"ActionOnFileUploadWithUserData error:\", e);\n      }\n    }\n\n    ActionOnSubmit(wigDataContext, params, eventparams, posteventaction) {\n      let instance = this;\n      let page = this.pageInstance;\n      let src = eventparams;\n      let targ;\n      let req = Object();\n\n      try {\n        params.forEach(param => {\n          var position = Object.keys(param).find(key => key == \"page.position\");\n          let compInstance;\n\n          if (position) {\n            position = param[position].replace(/'/g, \"\");\n            compInstance = this.compRefInstancesMap.get(position);\n            targ = compInstance.dataModel;\n          }\n\n          Object.keys(param).forEach(key => {\n            if (key != \"page.position\") {\n              // console.log(`key = param[key] :  ${key} = ${param[key]}`);\n              eval(`${key} = ${param[key]}`);\n            }\n          });\n        });\n        const apiUrlConst = targ.submitProperties.apiSubmitUrl; //  req.id = targ.submitProperties.id\n\n        this._serverApi.post(apiUrlConst, req).subscribe(response => {\n          if (response) {\n            if (posteventaction && posteventaction.success) {\n              posteventaction.success.forEach(item => {\n                page._eventActionService.ActionHandler(wigDataContext, item, page, eventparams);\n              });\n            }\n          }\n        });\n      } catch (e) {\n        console.error(\"ActionOnSubmit error:\", e);\n      }\n    }\n\n    ActionHandler(wigDataContext, event, pageInstance, srcEventParams) {\n      let eventHandler = pageInstance._eventActionService.getEventHandler(event.action);\n\n      pageInstance.eventHandler = eventHandler;\n      pageInstance.eventHandler(wigDataContext, event.params, srcEventParams);\n    }\n\n    ngOnDestroy() {}\n\n  }\n\n  EventActionService.ɵfac = function EventActionService_Factory(t) {\n    return new (t || EventActionService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ServerApiInterfaceServiceService), i0.ɵɵinject(i3.NotificationService), i0.ɵɵinject(i4.SaveFileService));\n  };\n\n  EventActionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventActionService,\n    factory: EventActionService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventActionService;\n})();","map":null,"metadata":{},"sourceType":"module"}