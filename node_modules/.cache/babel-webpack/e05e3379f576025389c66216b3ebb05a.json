{"ast":null,"code":"import { FormArray, FormControl } from '@angular/forms';\nimport { FormModeConstant } from 'src/app/constants/widget-constants';\nimport { PermitConditionsItem } from './permit-conditions-tab.model';\nimport { GLOBAL_PARAM_KEY } from 'src/app/app-constants';\nimport { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport { SUGGESTED_CONDITIONS } from 'src/app/constants/db.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/server-api-interface-service.service\";\nimport * as i2 from \"src/app/services/app-repo-helper.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"src/app/services/session-storage.service\";\nimport * as i6 from \"src/app/services/validation.service\";\nimport * as i7 from \"@angular/flex-layout/flex\";\nimport * as i8 from \"@angular/material/checkbox\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/expansion\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/input\";\n\nfunction PermitConditionsTabComponent_div_14_div_3_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵelementStart(1, \"label\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r3 = i0.ɵɵnextContext().index;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.getConditionsFormGroup(i_r3).controls.code.value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.getConditionsFormGroup(i_r3).controls.description.value, \" \");\n  }\n}\n\nfunction PermitConditionsTabComponent_div_14_div_3_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵelementStart(1, \"label\", 24);\n    i0.ɵɵtext(2, \"Standard Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r3 = i0.ɵɵnextContext().index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r5.getConditionsFormGroup(i_r3).controls.suggestedText.value);\n  }\n}\n\nfunction PermitConditionsTabComponent_div_14_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-expansion-panel\", 12);\n    i0.ɵɵelementStart(2, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(3, \"div\", 13);\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 14);\n    i0.ɵɵlistener(\"click\", function PermitConditionsTabComponent_div_14_div_3_Template_mat_checkbox_click_4_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, PermitConditionsTabComponent_div_14_div_3_div_5_Template, 5, 2, \"div\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"hr\");\n    i0.ɵɵelementStart(7, \"div\", 16);\n    i0.ɵɵelementStart(8, \"div\", 17);\n    i0.ɵɵtemplate(9, PermitConditionsTabComponent_div_14_div_3_div_9_Template, 5, 1, \"div\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 17);\n    i0.ɵɵelementStart(11, \"mat-form-field\", 19);\n    i0.ɵɵelementStart(12, \"mat-label\");\n    i0.ɵɵtext(13, \"Comment \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"textarea\", 20);\n    i0.ɵɵelementStart(15, \"mat-error\");\n    i0.ɵɵtext(16, \"Field must be valid\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", data_r2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.getConditionsFormGroup(i_r3).controls.suggestedText.value);\n  }\n}\n\nfunction PermitConditionsTabComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"div\", 10);\n    i0.ɵɵtemplate(3, PermitConditionsTabComponent_div_14_div_3_Template, 17, 3, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.conditionsFormArray == null ? null : ctx_r0.conditionsFormArray.controls);\n  }\n}\n\nexport let PermitConditionsTabComponent = /*#__PURE__*/(() => {\n  class PermitConditionsTabComponent extends WidgetComponentBase {\n    constructor(_serverApi, _appRepoHelperService, _router, fb, _sessionStorageService, _validationService) {\n      super(_serverApi, _validationService);\n      this._serverApi = _serverApi;\n      this._appRepoHelperService = _appRepoHelperService;\n      this._router = _router;\n      this.fb = fb;\n      this._sessionStorageService = _sessionStorageService;\n      this._validationService = _validationService;\n    }\n\n    ngOnInit() {\n      this.wgFormGroup = this.fb.group({\n        conditions: new FormArray([])\n      });\n      this.wgOnInit();\n    }\n\n    getControlData() {\n      let response = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.CONDITIONS);\n\n      if (response) {\n        return new Promise((resolve, reject) => {\n          if (response) {\n            resolve(response);\n          } else {\n            reject(null);\n          }\n        });\n      } else {\n        let appId = this.dataModel.globalParameters.get('applicationId');\n        return this.wgAPIMethodGet(`/api/v1/applications/${appId}`);\n      }\n    }\n\n    convertData(response) {\n      var _a;\n\n      if (response) {\n        const conditions = this.wgFormGroup.controls.conditions;\n\n        for (let i = 0; i < ((_a = response.conditions) === null || _a === void 0 ? void 0 : _a.length); i++) {\n          for (let j = 0; j < this.dataModel.data.conditions.length; j++) {\n            if (response.conditions[i].condition == this.dataModel.data.conditions[j].code) {\n              this.dataModel.data.conditions[j].comment = response.conditions[i].comment;\n              const conditions = this.wgFormGroup.controls.conditions;\n              let conditionFG = conditions.controls[j];\n              conditionFG.patchValue({\n                selectCondition: true,\n                comment: this.dataModel.data.conditions[j].comment\n              });\n            }\n          }\n        }\n\n        for (let j = 0; j < this.dataModel.data.conditions.length; j++) {\n          if (this.dataModel.mode == FormModeConstant.ADD) {\n            let respform = this.dataModel.globalParameters.get(GLOBAL_PARAM_KEY.PERMIT_FORM);\n            const conditions = this.wgFormGroup.controls.conditions;\n\n            if (respform.trafficManagementType == SUGGESTED_CONDITIONS.ROAD_CLOSURE || respform.ttro_requiredFlag == Boolean(SUGGESTED_CONDITIONS.TTRO_REQUIRED_FLAG)) {\n              if (this.dataModel.data.conditions[j].code == 'NCT07a') {\n                let conditionFG = conditions.controls[j];\n                conditionFG.patchValue({\n                  selectCondition: true\n                });\n              }\n            } else {\n              if (this.dataModel.data.conditions[j].code == 'NCT07a') {\n                let conditionFG = conditions.controls[j];\n                conditionFG.patchValue({\n                  selectCondition: false\n                });\n              }\n            }\n\n            if (respform.trafficManagementType == SUGGESTED_CONDITIONS.MULTI_WAY_SIGNALS || respform.trafficManagementType == SUGGESTED_CONDITIONS.TWO_WAY_SIGNALS) {\n              if (this.dataModel.data.conditions[j].code == 'NCT08a') {\n                let conditionFG = conditions.controls[j];\n                conditionFG.patchValue({\n                  selectCondition: true\n                });\n              }\n\n              if (this.dataModel.data.conditions[j].code == 'NCT09c') {\n                let conditionFG = conditions.controls[j];\n                conditionFG.patchValue({\n                  selectCondition: true\n                });\n              }\n            } else {\n              if (this.dataModel.data.conditions[j].code == 'NCT08a') {\n                let conditionFG = conditions.controls[j];\n                conditionFG.patchValue({\n                  selectCondition: false\n                });\n              }\n\n              if (this.dataModel.data.conditions[j].code == 'NCT09c') {\n                let conditionFG = conditions.controls[j];\n                conditionFG.patchValue({\n                  selectCondition: false\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setMode() {}\n\n    setValue(responseDataModel) {}\n\n    validateFormAndEmitConditions() {}\n\n    getValue() {\n      let arrPermitCondition = [];\n      const conditions = this.wgFormGroup.controls.conditions;\n\n      for (let i = 0; i < conditions.length; i++) {\n        let condition = conditions.controls[i];\n\n        if (condition.controls.selectCondition.value) {\n          let permitCondition = new PermitConditionsItem();\n          permitCondition.condition = this.dataModel.data.conditions[i].code;\n          permitCondition.comment = condition.controls.comment.value;\n          arrPermitCondition.push(permitCondition);\n        }\n      }\n\n      let data = {\n        conditions: arrPermitCondition\n      };\n      return data;\n    }\n\n    setFieldData() {\n      return new Promise((resolve, reject) => {\n        this._serverApi.get(`/api/v1/permits/get-permit-conditions`).subscribe(response => {\n          try {\n            if (response) {\n              response.forEach(element => {\n                let comment = this.dataModel.mode == FormModeConstant.ADD ? element.suggested_text : null;\n                let conditionswgFormGroup = this.fb.group({\n                  // id: new FormControl(element.id),\n                  // code: new FormControl(element.code),\n                  // description:new FormControl(element.description),\n                  selectCondition: new FormControl(element.mandatory_flag),\n                  comment: new FormControl(comment),\n                  suggestedText: new FormControl(element.suggested_text),\n                  code: new FormControl(element.code),\n                  description: new FormControl(element.description)\n                });\n\n                if (this.dataModel.mode == FormModeConstant.ADD || this.dataModel.mode == FormModeConstant.EDIT) {\n                  if (element.mandatory_flag) {\n                    conditionswgFormGroup.controls['selectCondition'].disable();\n                  }\n                }\n\n                if (this.dataModel.mode == FormModeConstant.VIEW) {\n                  conditionswgFormGroup.controls['selectCondition'].disable();\n                  conditionswgFormGroup.controls['comment'].disable();\n                }\n\n                this.conditionsFormArray.push(conditionswgFormGroup);\n              });\n              this.dataModel.data.conditions = response; //Get SessionStored Permit Conditions\n              // let createPermitReqBody: any = null;\n              // if (this.dataModel.mode == FormModeConstant.EDIT) {\n              //   createPermitReqBody = this._appRepoHelperService.getNavigationData(NAVIGATION_DATA.EDIT_PERMIT);\n              // } else {\n              //   createPermitReqBody = this._appRepoHelperService.getNavigationData(NAVIGATION_DATA.CREATE_PERMIT);\n              // }\n              // if (\n              //   (this.dataModel.mode == FormModeConstant.ADD || this.dataModel.mode == FormModeConstant.EDIT) &&\n              //   createPermitReqBody &&\n              //   createPermitReqBody.conditions &&\n              //   createPermitReqBody.conditions.length > 0\n              // ) {\n              //   const conditions: FormArray = this.wgFormGroup.controls.conditions as FormArray;\n              //   for (let i = 0; i < response.length; i++) {\n              //     for (let j = 0; j < createPermitReqBody.conditions.length; j++) {\n              //       if (response[i].code == createPermitReqBody.conditions[j].condition) {\n              //         let condition = conditions.controls[i] as FormGroup;\n              //         condition.controls.selectCondition.setValue(true);\n              //         condition.controls.comment.setValue(createPermitReqBody.conditions[j].comment);\n              //       }\n              //     }\n              //   }\n              // }\n\n              resolve(response);\n            }\n          } catch (e) {\n            reject(e);\n          }\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    get conditionsFormArray() {\n      return this.wgFormGroup.get('conditions');\n    }\n\n    getConditionsFormGroup(index) {\n      const formGroup = this.conditionsFormArray.controls[index];\n      return formGroup;\n    }\n\n  }\n\n  PermitConditionsTabComponent.ɵfac = function PermitConditionsTabComponent_Factory(t) {\n    return new (t || PermitConditionsTabComponent)(i0.ɵɵdirectiveInject(i1.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i2.AppRepoHelperService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.SessionStorageService), i0.ɵɵdirectiveInject(i6.ValidationService));\n  };\n\n  PermitConditionsTabComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PermitConditionsTabComponent,\n    selectors: [[\"app-permit-conditions-tab\"]],\n    inputs: {\n      dataModel: \"dataModel\",\n      configModel: \"configModel\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 15,\n    vars: 4,\n    consts: [[3, \"formGroup\"], [1, \"conditions-container\"], [\"fxLayout\", \"row\", \"fxLayout.lt-sm\", \"column\", \"fxLayoutAlign\", \"space-between center\", \"fxLayoutGap\", \"50px\", 1, \"conditions-info\"], [1, \"conditions-title\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"center center\", \"fxLayoutGap\", \"20px\"], [1, \"checkboxes\"], [\"disabled\", \"\", 3, \"checked\"], [\"class\", \"conditions-list\", 4, \"ngIf\"], [1, \"conditions-list\"], [1, \"single-condition\"], [\"formArrayName\", \"conditions\", 1, \"condition-list-grid\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroupName\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"center center\", \"fxLayoutGap\", \"10px\", 1, \"condition-wrapper\"], [\"aria-disabled\", \"apply\", \"formControlName\", \"selectCondition\", 3, \"click\"], [\"class\", \"condition-labels\", \"fxLayout\", \"column\", \"fxLayoutAlign\", \"space-between start\", 4, \"ngIf\"], [\"fxLayout\", \"column\", \"fxLayoutAlign\", \"space-between stretch\", \"fxLayoutGap\", \"20px\", 1, \"condition-form\"], [\"fxFlex\", \"100\"], [\"class\", \"info-element\", 4, \"ngIf\"], [\"appearance\", \"outline\", \"fxFlex\", \"100\"], [\"matInput\", \"\", \"placeholder\", \"Enter your comment\", \"maxlength\", \"500\", \"formControlName\", \"comment\"], [\"fxLayout\", \"column\", \"fxLayoutAlign\", \"space-between start\", 1, \"condition-labels\"], [1, \"condition\"], [1, \"info-element\"], [\"for\", \"\", 1, \"standart-text\"]],\n    template: function PermitConditionsTabComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h2\");\n        i0.ɵɵtext(5, \"Confirm and amend as appropriate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"span\", 5);\n        i0.ɵɵelementStart(8, \"mat-checkbox\", 6);\n        i0.ɵɵtext(9, \"Selected\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"span\");\n        i0.ɵɵelementStart(11, \"mat-checkbox\", 6);\n        i0.ɵɵtext(12, \"Mandatory\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"hr\");\n        i0.ɵɵtemplate(14, PermitConditionsTabComponent_div_14_Template, 4, 1, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.wgFormGroup);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"checked\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"checked\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.conditionsFormArray == null ? null : ctx.conditionsFormArray.controls);\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i7.DefaultLayoutDirective, i7.DefaultLayoutAlignDirective, i7.DefaultLayoutGapDirective, i8.MatCheckbox, i9.NgIf, i4.FormArrayName, i9.NgForOf, i10.MatExpansionPanel, i4.FormGroupName, i10.MatExpansionPanelHeader, i4.NgControlStatus, i4.FormControlName, i7.DefaultFlexDirective, i11.MatFormField, i11.MatLabel, i12.MatInput, i4.DefaultValueAccessor, i4.MaxLengthValidator, i11.MatError],\n    styles: [\".conditions-container[_ngcontent-%COMP%]{background:#FFFFFF 0% 0% no-repeat padding-box;box-shadow:0 3px 4px #c1cbff3b;border-radius:4px;margin-top:15px;margin-bottom:30px;padding:15px 15px 30px}.conditions-info[_ngcontent-%COMP%]   .conditions-title[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font:normal normal bold 1.5rem Noto Sans;letter-spacing:0px;color:#706f6f;opacity:1;margin:0}.single-condition[_ngcontent-%COMP%]   label.condition[_ngcontent-%COMP%]{display:block;text-align:left;font:normal normal bold 1.3rem Noto Sans;letter-spacing:0px;color:#706f6f;text-transform:uppercase;margin-bottom:0;margin-top:0}.single-condition[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:block;text-align:left;font:normal normal normal 1.2rem Noto Sans;letter-spacing:0px;color:#838296;margin-bottom:0}.single-condition[_ngcontent-%COMP%]   hr[_ngcontent-%COMP%]{margin-top:0}mat-expansion-panel[_ngcontent-%COMP%]{margin:10px}.condition-list-grid[_ngcontent-%COMP%]{display:grid;grid-template-columns:50% 50%}.single-condition[_ngcontent-%COMP%]   label.standart-text[_ngcontent-%COMP%]{display:block;text-align:left;font:normal normal bold 1.3rem Noto Sans;letter-spacing:0px;color:#706f6f;margin-bottom:0;margin-top:0}  .mat-checkbox-checked.mat-accent.mat-checkbox-disabled .mat-checkbox-background, .mat-checkbox-indeterminate.mat-accent[_ngcontent-%COMP%]   .mat-checkbox-background[_ngcontent-%COMP%]{background-color:var(--dark-gray-text-color)!important}.checkboxes[_ngcontent-%COMP%]     .mat-checkbox-checked.mat-accent.mat-checkbox-disabled .mat-checkbox-background, .mat-checkbox-indeterminate.mat-accent[_ngcontent-%COMP%]   .mat-checkbox-background[_ngcontent-%COMP%]{background-color:var(--theme-color)!important}\"]\n  });\n  return PermitConditionsTabComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}