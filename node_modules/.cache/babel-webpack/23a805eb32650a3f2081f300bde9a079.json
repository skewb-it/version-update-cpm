{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { WidgetConstants } from 'src/app/constants/widget-constants'; // rename to widgetpagebase\n\nexport class WidgetPageBase {\n  constructor(_baseServerApiBase, _baseEventActionServiceBase, _baseSessionStorageService, _baseRouter, _baseSpinner) {\n    this._baseServerApiBase = _baseServerApiBase;\n    this._baseEventActionServiceBase = _baseEventActionServiceBase;\n    this._baseSessionStorageService = _baseSessionStorageService;\n    this._baseRouter = _baseRouter;\n    this._baseSpinner = _baseSpinner;\n    this.pageReq = {\n      \"page\": \"Operational Dashboard\"\n    };\n    this.compRefInstancesMap = new Map();\n    this.globalParameters = new Map();\n    this.pageDataApiUrl = '/v1/widget/getpagedata';\n    this.pageSubmitDataApiUrl = '/v1/widget/getpagesubmitdata';\n    this.requestCount = 0;\n    this.pageInstance = this;\n    if (!_baseRouter) return;\n    if (!_baseSessionStorageService) return;\n\n    _baseRouter.events.forEach(event => {\n      // set data to global parameters\n      if (event instanceof NavigationStart) {\n        let navigation_data_keys = this.globalParameters.get(\"navigationDataKeys\");\n        if (!navigation_data_keys) return;\n        let navigationData = new Map();\n        navigation_data_keys.forEach(element => {\n          navigationData.set(element, this.globalParameters.get(element));\n        });\n\n        _baseSessionStorageService.setNavigationData(navigationData);\n      }\n    });\n\n    this.initNavigationData();\n  }\n\n  initBase() {// this.getSubmitData().then(() => {\n    //     this.getPageData();\n    // });\n  }\n\n  initNavigationData() {\n    if (!this._baseSessionStorageService) return;\n\n    let navigationData = this._baseSessionStorageService.getNavigationData();\n\n    if (!navigationData || !(navigationData instanceof Map)) return;\n    navigationData.forEach((value, key) => {\n      this.globalParameters.set(key, value);\n    });\n  } // getSubmitData() {\n  //     return new Promise((resolve, reject) => {\n  //         this._serverApi.post<any, any>(this.pageSubmitDataApiUrl, this.pageReq).subscribe(response => {\n  //             if (response) {\n  //                 this.submitData = response;\n  //             }\n  //             resolve();\n  //         }, error => {\n  //             switch (error.code) {\n  //                 case ErrorCodes.INVALID_USER_ACCESS:\n  //                     //this._notificationService.error('Invalid User Access');\n  //                     break;\n  //             }\n  //             reject();\n  //         });\n  //     });\n  // }\n  // getPageData() {\n  //     this._serverApi.post<any, any>(this.pageDataApiUrl, this.pageReq).subscribe(response => {\n  //         if (response) {\n  //             this.compRefInstancesMap.clear();\n  //             response.forEach((widgetItem) => {\n  //                 try {\n  //                     if (widgetItem.position == 'page') {\n  //                         let properties = JSON.parse(widgetItem.properties);\n  //                         this.pageprop = properties;\n  //                     } else {\n  //                         let placeHoldersFiltered = this.placeHolders.filter((item) => item.viewContainerRef.element.nativeElement.id == widgetItem.position)\n  //                         if (placeHoldersFiltered.length == 0) { return; }\n  //                         let placeHolder = placeHoldersFiltered[0];\n  //                         let builderResult = this._componentBuilderServiceBase.CreateComponet(widgetItem.widget, placeHolder)\n  //                         if (!builderResult.isSuccess) { return; }\n  //                         this.compRefInstancesMap.set(widgetItem.position, builderResult.componentRef.instance)\n  //                         let properties = JSON.parse(widgetItem.properties);\n  //                         builderResult.componentRef.instance.dataModel = this.ObjectDeepAssign(builderResult.componentRef.instance.dataModel, properties);\n  //                         const submitData = this.submitData.filter(item => item.position == widgetItem.position);\n  //                         let submitDataItem = submitData[0];\n  //                         // widget submit data properties mapping\n  //                         if (builderResult.componentRef.instance.dataModel.submitProperties && submitDataItem) {\n  //                             // if (submitData.length == 0) {\n  //                             //     console.log(widgetItem.position)\n  //                             //     return;\n  //                             // }\n  //                             const submitProperties = JSON.parse(submitDataItem.properties);\n  //                             const dataPositions = JSON.parse(submitDataItem.datapositions);\n  //                             builderResult.componentRef.instance.dataModel.submitProperties = submitProperties;\n  //                             Object.assign(builderResult.componentRef.instance.dataModel.submitProperties, dataPositions);\n  //                             builderResult.componentRef.instance.dataModel.submitProperties.id = submitDataItem.id;\n  //                             builderResult.componentRef.instance.dataModel.submitProperties.submitcode = submitDataItem.submitcode;\n  //                         }\n  //                         builderResult.componentRef.instance.dataModel.widgetinstanceid = widgetItem.id\n  //                         builderResult.componentRef.instance.dataModel.globalParameters = this.globalParameters;\n  //                         if (widgetItem.eventactions) {\n  //                             let eventActionsMap = new Map(JSON.parse(widgetItem.eventactions))\n  //                             builderResult.componentRef.instance.configModel.EventAction = eventActionsMap;\n  //                         }\n  //                         builderResult.componentRef.instance.configModel.EventAction.forEach((events: any, eventName: string) => {\n  //                             builderResult.componentRef.instance.configModel.CompToCaller.addListener(eventName, (eventparams) => {\n  //                                 events.forEach(eventItem => {\n  //                                     this.componentEventHandler(builderResult.componentRef.instance.dataModel,eventItem, eventparams)\n  //                                 });\n  //                             }\n  //                             );\n  //                         });\n  //                         builderResult.componentRef.instance.configModel.CompToCaller.addListener(WidgetConstants.ON_REQUEST, (eventparams) => {\n  //                                 this.pageEventHandler(WidgetConstants.ON_REQUEST, eventparams)\n  //                         });\n  //                         builderResult.componentRef.instance.configModel.CompToCaller.addListener(WidgetConstants.ON_REQUEST_COMPLETED, (eventparams) => {\n  //                             this.pageEventHandler(WidgetConstants.ON_REQUEST_COMPLETED, eventparams)\n  //                         });\n  //                         if (builderResult.componentRef.instance.InitComponent) {\n  //                             builderResult.componentRef.instance.InitComponent();\n  //                         }\n  //                     }\n  //                 } catch (e) {\n  //                     console.error(e);\n  //                     console.log(\"Error widget:\", widgetItem)\n  //                 }\n  //             });\n  //             // console.log(\"compRefInstancesMap\", this.compRefInstancesMap);\n  //         }\n  //     }, error => {\n  //         switch (error.code) {\n  //             case ErrorCodes.INVALID_USER_ACCESS:\n  //                 //this._notificationService.error('Invalid User Access');\n  //                 break;\n  //         }\n  //     });\n  // }\n\n\n  ObjectDeepAssign(target, source) {\n    let output = Object.assign({}, target);\n    Object.keys(source).forEach(key => {\n      if (Object.prototype.toString.call(source[key]) == '[object Object]') {\n        if (target[key]) {\n          const obj = this.ObjectDeepAssign(target[key], source[key]);\n          Object.assign(output, {\n            [key]: obj\n          });\n        } else {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n    return output;\n  }\n\n  componentEventHandler(wigDataContext, eventItem, eventparams) {\n    this.eventHandler = this._baseEventActionServiceBase.getEventHandler(eventItem.action);\n    this.eventHandler(wigDataContext, eventItem.params, eventparams, eventItem.posteventaction); //Executing method in current context\n  }\n\n  pageEventHandler(eventItem, eventparams) {\n    switch (eventItem) {\n      case WidgetConstants.ON_REQUEST:\n        this.showSpinner();\n        break;\n\n      case WidgetConstants.ON_REQUEST_COMPLETED:\n        this.hideSpinner();\n        break;\n    }\n  }\n\n  showSpinner() {\n    if (this._baseSpinner) {\n      this.requestCount++;\n\n      this._baseSpinner.show();\n    }\n  }\n\n  hideSpinner() {\n    if (this._baseSpinner) {\n      this.requestCount--;\n\n      if (this.requestCount == 0) {\n        this._baseSpinner.hide();\n      }\n    }\n  }\n\n  RefreshData() {\n    this.compRefInstancesMap.forEach(instance => {\n      instance.configModel.CallerToComp.emit(WidgetConstants.CALLER_TO_COMP_REFRESH_DATA);\n    });\n  }\n\n  removeListeners() {\n    this.compRefInstancesMap.forEach(instance => {\n      instance.configModel.CompToCaller.removeAllListeners();\n    });\n  }\n\n  removeListener(configModel) {\n    configModel.CompToCaller.removeAllListeners();\n  }\n\n  OnPropChangedRemoveListeners() {\n    this.compRefInstancesMap.forEach(instance => {\n      instance.configModel.CompToCaller.removeAllListeners();\n    });\n  } // async onSelectedWFPropChange() {\n  //     await this.OnPropChangedRemoveListeners();\n  //     await this.clearPlaceHolderRef();\n  //     this.getPageData();\n  // }\n  // clearPlaceHolderRef() {\n  //     this.placeHolders.forEach((pRef) => {\n  //         let viewContainerRef = pRef.viewContainerRef;\n  //         viewContainerRef.clear();\n  //     })\n  // }\n  // add event listener\n\n\n  addEventListener(eventActions, dataModel, configModel) {\n    if (eventActions) {\n      configModel.EventAction = new Map(eventActions);\n      configModel.EventAction.forEach((events, eventName) => {\n        configModel.CompToCaller.addListener(eventName, eventparams => {\n          events.forEach(eventItem => {\n            this.componentEventHandler(dataModel, eventItem, eventparams);\n          });\n        });\n      });\n    } // add listner for spinner on Request / On Request Completed\n\n\n    configModel.CompToCaller.addListener(WidgetConstants.ON_REQUEST, eventparams => {\n      this.pageEventHandler(WidgetConstants.ON_REQUEST, eventparams);\n    });\n    configModel.CompToCaller.addListener(WidgetConstants.ON_REQUEST_COMPLETED, eventparams => {\n      this.pageEventHandler(WidgetConstants.ON_REQUEST_COMPLETED, eventparams);\n    });\n  }\n\n  setGlobalParams(dataModel) {\n    if (this.globalParameters) {\n      dataModel.globalParameters = new Map(this.globalParameters);\n    }\n  }\n\n  pageAPIMethodPut(apiDataUrl, requestData) {\n    this.showSpinner();\n    return new Promise((resolve, reject) => {\n      this._baseServerApiBase.put(apiDataUrl, requestData).subscribe(response => {\n        this.hideSpinner();\n\n        try {\n          if (response) {\n            resolve(response);\n          }\n        } catch (e) {}\n      }, error => {\n        this.hideSpinner();\n        reject();\n      });\n    });\n  }\n\n  pageAPIMethodPost(apiDataUrl, requestData) {\n    this.showSpinner();\n    return new Promise((resolve, reject) => {\n      this._baseServerApiBase.post(apiDataUrl, requestData).subscribe(response => {\n        this.hideSpinner();\n\n        try {\n          if (response) {\n            resolve(response);\n          }\n        } catch (e) {}\n      }, error => {\n        this.hideSpinner();\n        reject();\n      });\n    });\n  }\n\n  pageAPIMethodGet(apiDataUrl, requestParam) {\n    this.showSpinner();\n    return new Promise((resolve, reject) => {\n      this._baseServerApiBase.get(apiDataUrl, requestParam).subscribe(response => {\n        this.hideSpinner();\n\n        try {\n          if (response) {\n            resolve(response);\n          }\n        } catch (e) {}\n      }, error => {\n        this.hideSpinner();\n        reject();\n      });\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}