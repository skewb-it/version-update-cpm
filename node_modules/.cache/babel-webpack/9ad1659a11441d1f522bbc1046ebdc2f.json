{"ast":null,"code":"import { HttpHeaders, HttpParams, HttpEventType } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class ServerAPIErrorModel {\n  constructor(handled, error) {\n    this.handled = handled;\n    this.error = error;\n  }\n\n}\nexport let ServerApiInterfaceServiceService = /*#__PURE__*/(() => {\n  class ServerApiInterfaceServiceService {\n    constructor(http, _sessionStorageService) {\n      this.http = http;\n      this._sessionStorageService = _sessionStorageService;\n    }\n\n    get(url, queryParams) {\n      let httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n\n      if (queryParams) {\n        httpOptions['params'] = queryParams;\n      }\n\n      return this.http.get(environment.baseurl + url, httpOptions);\n    }\n\n    getWithCustomBaseUrl(url, queryParams) {\n      let httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n\n      if (queryParams) {\n        httpOptions['params'] = queryParams;\n      }\n\n      return this.http.get(url, httpOptions);\n    }\n\n    post(url, request, headers) {\n      let httpOptions = {\n        headers: headers ? headers : new HttpHeaders(),\n        params: new HttpParams()\n      };\n      return this.http.post(environment.baseurl + url, request, httpOptions);\n    }\n\n    delete(url, headers) {\n      let httpOptions = {\n        headers: headers ? headers : new HttpHeaders(),\n        params: new HttpParams()\n      };\n      return this.http.delete(environment.baseurl + url, httpOptions);\n    }\n\n    put(url, request, headers) {\n      let httpOptions = {\n        headers: headers ? headers : new HttpHeaders(),\n        params: new HttpParams()\n      };\n      return this.http.put(environment.baseurl + url, request, httpOptions);\n    }\n\n    upload(url, data) {\n      const uploadURL = environment.baseurl + url;\n      return this.http.post(uploadURL, data, {\n        reportProgress: true,\n        observe: 'events'\n      }).pipe(map(event => {\n        switch (event.type) {\n          case HttpEventType.UploadProgress:\n            const progress = Math.round(100 * event.loaded / event.total);\n            return {\n              status: 'progress',\n              message: progress\n            };\n\n          case HttpEventType.Response:\n            return event.body;\n\n          case HttpEventType.Sent:\n            console.log(event);\n            break;\n            break;\n\n          default:\n            console.log(`Unhandled event: ${event.type}`);\n        }\n      }));\n    }\n\n    download(url, queryParams) {\n      return this.http.get(environment.baseurl + url + '?reqparams=' + JSON.stringify(queryParams), {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        responseType: 'blob'\n      });\n    }\n\n    downloadZipFile(url, queryParams) {\n      return this.http.get(environment.baseurl + url + '?reqparams=' + JSON.stringify(queryParams), {\n        responseType: 'arraybuffer'\n      });\n    }\n\n    downloadFile(url, queryParams) {\n      return this.http.get(environment.baseurl + url + '?reqparams=' + JSON.stringify(queryParams), {\n        responseType: 'arraybuffer'\n      });\n    }\n\n    postMap(url, request, headers) {\n      let httpOptions = {\n        headers: headers ? headers : new HttpHeaders(),\n        params: new HttpParams()\n      };\n      let baseUrl = environment.mapBaseUrl;\n      return this.http.post(baseUrl + url, request, httpOptions);\n    }\n\n  }\n\n  ServerApiInterfaceServiceService.ɵfac = function ServerApiInterfaceServiceService_Factory(t) {\n    return new (t || ServerApiInterfaceServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n  };\n\n  ServerApiInterfaceServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServerApiInterfaceServiceService,\n    factory: ServerApiInterfaceServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServerApiInterfaceServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}