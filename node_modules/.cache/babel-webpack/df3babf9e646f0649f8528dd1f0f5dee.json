{"ast":null,"code":"import { WidgetComponentBase } from 'src/app/utility/widget/widget-utility/widget-component-base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/server-api-interface-service.service\";\nimport * as i2 from \"src/app/services/validation.service\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nexport let PerformanceChartComponent = /*#__PURE__*/(() => {\n  class PerformanceChartComponent extends WidgetComponentBase {\n    constructor(_serverApiBase, _validationService, _spinner) {\n      super(_serverApiBase, _validationService);\n      this._serverApiBase = _serverApiBase;\n      this._validationService = _validationService;\n      this._spinner = _spinner;\n    }\n\n    ngOnInit() {\n      this.wgOnInit();\n      this.addBarSpans();\n    }\n\n    addBarSpans() {\n      // this.dataModel.data = [];\n      // this.dataModel.data.push(this.Data);\n      const bars = document.getElementsByClassName('equalizer-bar');\n      const equalizer = document.getElementById('equalizer');\n      equalizer.innerHTML = '';\n\n      for (let i = 0; i < this.dataModel.data.length; i++) {\n        let html = '';\n\n        for (let j = 0; j < 10; j++) {\n          let tempnumber = this.dataModel.data[i][2].substring(0, this.dataModel.data[i][2].length - 1);\n          let number = Number((tempnumber / 10).toFixed());\n\n          if (j < number) {\n            if (this.dataModel.data[i][0] == 'FPNs') html += '<span class=\"immediate\"></span>';else if (this.dataModel.data[i][0] == 'S74') html += '<span class=\"minor\"></span>';else if (this.dataModel.data[i][0] == 'Permit Charges') html += '<span class=\"standard\"></span>';else if (this.dataModel.data[i][0] == 'Defect Charges') html += '<span class=\"major\"></span>';else if (this.dataModel.data[i][0] == 'Miscellanous Charges') html += '<span class=\"major\"></span>';else if (this.dataModel.data[i][0] == 'Sample Inspection Charges') html += '<span class=\"major\"></span>';else if (this.dataModel.data[i][0] == 'Recharges') html += '<span class=\"major\"></span>';else html += '<span class=\"active\"></span>';\n          } else {\n            html += '<span></span>';\n          }\n        }\n\n        equalizer.innerHTML += `<div class=\"equalizer-bar-wrapper\"><div class=\"equalizer-bar\">` + html + `</div><div class=\"text-center\" ><span>` + this.dataModel.data[i][0] + `</span><br><span>` + this.dataModel.data[i][2] + `</span></div></div>`;\n      }\n    }\n\n    ngAfterViewInit() {}\n\n    setFieldData() {}\n\n    getControlData() {\n      let url = this.dataModel.widgettableApi;\n\n      this._spinner.show();\n\n      return this.wgAPIMethodGet(url);\n    }\n\n    convertData(response) {\n      this._spinner.hide();\n\n      this.dataModel.data = []; // this.dataModel.data=this.Data;\n      // this.dataModel.data = response.groups;\n\n      response.groups[0].items.forEach((element, index) => {\n        let temp = [];\n        temp.push(element.name);\n        temp.push(element.data);\n        temp.push(element.display_data); //  temp[index][0]=element.name;\n        //  temp[index][1]=element.data;\n\n        this.dataModel.data.push(temp);\n      });\n      this.dataModel.total = response.groups[0].total;\n      console.log('chart datamodel', this.dataModel.data);\n      this.addBarSpans();\n    }\n\n    setMode(responseDataModel) {// throw new Error('Method not implemented.');\n    }\n\n    setValue(responseDataModel) {// throw new Error('Method not implemented.');\n    }\n\n  }\n\n  PerformanceChartComponent.ɵfac = function PerformanceChartComponent_Factory(t) {\n    return new (t || PerformanceChartComponent)(i0.ɵɵdirectiveInject(i1.ServerApiInterfaceServiceService), i0.ɵɵdirectiveInject(i2.ValidationService), i0.ɵɵdirectiveInject(i3.NgxSpinnerService));\n  };\n\n  PerformanceChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PerformanceChartComponent,\n    selectors: [[\"app-performance-chart\"]],\n    inputs: {\n      title: \"title\",\n      isInitalstate: \"isInitalstate\",\n      dataModel: \"dataModel\",\n      configModel: \"configModel\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 11,\n    vars: 1,\n    consts: [[1, \"text-center\", \"mb-2\", \"headingtitle\"], [1, \"col-md-12\", \"pr-md-0\", \"d-flex\", \"justify-content-between\", \"align-items-center\", \"border-grey\"], [1, \"font-weight-bold\", \"py-4\"], [1, \"total-tab\"], [1, \"black-tab\"], [1, \"row\", \"align-items-center\"], [1, \"col-md-12\", \"mt-5\"], [\"id\", \"equalizer\", \"fxLayoutGap\", \"10px\", 1, \"equalizer\", 2, \"font-size\", \"12px\", \"font-weight\", \"500\"]],\n    template: function PerformanceChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \" Permits Distribution\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtext(4, \"Charges Processed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"span\", 4);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelement(10, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.dataModel.total);\n      }\n    },\n    directives: [i4.DefaultLayoutGapDirective],\n    styles: [\".equalizer[_ngcontent-%COMP%]{display:flex;justify-content:center}.border-grey[_ngcontent-%COMP%]{border:1px solid rgba(0,0,0,.3);border-radius:1rem}.total-tab[_ngcontent-%COMP%]{padding-right:1rem}.black-tab[_ngcontent-%COMP%]{background-color:#000;color:#fff;padding:0 6px;font-size:80%}.equalizer-bar[_ngcontent-%COMP%]{width:3.5rem;margin:0 10px;display:flex;flex-direction:column-reverse}span[_ngcontent-%COMP%]{display:block;border-radius:4px;width:100%;background:gray;transition:.2s ease all;opacity:1}p[_ngcontent-%COMP%]{margin-top:0!important}.info[_ngcontent-%COMP%]{text-align:center;font-size:60px!important}span.active[_ngcontent-%COMP%]{background:rgb(238,255,0)}.headingtitle[_ngcontent-%COMP%]{font-size:14px;padding-bottom:3px;color:var(--theme-color);font-weight:800}.chartTotal[_ngcontent-%COMP%]{font-size:22px;font-weight:800}\"]\n  });\n  return PerformanceChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}