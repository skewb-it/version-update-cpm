{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-text-diff/lib/ngx-text-diff.utils.ts","ng://ngx-text-diff/lib/ngx-text-diff.service.ts","ng://ngx-text-diff/lib/ngx-text-diff-container.directive.ts","ng://ngx-text-diff/lib/ngx-text-diff.component.ts","ng://ngx-text-diff/lib/loader-spinner/loader-spinner.component.ts","ng://ngx-text-diff/lib/format-line.pipe.ts","ng://ngx-text-diff/lib/ngx-text-diff.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","push","isEmpty","val","keys","NgxTextDiffService","initParser","prototype","diffParser","diff_match_patch","getDiffsByLines","left","right","_this","a","diff_linesToChars_","lineText1","chars1","lineText2","chars2","linesArray","lineArray","diffs","diff_main","diff_charsToLines_","rows","formatOutput","lineLeft","lineRight","reduce","diff","diffType","diffValue","leftDiffRow","rightDiffRow","leftContent","rightContent","rowTemp","DIFF_EQUAL","split","filter","index","array","forEach","line","lineNumber","lineContent","lineDiffs","prefix","belongTo","hasDiffs","numDiffs","DIFF_DELETE","find","row","content","isDiff","getDiffParts","countDiffs","DIFF_INSERT","diffCount","compareValue","diffParts","j","shared","Injectable","providedIn","ContainerDirective","_el","element","nativeElement","ElementRef","Input","Directive","selector","NgxTextDiffComponent","scrollService","cd","_hideMatchingLines","format","loading","showToolbar","showBtnToolbar","synchronizeScrolling","compareResults","EventEmitter","subscriptions","tableRows","filteredTableRows","tableRowsLineByLine","filteredTableRowsLineByLine","diffsCount","formatOptions","id","name","icon","hide","hideMatchingLinesChanged","ngOnInit","diffContent","subscribe","renderDiffs","detectChanges","catch","ngAfterViewInit","initScrollListener","ngOnDestroy","subscription","unsubscribe","hideMatchingLines","setDiffTableFormat","_a","_b","tableLineByLine","emitCompareResultsEvent","diffResults","hasDiff","rowsWithDiff","map","leftLineNumber","rightLineNumber","trackTableRows","undefined","trackDiffs","scrolled","scrollableEv","scrollableId_1","getElementRef","nonScrolledContainer","containers","container","scrollTo","top","measureScrollOffset","ScrollDispatcher","ChangeDetectorRef","ViewChildren","QueryList","Observable","Output","Component","template","LoaderSpinnerComponent","active","FormatLinePipe","transform","replace","Pipe","NgxTextDiffModule","NgModule","imports","CommonModule","FormsModule","ScrollingModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const isNil = val => val === undefined || val === null;\r\nexport const isEmpty = val => val == null || !(Object.keys(val) || val).length || (Object.keys(val) || val).length === 0;\r\n","import { Injectable } from '@angular/core';\r\nimport { Diff, DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, diff_match_patch } from 'diff-match-patch';\r\nimport { DiffLineResult, DiffPart, DiffTableRowResult } from './ngx-text-diff.model';\r\nimport { isEmpty, isNil } from './ngx-text-diff.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxTextDiffService {\r\n  diffParser: diff_match_patch;\r\n\r\n  constructor() {\r\n    this.initParser();\r\n  }\r\n\r\n  private initParser() {\r\n    this.diffParser = new diff_match_patch();\r\n  }\r\n\r\n  getDiffsByLines(left: string, right: string): Promise<DiffTableRowResult[]> {\r\n    return new Promise<DiffTableRowResult[]>((resolve, reject) => {\r\n      const a = this.diffParser.diff_linesToChars_(left, right);\r\n      const lineText1 = a.chars1;\r\n      const lineText2 = a.chars2;\r\n      const linesArray = a.lineArray;\r\n      const diffs: Diff[] = this.diffParser.diff_main(lineText1, lineText2, true);\r\n      this.diffParser.diff_charsToLines_(diffs, linesArray);\r\n      const rows: DiffTableRowResult[] = this.formatOutput(diffs);\r\n      if (!rows) {\r\n        reject('Error');\r\n      }\r\n\r\n      resolve(rows);\r\n    });\r\n  }\r\n\r\n  private formatOutput(diffs: Diff[]): DiffTableRowResult[] {\r\n    let lineLeft = 1;\r\n    let lineRight = 1;\r\n    return diffs.reduce((rows: DiffTableRowResult[], diff: Diff) => {\r\n      if (!rows) {\r\n        rows = [];\r\n      }\r\n      const diffType: number = diff[0];\r\n      const diffValue: string = diff[1];\r\n      let leftDiffRow: DiffTableRowResult = null;\r\n      let rightDiffRow: DiffTableRowResult = null;\r\n      let leftContent: DiffLineResult = null;\r\n      let rightContent: DiffLineResult = null;\r\n      let rowTemp: DiffTableRowResult = null;\r\n      switch (diffType) {\r\n        case DIFF_EQUAL: // 0\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              leftContent = {\r\n                lineNumber: lineLeft,\r\n                lineContent: line,\r\n                lineDiffs: [],\r\n                prefix: ''\r\n              };\r\n              rightContent = {\r\n                lineNumber: lineRight,\r\n                lineContent: line,\r\n                lineDiffs: [],\r\n                prefix: ''\r\n              };\r\n              rowTemp = {\r\n                leftContent,\r\n                rightContent,\r\n                belongTo: 'both',\r\n                hasDiffs: false,\r\n                numDiffs: 0,\r\n              };\r\n              rows.push(rowTemp);\r\n              lineRight = lineRight + 1;\r\n              lineLeft = lineLeft + 1;\r\n            });\r\n          break;\r\n        case DIFF_DELETE: // -1\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              rightDiffRow = rows.find(\r\n                row => !row.leftContent && row.rightContent && row.rightContent.lineNumber === lineLeft && row.rightContent.prefix !== ''\r\n              );\r\n              leftContent = {\r\n                lineNumber: lineLeft,\r\n                lineContent: line,\r\n                lineDiffs: [{ content: line, isDiff: true }],\r\n                prefix: '-'\r\n              };\r\n              if (rightDiffRow) {\r\n                rightDiffRow.leftContent = leftContent;\r\n                rightDiffRow.leftContent.lineDiffs = this.getDiffParts(\r\n                  rightDiffRow.leftContent.lineContent,\r\n                  rightDiffRow.rightContent.lineContent\r\n                );\r\n                rightDiffRow.rightContent.lineDiffs = this.getDiffParts(\r\n                  rightDiffRow.rightContent.lineContent,\r\n                  rightDiffRow.leftContent.lineContent\r\n                );\r\n                rightDiffRow.belongTo = 'both';\r\n                rightDiffRow.numDiffs = this.countDiffs(rightDiffRow);\r\n              } else {\r\n                rows.push({\r\n                  leftContent,\r\n                  rightContent: null,\r\n                  hasDiffs: true,\r\n                  belongTo: 'left',\r\n                  numDiffs: 1,\r\n                });\r\n              }\r\n              lineLeft = lineLeft + 1;\r\n            });\r\n          break;\r\n        case DIFF_INSERT: // 1\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              leftDiffRow = rows.find(\r\n                row => row.leftContent && !row.rightContent && row.leftContent.lineNumber === lineRight && row.leftContent.prefix !== ''\r\n              );\r\n              rightContent = {\r\n                lineNumber: lineRight,\r\n                lineContent: line,\r\n                lineDiffs: [{ content: line, isDiff: true }],\r\n                prefix: '+'\r\n              };\r\n              if (leftDiffRow) {\r\n                leftDiffRow.rightContent = rightContent;\r\n                leftDiffRow.leftContent.lineDiffs = this.getDiffParts(\r\n                  leftDiffRow.leftContent.lineContent,\r\n                  leftDiffRow.rightContent.lineContent\r\n                );\r\n                leftDiffRow.rightContent.lineDiffs = this.getDiffParts(\r\n                  leftDiffRow.rightContent.lineContent,\r\n                  leftDiffRow.leftContent.lineContent\r\n                );\r\n                leftDiffRow.belongTo = 'both';\r\n                leftDiffRow.numDiffs = this.countDiffs(leftDiffRow);\r\n              } else {\r\n                rows.push({\r\n                  leftContent: null,\r\n                  rightContent,\r\n                  hasDiffs: true,\r\n                  belongTo: 'right',\r\n                  numDiffs: 1,\r\n                });\r\n              }\r\n              lineRight = lineRight + 1;\r\n            });\r\n          break;\r\n      }\r\n      return rows;\r\n    }, []);\r\n  }\r\n\r\n  private countDiffs(result: DiffTableRowResult): number {\r\n    let diffCount = 0;\r\n    if (result.leftContent) {\r\n      diffCount += result.leftContent.lineDiffs.filter(diff => diff.isDiff).length;\r\n    }\r\n    if (result.leftContent) {\r\n      diffCount += result.rightContent.lineDiffs.filter(diff => diff.isDiff).length;\r\n    }\r\n    return diffCount;\r\n  }\r\n\r\n  private getDiffParts(value: string, compareValue: string): DiffPart[] {\r\n    const diffParts: DiffPart[] = [];\r\n    let i = 0;\r\n    let j = 0;\r\n    let shared = '';\r\n    let diff = '';\r\n\r\n    while (i < value.length) {\r\n      if (value[i] === compareValue[j] && j < compareValue.length) {\r\n        if (diff !== '') {\r\n          diffParts.push({ content: diff, isDiff: true });\r\n          diff = '';\r\n        }\r\n        shared += value[i];\r\n      } else {\r\n        if (shared !== '') {\r\n          diffParts.push({ content: shared, isDiff: false });\r\n          shared = '';\r\n        }\r\n        diff += value[i];\r\n      }\r\n      i++;\r\n      j++;\r\n    }\r\n\r\n    if (diff !== '') {\r\n      diffParts.push({ content: diff, isDiff: true });\r\n    } else if (shared !== '') {\r\n      diffParts.push({ content: shared, isDiff: false });\r\n    }\r\n\r\n    return diffParts;\r\n  }\r\n}\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[tdContainer]',\r\n})\r\nexport class ContainerDirective {\r\n  @Input() id: string;\r\n\r\n  element: HTMLTableHeaderCellElement;\r\n\r\n  constructor(private _el: ElementRef) {\r\n    this.element = _el.nativeElement;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChildren,\r\n  QueryList,\r\n  AfterViewInit\r\n} from '@angular/core';\r\nimport { DiffContent, DiffPart, DiffTableFormat, DiffTableFormatOption, DiffTableRowResult, DiffResults } from './ngx-text-diff.model';\r\nimport { NgxTextDiffService } from './ngx-text-diff.service';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ContainerDirective } from './ngx-text-diff-container.directive';\r\nimport { ScrollDispatcher, CdkScrollable } from '@angular/cdk/scrolling';\r\n\r\n@Component({\r\n  selector: 'td-ngx-text-diff',\r\n  templateUrl: './ngx-text-diff.component.html',\r\n  styleUrls: ['./ngx-text-diff.component.css'],\r\n})\r\nexport class NgxTextDiffComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  private _hideMatchingLines = false;\r\n  @ViewChildren(ContainerDirective) containers: QueryList<ContainerDirective>;\r\n  @Input() format: DiffTableFormat = 'SideBySide';\r\n  @Input() left = '';\r\n  @Input() right = '';\r\n  @Input() diffContent: Observable<DiffContent>;\r\n  @Input() loading = false;\r\n  @Input() showToolbar = true;\r\n  @Input() showBtnToolbar = true;\r\n  @Input()\r\n  get hideMatchingLines() {\r\n    return this._hideMatchingLines;\r\n  }\r\n\r\n  set hideMatchingLines(hide: boolean) {\r\n    this.hideMatchingLinesChanged(hide);\r\n  }\r\n  @Input() outerContainerClass: string;\r\n  @Input() outerContainerStyle: any;\r\n  @Input() toolbarClass: string;\r\n  @Input() toolbarStyle: any;\r\n  @Input() compareRowsClass: string;\r\n  @Input() compareRowsStyle: any;\r\n  @Input() synchronizeScrolling = true;\r\n  @Output() compareResults = new EventEmitter<DiffResults>();\r\n  subscriptions: Subscription[] = [];\r\n  tableRows: DiffTableRowResult[] = [];\r\n  filteredTableRows: DiffTableRowResult[] = [];\r\n  tableRowsLineByLine: DiffTableRowResult[] = [];\r\n  filteredTableRowsLineByLine: DiffTableRowResult[] = [];\r\n  diffsCount = 0;\r\n\r\n  formatOptions: DiffTableFormatOption[] = [\r\n    {\r\n      id: 'side-by-side',\r\n      name: 'side-by-side',\r\n      label: 'Side by Side',\r\n      value: 'SideBySide',\r\n      icon: 'la-code',\r\n    },\r\n    {\r\n      id: 'line-by-line',\r\n      name: 'line-by-line',\r\n      label: 'Line by Line',\r\n      value: 'LineByLine',\r\n      icon: 'la-file-text',\r\n    },\r\n  ];\r\n\r\n  constructor(private scrollService: ScrollDispatcher, private diff: NgxTextDiffService, private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n    if (this.diffContent) {\r\n      this.subscriptions.push(\r\n        this.diffContent.subscribe(content => {\r\n          this.loading = true;\r\n          this.left = content.leftContent;\r\n          this.right = content.rightContent;\r\n          this.renderDiffs()\r\n            .then(() => {\r\n              this.cd.detectChanges();\r\n              this.loading = false;\r\n            })\r\n            .catch(() => (this.loading = false));\r\n        })\r\n      );\r\n    }\r\n    this.renderDiffs()\r\n      .then(() => (this.loading = false))\r\n      .catch(e => (this.loading = false));\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.initScrollListener();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n  }\r\n\r\n  hideMatchingLinesChanged(value: boolean) {\r\n    this._hideMatchingLines = value;\r\n    if (this.hideMatchingLines) {\r\n      this.filteredTableRows = this.tableRows.filter(\r\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\r\n      );\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine.filter(\r\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\r\n      );\r\n    } else {\r\n      this.filteredTableRows = this.tableRows;\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\r\n    }\r\n  }\r\n\r\n  setDiffTableFormat(format: DiffTableFormat) {\r\n    this.format = format;\r\n  }\r\n\r\n  async renderDiffs() {\r\n    try {\r\n      this.diffsCount = 0;\r\n      this.tableRows = await this.diff.getDiffsByLines(this.left, this.right);\r\n      this.tableRowsLineByLine = this.tableRows.reduce((tableLineByLine: DiffTableRowResult[], row: DiffTableRowResult) => {\r\n        if (!tableLineByLine) {\r\n          tableLineByLine = [];\r\n        }\r\n        if (row.hasDiffs) {\r\n          if (row.leftContent) {\r\n            tableLineByLine.push({\r\n              leftContent: row.leftContent,\r\n              rightContent: null,\r\n              belongTo: row.belongTo,\r\n              hasDiffs: true,\r\n              numDiffs: row.numDiffs,\r\n            });\r\n          }\r\n          if (row.rightContent) {\r\n            tableLineByLine.push({\r\n              leftContent: null,\r\n              rightContent: row.rightContent,\r\n              belongTo: row.belongTo,\r\n              hasDiffs: true,\r\n              numDiffs: row.numDiffs,\r\n            });\r\n          }\r\n        } else {\r\n          tableLineByLine.push(row);\r\n        }\r\n\r\n        return tableLineByLine;\r\n      }, []);\r\n      this.diffsCount = this.tableRows.filter(row => row.hasDiffs).length;\r\n      this.filteredTableRows = this.tableRows;\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\r\n      this.emitCompareResultsEvent();\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  emitCompareResultsEvent() {\r\n    const diffResults: DiffResults = {\r\n      hasDiff: this.diffsCount > 0,\r\n      diffsCount: this.diffsCount,\r\n      rowsWithDiff: this.tableRows\r\n        .filter(row => row.hasDiffs)\r\n        .map(row => ({\r\n          leftLineNumber: row.leftContent ? row.leftContent.lineNumber : null,\r\n          rightLineNumber: row.rightContent ? row.rightContent.lineNumber : null,\r\n          numDiffs: row.numDiffs,\r\n        })),\r\n    };\r\n\r\n    this.compareResults.next(diffResults);\r\n  }\r\n\r\n  trackTableRows(index, row: DiffTableRowResult) {\r\n    return row && row.leftContent ? row.leftContent.lineContent : row && row.rightContent ? row.rightContent.lineContent : undefined;\r\n  }\r\n\r\n  trackDiffs(index, diff: DiffPart) {\r\n    return diff && diff.content ? diff.content : undefined;\r\n  }\r\n\r\n  private initScrollListener() {\r\n    this.subscriptions.push(this.scrollService.scrolled().subscribe((scrollableEv: CdkScrollable) => {\r\n      if (scrollableEv && this.synchronizeScrolling) {\r\n        const scrollableId = scrollableEv.getElementRef().nativeElement.id;\r\n        const nonScrolledContainer: ContainerDirective = this.containers.find(container => container.id !== scrollableId);\r\n        if (nonScrolledContainer) {\r\n          nonScrolledContainer.element.scrollTo({\r\n            top: scrollableEv.measureScrollOffset('top'),\r\n            left: scrollableEv.measureScrollOffset('left'),\r\n          });\r\n        }\r\n      }\r\n    }));\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'td-loader-spinner',\r\n  templateUrl: './loader-spinner.component.html',\r\n  styleUrls: ['./loader-spinner.component.css']\r\n})\r\nexport class LoaderSpinnerComponent implements OnInit {\r\n  @Input() active = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'formatLine'\r\n})\r\nexport class FormatLinePipe implements PipeTransform {\r\n  transform(line: string, diffs?: string[]): string {\r\n    if (!line) {\r\n      return ' ';\r\n    }\r\n    if (!!diffs && diffs.length > 0) {\r\n      /*diffs.forEach(diff => {\r\n        line = line.replace(diff, `<span class=\"highli\">${diff}</span>`);\r\n      });*/\r\n    }\r\n    return line\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/ /g, '&nbsp;');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxTextDiffComponent } from './ngx-text-diff.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LoaderSpinnerComponent } from './loader-spinner/loader-spinner.component';\r\nimport { FormatLinePipe } from './format-line.pipe';\r\nimport { ContainerDirective } from './ngx-text-diff-container.directive';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, ScrollingModule],\r\n  declarations: [NgxTextDiffComponent, LoaderSpinnerComponent, FormatLinePipe, ContainerDirective],\r\n  exports: [NgxTextDiffComponent],\r\n})\r\nexport class NgxTextDiffModule {}\r\n"]}