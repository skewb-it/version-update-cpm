import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, diff_match_patch } from 'diff-match-patch';
import { isEmpty } from './ngx-text-diff.utils';
import * as i0 from "@angular/core";
var NgxTextDiffService = /** @class */ (function () {
    function NgxTextDiffService() {
        this.initParser();
    }
    NgxTextDiffService.prototype.initParser = function () {
        this.diffParser = new diff_match_patch();
    };
    NgxTextDiffService.prototype.getDiffsByLines = function (left, right) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var a = _this.diffParser.diff_linesToChars_(left, right);
            var lineText1 = a.chars1;
            var lineText2 = a.chars2;
            var linesArray = a.lineArray;
            var diffs = _this.diffParser.diff_main(lineText1, lineText2, true);
            _this.diffParser.diff_charsToLines_(diffs, linesArray);
            var rows = _this.formatOutput(diffs);
            if (!rows) {
                reject('Error');
            }
            resolve(rows);
        });
    };
    NgxTextDiffService.prototype.formatOutput = function (diffs) {
        var _this = this;
        var lineLeft = 1;
        var lineRight = 1;
        return diffs.reduce(function (rows, diff) {
            if (!rows) {
                rows = [];
            }
            var diffType = diff[0];
            var diffValue = diff[1];
            var leftDiffRow = null;
            var rightDiffRow = null;
            var leftContent = null;
            var rightContent = null;
            var rowTemp = null;
            switch (diffType) {
                case DIFF_EQUAL: // 0
                    diffValue
                        .split('\n')
                        .filter(function (value, index, array) {
                        if (index === array.length - 1) {
                            return !isEmpty(value);
                        }
                        return true;
                    })
                        .forEach(function (line) {
                        leftContent = {
                            lineNumber: lineLeft,
                            lineContent: line,
                            lineDiffs: [],
                            prefix: ''
                        };
                        rightContent = {
                            lineNumber: lineRight,
                            lineContent: line,
                            lineDiffs: [],
                            prefix: ''
                        };
                        rowTemp = {
                            leftContent: leftContent,
                            rightContent: rightContent,
                            belongTo: 'both',
                            hasDiffs: false,
                            numDiffs: 0,
                        };
                        rows.push(rowTemp);
                        lineRight = lineRight + 1;
                        lineLeft = lineLeft + 1;
                    });
                    break;
                case DIFF_DELETE: // -1
                    diffValue
                        .split('\n')
                        .filter(function (value, index, array) {
                        if (index === array.length - 1) {
                            return !isEmpty(value);
                        }
                        return true;
                    })
                        .forEach(function (line) {
                        rightDiffRow = rows.find(function (row) { return !row.leftContent && row.rightContent && row.rightContent.lineNumber === lineLeft && row.rightContent.prefix !== ''; });
                        leftContent = {
                            lineNumber: lineLeft,
                            lineContent: line,
                            lineDiffs: [{ content: line, isDiff: true }],
                            prefix: '-'
                        };
                        if (rightDiffRow) {
                            rightDiffRow.leftContent = leftContent;
                            rightDiffRow.leftContent.lineDiffs = _this.getDiffParts(rightDiffRow.leftContent.lineContent, rightDiffRow.rightContent.lineContent);
                            rightDiffRow.rightContent.lineDiffs = _this.getDiffParts(rightDiffRow.rightContent.lineContent, rightDiffRow.leftContent.lineContent);
                            rightDiffRow.belongTo = 'both';
                            rightDiffRow.numDiffs = _this.countDiffs(rightDiffRow);
                        }
                        else {
                            rows.push({
                                leftContent: leftContent,
                                rightContent: null,
                                hasDiffs: true,
                                belongTo: 'left',
                                numDiffs: 1,
                            });
                        }
                        lineLeft = lineLeft + 1;
                    });
                    break;
                case DIFF_INSERT: // 1
                    diffValue
                        .split('\n')
                        .filter(function (value, index, array) {
                        if (index === array.length - 1) {
                            return !isEmpty(value);
                        }
                        return true;
                    })
                        .forEach(function (line) {
                        leftDiffRow = rows.find(function (row) { return row.leftContent && !row.rightContent && row.leftContent.lineNumber === lineRight && row.leftContent.prefix !== ''; });
                        rightContent = {
                            lineNumber: lineRight,
                            lineContent: line,
                            lineDiffs: [{ content: line, isDiff: true }],
                            prefix: '+'
                        };
                        if (leftDiffRow) {
                            leftDiffRow.rightContent = rightContent;
                            leftDiffRow.leftContent.lineDiffs = _this.getDiffParts(leftDiffRow.leftContent.lineContent, leftDiffRow.rightContent.lineContent);
                            leftDiffRow.rightContent.lineDiffs = _this.getDiffParts(leftDiffRow.rightContent.lineContent, leftDiffRow.leftContent.lineContent);
                            leftDiffRow.belongTo = 'both';
                            leftDiffRow.numDiffs = _this.countDiffs(leftDiffRow);
                        }
                        else {
                            rows.push({
                                leftContent: null,
                                rightContent: rightContent,
                                hasDiffs: true,
                                belongTo: 'right',
                                numDiffs: 1,
                            });
                        }
                        lineRight = lineRight + 1;
                    });
                    break;
            }
            return rows;
        }, []);
    };
    NgxTextDiffService.prototype.countDiffs = function (result) {
        var diffCount = 0;
        if (result.leftContent) {
            diffCount += result.leftContent.lineDiffs.filter(function (diff) { return diff.isDiff; }).length;
        }
        if (result.leftContent) {
            diffCount += result.rightContent.lineDiffs.filter(function (diff) { return diff.isDiff; }).length;
        }
        return diffCount;
    };
    NgxTextDiffService.prototype.getDiffParts = function (value, compareValue) {
        var diffParts = [];
        var i = 0;
        var j = 0;
        var shared = '';
        var diff = '';
        while (i < value.length) {
            if (value[i] === compareValue[j] && j < compareValue.length) {
                if (diff !== '') {
                    diffParts.push({ content: diff, isDiff: true });
                    diff = '';
                }
                shared += value[i];
            }
            else {
                if (shared !== '') {
                    diffParts.push({ content: shared, isDiff: false });
                    shared = '';
                }
                diff += value[i];
            }
            i++;
            j++;
        }
        if (diff !== '') {
            diffParts.push({ content: diff, isDiff: true });
        }
        else if (shared !== '') {
            diffParts.push({ content: shared, isDiff: false });
        }
        return diffParts;
    };
    NgxTextDiffService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxTextDiffService_Factory() { return new NgxTextDiffService(); }, token: NgxTextDiffService, providedIn: "root" });
    NgxTextDiffService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], NgxTextDiffService);
    return NgxTextDiffService;
}());
export { NgxTextDiffService };
//# sourceMappingURL=data:application/json;base64,